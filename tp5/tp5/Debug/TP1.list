
TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006188  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08006358  08006358  00007358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006650  08006650  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006658  08006658  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006660  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000070  080066d0  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  080066d0  0000842c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fae9  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a02  00000000  00000000  00017b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f3  00000000  00000000  0001b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002397b  00000000  00000000  0001bc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012984  00000000  00000000  0003f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00e8  00000000  00000000  00051f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e34  00000000  00000000  00122098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00125ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006340 	.word	0x08006340

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006340 	.word	0x08006340

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <BMP280_Temperateur>:
int16_t dig_P9;

int32_t t_fine;


int32_t BMP280_Temperateur() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
	uint8_t *buffer;
	uint8_t registre = 0xFA;
 80005b6:	23fa      	movs	r3, #250	@ 0xfa
 80005b8:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, &registre, 1, HAL_MAX_DELAY) != 0) {
 80005ba:	23ee      	movs	r3, #238	@ 0xee
 80005bc:	4619      	mov	r1, r3
 80005be:	1cfa      	adds	r2, r7, #3
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4825      	ldr	r0, [pc, #148]	@ (8000660 <BMP280_Temperateur+0xb0>)
 80005ca:	f002 f83f 	bl	800264c <HAL_I2C_Master_Transmit>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <BMP280_Temperateur+0x2a>
			printf("Problem in Transmition I2C\r\n");
 80005d4:	4823      	ldr	r0, [pc, #140]	@ (8000664 <BMP280_Temperateur+0xb4>)
 80005d6:	f004 ff15 	bl	8005404 <puts>
		}

		buffer = (uint8_t*) malloc(3);
 80005da:	2003      	movs	r0, #3
 80005dc:	f004 fd2a 	bl	8005034 <malloc>
 80005e0:	4603      	mov	r3, r0
 80005e2:	607b      	str	r3, [r7, #4]
		if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer, 3, HAL_MAX_DELAY) != 0) {
 80005e4:	23ee      	movs	r3, #238	@ 0xee
 80005e6:	4619      	mov	r1, r3
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2303      	movs	r3, #3
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <BMP280_Temperateur+0xb0>)
 80005f4:	f002 f928 	bl	8002848 <HAL_I2C_Master_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <BMP280_Temperateur+0x54>
			printf("Problem in Reciption I2C\r\n");
 80005fe:	481a      	ldr	r0, [pc, #104]	@ (8000668 <BMP280_Temperateur+0xb8>)
 8000600:	f004 ff00 	bl	8005404 <puts>
		}

	NONcompensateTemperateur = ((int32_t) (buffer[0]) << 12) | ((int32_t) (buffer[1]) << 4) | ((int32_t) (buffer[2]) >> 4);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	031a      	lsls	r2, r3, #12
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	4313      	orrs	r3, r2
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	3202      	adds	r2, #2
 8000618:	7812      	ldrb	r2, [r2, #0]
 800061a:	0912      	lsrs	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	4313      	orrs	r3, r2
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <BMP280_Temperateur+0xbc>)
 8000622:	6013      	str	r3, [r2, #0]
	compensateTemperateur =bmp280_compensate_T_int32(NONcompensateTemperateur);
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <BMP280_Temperateur+0xbc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f88d 	bl	8000748 <bmp280_compensate_T_int32>
 800062e:	4603      	mov	r3, r0
 8000630:	4a0f      	ldr	r2, [pc, #60]	@ (8000670 <BMP280_Temperateur+0xc0>)
 8000632:	6013      	str	r3, [r2, #0]
	free(buffer);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f004 fd05 	bl	8005044 <free>

	printf("TemperatureNonCompens: %ld \r\n" , NONcompensateTemperateur);
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <BMP280_Temperateur+0xbc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	@ (8000674 <BMP280_Temperateur+0xc4>)
 8000642:	f004 fe77 	bl	8005334 <iprintf>
	printf("TemperatureCompens: %ld\r\n", compensateTemperateur);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <BMP280_Temperateur+0xc0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	480a      	ldr	r0, [pc, #40]	@ (8000678 <BMP280_Temperateur+0xc8>)
 800064e:	f004 fe71 	bl	8005334 <iprintf>
	return NONcompensateTemperateur;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <BMP280_Temperateur+0xbc>)
 8000654:	681b      	ldr	r3, [r3, #0]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000e0 	.word	0x200000e0
 8000664:	08006358 	.word	0x08006358
 8000668:	08006374 	.word	0x08006374
 800066c:	20000098 	.word	0x20000098
 8000670:	20000094 	.word	0x20000094
 8000674:	08006390 	.word	0x08006390
 8000678:	080063b0 	.word	0x080063b0

0800067c <BMP280_Pression>:

int BMP280_Pression() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af02      	add	r7, sp, #8

	uint8_t *buffer;
	uint8_t registre = 0xF7;
 8000682:	23f7      	movs	r3, #247	@ 0xf7
 8000684:	70fb      	strb	r3, [r7, #3]


	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, &registre, 1, HAL_MAX_DELAY) != 0) {
 8000686:	23ee      	movs	r3, #238	@ 0xee
 8000688:	4619      	mov	r1, r3
 800068a:	1cfa      	adds	r2, r7, #3
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4825      	ldr	r0, [pc, #148]	@ (800072c <BMP280_Pression+0xb0>)
 8000696:	f001 ffd9 	bl	800264c <HAL_I2C_Master_Transmit>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <BMP280_Pression+0x2a>
				printf("Problem in Transmition I2C\r\n");
 80006a0:	4823      	ldr	r0, [pc, #140]	@ (8000730 <BMP280_Pression+0xb4>)
 80006a2:	f004 feaf 	bl	8005404 <puts>
			}

			buffer = (uint8_t*) malloc(3);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f004 fcc4 	bl	8005034 <malloc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
			if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer, 3, HAL_MAX_DELAY) != 0) {
 80006b0:	23ee      	movs	r3, #238	@ 0xee
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2303      	movs	r3, #3
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	481b      	ldr	r0, [pc, #108]	@ (800072c <BMP280_Pression+0xb0>)
 80006c0:	f002 f8c2 	bl	8002848 <HAL_I2C_Master_Receive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <BMP280_Pression+0x54>
				printf("Problem in Reception I2C\r\n");
 80006ca:	481a      	ldr	r0, [pc, #104]	@ (8000734 <BMP280_Pression+0xb8>)
 80006cc:	f004 fe9a 	bl	8005404 <puts>
			}

	NONcompensatePression = ((int32_t) (buffer[0]) << 12) | ((int32_t) (buffer[1]) << 4) | ((int32_t) (buffer[2]) >> 4);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	031a      	lsls	r2, r3, #12
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4313      	orrs	r3, r2
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	3202      	adds	r2, #2
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	0912      	lsrs	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	4313      	orrs	r3, r2
 80006ec:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <BMP280_Pression+0xbc>)
 80006ee:	6013      	str	r3, [r2, #0]

	compensatePression=bmp280_compensate_P_int32(NONcompensatePression);
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <BMP280_Pression+0xbc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f871 	bl	80007dc <bmp280_compensate_P_int32>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <BMP280_Pression+0xc0>)
 8000700:	601a      	str	r2, [r3, #0]
	free(buffer);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f004 fc9e 	bl	8005044 <free>

	printf("PressionNonCompens: %ld \r\n" , NONcompensatePression);
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <BMP280_Pression+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <BMP280_Pression+0xc4>)
 8000710:	f004 fe10 	bl	8005334 <iprintf>
	printf("PressionCompens: %ld\r\n", compensatePression);
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <BMP280_Pression+0xc0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	480a      	ldr	r0, [pc, #40]	@ (8000744 <BMP280_Pression+0xc8>)
 800071c:	f004 fe0a 	bl	8005334 <iprintf>


	return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000e0 	.word	0x200000e0
 8000730:	08006358 	.word	0x08006358
 8000734:	080063cc 	.word	0x080063cc
 8000738:	2000008c 	.word	0x2000008c
 800073c:	20000090 	.word	0x20000090
 8000740:	080063e8 	.word	0x080063e8
 8000744:	08006404 	.word	0x08006404

08000748 <bmp280_compensate_T_int32>:
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
int32_t t_fine;

int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	10da      	asrs	r2, r3, #3
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <bmp280_compensate_T_int32+0x80>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <bmp280_compensate_T_int32+0x84>)
 800075e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	12db      	asrs	r3, r3, #11
 8000768:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) *
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	111b      	asrs	r3, r3, #4
 800076e:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <bmp280_compensate_T_int32+0x80>)
 8000770:	8812      	ldrh	r2, [r2, #0]
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	1112      	asrs	r2, r2, #4
 8000778:	4913      	ldr	r1, [pc, #76]	@ (80007c8 <bmp280_compensate_T_int32+0x80>)
 800077a:	8809      	ldrh	r1, [r1, #0]
 800077c:	1a52      	subs	r2, r2, r1
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	131b      	asrs	r3, r3, #12
			((int32_t)dig_T3)) >> 14;
 8000784:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <bmp280_compensate_T_int32+0x88>)
 8000786:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) *
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	139b      	asrs	r3, r3, #14
 8000790:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	4413      	add	r3, r2
 8000798:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <bmp280_compensate_T_int32+0x8c>)
 800079a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <bmp280_compensate_T_int32+0x8c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	3380      	adds	r3, #128	@ 0x80
 80007a8:	121b      	asrs	r3, r3, #8
 80007aa:	60fb      	str	r3, [r7, #12]
	//printf("TemperatureCompens: %ld\r\n", T);

	return T/100;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <bmp280_compensate_T_int32+0x90>)
 80007b0:	fb82 1203 	smull	r1, r2, r2, r3
 80007b4:	1152      	asrs	r2, r2, #5
 80007b6:	17db      	asrs	r3, r3, #31
 80007b8:	1ad3      	subs	r3, r2, r3
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	2000009e 	.word	0x2000009e
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	200000b4 	.word	0x200000b4
 80007d8:	51eb851f 	.word	0x51eb851f

080007dc <bmp280_compensate_P_int32>:
uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 80007dc:	b480      	push	{r7}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 80007e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000910 <bmp280_compensate_P_int32+0x134>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	105b      	asrs	r3, r3, #1
 80007ea:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 80007ee:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	109b      	asrs	r3, r3, #2
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	1092      	asrs	r2, r2, #2
 80007f8:	fb02 f303 	mul.w	r3, r2, r3
 80007fc:	12db      	asrs	r3, r3, #11
 80007fe:	4a45      	ldr	r2, [pc, #276]	@ (8000914 <bmp280_compensate_P_int32+0x138>)
 8000800:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 800080a:	4b43      	ldr	r3, [pc, #268]	@ (8000918 <bmp280_compensate_P_int32+0x13c>)
 800080c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000810:	461a      	mov	r2, r3
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	fb02 f303 	mul.w	r3, r2, r3
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	109a      	asrs	r2, r3, #2
 8000824:	4b3d      	ldr	r3, [pc, #244]	@ (800091c <bmp280_compensate_P_int32+0x140>)
 8000826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082a:	041b      	lsls	r3, r3, #16
 800082c:	4413      	add	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) * var1)>>1))>>18;
 8000830:	4b3b      	ldr	r3, [pc, #236]	@ (8000920 <bmp280_compensate_P_int32+0x144>)
 8000832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000836:	4619      	mov	r1, r3
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	109b      	asrs	r3, r3, #2
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	1092      	asrs	r2, r2, #2
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	135b      	asrs	r3, r3, #13
 8000846:	fb01 f303 	mul.w	r3, r1, r3
 800084a:	10da      	asrs	r2, r3, #3
 800084c:	4b35      	ldr	r3, [pc, #212]	@ (8000924 <bmp280_compensate_P_int32+0x148>)
 800084e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000852:	4619      	mov	r1, r3
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	fb01 f303 	mul.w	r3, r1, r3
 800085a:	105b      	asrs	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	149b      	asrs	r3, r3, #18
 8000860:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000868:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <bmp280_compensate_P_int32+0x14c>)
 800086a:	8812      	ldrh	r2, [r2, #0]
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	13db      	asrs	r3, r3, #15
 8000872:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <bmp280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800087a:	2300      	movs	r3, #0
 800087c:	e041      	b.n	8000902 <bmp280_compensate_P_int32+0x126>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	131b      	asrs	r3, r3, #12
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	4a28      	ldr	r2, [pc, #160]	@ (800092c <bmp280_compensate_P_int32+0x150>)
 800088a:	fb02 f303 	mul.w	r3, r2, r3
 800088e:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8000892:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8000896:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db06      	blt.n	80008ac <bmp280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005a      	lsls	r2, r3, #1
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e005      	b.n	80008b8 <bmp280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <bmp280_compensate_P_int32+0x154>)
 80008ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008be:	4619      	mov	r1, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	08d2      	lsrs	r2, r2, #3
 80008c8:	fb02 f303 	mul.w	r3, r2, r3
 80008cc:	0b5b      	lsrs	r3, r3, #13
 80008ce:	fb01 f303 	mul.w	r3, r1, r3
 80008d2:	131b      	asrs	r3, r3, #12
 80008d4:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	461a      	mov	r2, r3
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <bmp280_compensate_P_int32+0x158>)
 80008de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	135b      	asrs	r3, r3, #13
 80008e8:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a11      	ldr	r2, [pc, #68]	@ (8000938 <bmp280_compensate_P_int32+0x15c>)
 80008f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008f6:	4413      	add	r3, r2
 80008f8:	111a      	asrs	r2, r3, #4
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]
	return p;
 8000900:	697b      	ldr	r3, [r7, #20]
}
 8000902:	4618      	mov	r0, r3
 8000904:	371c      	adds	r7, #28
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200000b4 	.word	0x200000b4
 8000914:	200000ac 	.word	0x200000ac
 8000918:	200000aa 	.word	0x200000aa
 800091c:	200000a8 	.word	0x200000a8
 8000920:	200000a6 	.word	0x200000a6
 8000924:	200000a4 	.word	0x200000a4
 8000928:	200000a2 	.word	0x200000a2
 800092c:	fffff3cb 	.word	0xfffff3cb
 8000930:	200000b2 	.word	0x200000b2
 8000934:	200000b0 	.word	0x200000b0
 8000938:	200000ae 	.word	0x200000ae

0800093c <BMP280_get_trimming>:


void  BMP280_get_trimming(uint8_t data_Calib[size_Calib])
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b094      	sub	sp, #80	@ 0x50
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
	uint8_t registre = 0x88;
 8000944:	2388      	movs	r3, #136	@ 0x88
 8000946:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t* p = data_Calib;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	643b      	str	r3, [r7, #64]	@ 0x40
    int i = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, &registre, 1, HAL_MAX_DELAY) == HAL_OK)
 8000952:	23ee      	movs	r3, #238	@ 0xee
 8000954:	4619      	mov	r1, r3
 8000956:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2301      	movs	r3, #1
 8000962:	4876      	ldr	r0, [pc, #472]	@ (8000b3c <BMP280_get_trimming+0x200>)
 8000964:	f001 fe72 	bl	800264c <HAL_I2C_Master_Transmit>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 80e2 	bne.w	8000b34 <BMP280_get_trimming+0x1f8>
    {
        if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, data_Calib, size_Calib, HAL_MAX_DELAY) == HAL_OK)
 8000970:	23ee      	movs	r3, #238	@ 0xee
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	231a      	movs	r3, #26
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	486f      	ldr	r0, [pc, #444]	@ (8000b3c <BMP280_get_trimming+0x200>)
 8000980:	f001 ff62 	bl	8002848 <HAL_I2C_Master_Receive>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	f040 80d4 	bne.w	8000b34 <BMP280_get_trimming+0x1f8>
        {
            printf("Calibration data received\r\n");
 800098c:	486c      	ldr	r0, [pc, #432]	@ (8000b40 <BMP280_get_trimming+0x204>)
 800098e:	f004 fd39 	bl	8005404 <puts>

            // Create an array of pointers to your calibration data variables
            uint16_t* dig_values[] = { &dig_T1, &dig_T2, &dig_T3, &dig_P1, &dig_P2, &dig_P3,
 8000992:	4b6c      	ldr	r3, [pc, #432]	@ (8000b44 <BMP280_get_trimming+0x208>)
 8000994:	f107 040c 	add.w	r4, r7, #12
 8000998:	461d      	mov	r5, r3
 800099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                p += 2;
            }*/

          //2 eme solution

            dig_T1 = (p[1] << 8) | p[0];
 80009aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ac:	3301      	adds	r3, #1
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b61      	ldr	r3, [pc, #388]	@ (8000b48 <BMP280_get_trimming+0x20c>)
 80009c2:	801a      	strh	r2, [r3, #0]
            p += 2;
 80009c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009c6:	3302      	adds	r3, #2
 80009c8:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_T2 = (p[1] << 8) | p[0];
 80009ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009cc:	3301      	adds	r3, #1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b21b      	sxth	r3, r3
 80009da:	4313      	orrs	r3, r2
 80009dc:	b21a      	sxth	r2, r3
 80009de:	4b5b      	ldr	r3, [pc, #364]	@ (8000b4c <BMP280_get_trimming+0x210>)
 80009e0:	801a      	strh	r2, [r3, #0]
            p += 2;
 80009e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009e4:	3302      	adds	r3, #2
 80009e6:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_T3 = (p[1] << 8) | p[0];
 80009e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ea:	3301      	adds	r3, #1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	b21a      	sxth	r2, r3
 80009f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	4b54      	ldr	r3, [pc, #336]	@ (8000b50 <BMP280_get_trimming+0x214>)
 80009fe:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a02:	3302      	adds	r3, #2
 8000a04:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P1 = (p[1] << 8) | p[0];
 8000a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a08:	3301      	adds	r3, #1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b54 <BMP280_get_trimming+0x218>)
 8000a1e:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a22:	3302      	adds	r3, #2
 8000a24:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P2 = (p[1] << 8) | p[0];
 8000a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a28:	3301      	adds	r3, #1
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	4b47      	ldr	r3, [pc, #284]	@ (8000b58 <BMP280_get_trimming+0x21c>)
 8000a3c:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a40:	3302      	adds	r3, #2
 8000a42:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P3 = (p[1] << 8) | p[0];
 8000a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a46:	3301      	adds	r3, #1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	4b40      	ldr	r3, [pc, #256]	@ (8000b5c <BMP280_get_trimming+0x220>)
 8000a5a:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a5e:	3302      	adds	r3, #2
 8000a60:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P4 = (p[1] << 8) | p[0];
 8000a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a64:	3301      	adds	r3, #1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	4b3a      	ldr	r3, [pc, #232]	@ (8000b60 <BMP280_get_trimming+0x224>)
 8000a78:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P5 = (p[1] << 8) | p[0];
 8000a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a82:	3301      	adds	r3, #1
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	4b33      	ldr	r3, [pc, #204]	@ (8000b64 <BMP280_get_trimming+0x228>)
 8000a96:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P6 = (p[1] << 8) | p[0];
 8000a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <BMP280_get_trimming+0x22c>)
 8000ab4:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ab8:	3302      	adds	r3, #2
 8000aba:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P7 = (p[1] << 8) | p[0];
 8000abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000abe:	3301      	adds	r3, #1
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <BMP280_get_trimming+0x230>)
 8000ad2:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P8 = (p[1] << 8) | p[0];
 8000ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000adc:	3301      	adds	r3, #1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <BMP280_get_trimming+0x234>)
 8000af0:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af4:	3302      	adds	r3, #2
 8000af6:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P9 = (p[1] << 8) | p[0];
 8000af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000afa:	3301      	adds	r3, #1
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <BMP280_get_trimming+0x238>)
 8000b0e:	801a      	strh	r2, [r3, #0]



            // Display the calibration data
            for (i = 0; i < size_Calib; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b14:	e00b      	b.n	8000b2e <BMP280_get_trimming+0x1f2>
            {
                printf("calib %d = 0x%x\n\r", i, data_Calib[i]);
 8000b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000b22:	4815      	ldr	r0, [pc, #84]	@ (8000b78 <BMP280_get_trimming+0x23c>)
 8000b24:	f004 fc06 	bl	8005334 <iprintf>
            for (i = 0; i < size_Calib; i++)
 8000b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b30:	2b19      	cmp	r3, #25
 8000b32:	ddf0      	ble.n	8000b16 <BMP280_get_trimming+0x1da>
            }
        }
    }
}
 8000b34:	bf00      	nop
 8000b36:	3748      	adds	r7, #72	@ 0x48
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b3c:	200000e0 	.word	0x200000e0
 8000b40:	0800641c 	.word	0x0800641c
 8000b44:	0800644c 	.word	0x0800644c
 8000b48:	2000009c 	.word	0x2000009c
 8000b4c:	2000009e 	.word	0x2000009e
 8000b50:	200000a0 	.word	0x200000a0
 8000b54:	200000a2 	.word	0x200000a2
 8000b58:	200000a4 	.word	0x200000a4
 8000b5c:	200000a6 	.word	0x200000a6
 8000b60:	200000a8 	.word	0x200000a8
 8000b64:	200000aa 	.word	0x200000aa
 8000b68:	200000ac 	.word	0x200000ac
 8000b6c:	200000ae 	.word	0x200000ae
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	200000b2 	.word	0x200000b2
 8000b78:	08006438 	.word	0x08006438

08000b7c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000b82:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <MX_CAN1_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000b88:	2206      	movs	r2, #6
 8000b8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000b9a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000b9e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000ba2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ba6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_CAN1_Init+0x64>)
 8000bce:	f000 fe97 	bl	8001900 <HAL_CAN_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f000 fbca 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000b8 	.word	0x200000b8
 8000be4:	40006400 	.word	0x40006400

08000be8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	@ (8000c6c <HAL_CAN_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12c      	bne.n	8000c64 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_CAN_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_CAN_MspInit+0x88>)
 8000c14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_CAN_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_CAN_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <HAL_CAN_MspInit+0x88>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_CAN_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c54:	2309      	movs	r3, #9
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <HAL_CAN_MspInit+0x8c>)
 8000c60:	f001 fa02 	bl	8002068 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	@ 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40006400 	.word	0x40006400
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400

08000c78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a2c      	ldr	r2, [pc, #176]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a25      	ldr	r2, [pc, #148]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a1e      	ldr	r2, [pc, #120]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2120      	movs	r1, #32
 8000d02:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <MX_GPIO_Init+0xd4>)
 8000d04:	f001 fb44 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <MX_GPIO_Init+0xd8>)
 8000d20:	f001 f9a2 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d24:	2320      	movs	r3, #32
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_GPIO_Init+0xd4>)
 8000d3c:	f001 f994 	bl	8002068 <HAL_GPIO_Init>

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	@ 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020800 	.word	0x40020800

08000d54 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <MX_I2C2_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <MX_I2C2_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d92:	f001 fb17 	bl	80023c4 <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 fae8 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000e0 	.word	0x200000e0
 8000da8:	40005800 	.word	0x40005800
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <HAL_I2C_MspInit+0xc4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d14b      	bne.n	8000e6a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a27      	ldr	r2, [pc, #156]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e10:	2312      	movs	r3, #18
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4815      	ldr	r0, [pc, #84]	@ (8000e7c <HAL_I2C_MspInit+0xcc>)
 8000e28:	f001 f91e 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e32:	2312      	movs	r3, #18
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <HAL_I2C_MspInit+0xd0>)
 8000e4a:	f001 f90d 	bl	8002068 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_I2C_MspInit+0xc8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40005800 	.word	0x40005800
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020800 	.word	0x40020800

08000e84 <MPU9250_Data>:
	MPU9250_data[0] = 0x1C;     // Adresse du registre ACCEL_CONFIG
	MPU9250_data[1] = 0x08;     // Réglage de la plage à ±4g
	HAL_I2C_Master_Transmit(&hi2c2, 0x68<< 1, data, 2, HAL_MAX_DELAY);
}

void MPU9250_Data(int16_t *x, int16_t *y, int16_t *z) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]

	uint8_t reg_ACCEL_XOUT_H = 0x3B;
 8000e90:	233b      	movs	r3, #59	@ 0x3b
 8000e92:	75fb      	strb	r3, [r7, #23]
	uint8_t data_read[6];


	// Envoyer l'adresse du registre de départ
	HAL_I2C_Master_Transmit(&hi2c2, 0x68<< 1, &reg_ACCEL_XOUT_H, 1, HAL_MAX_DELAY);
 8000e94:	f107 0217 	add.w	r2, r7, #23
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	21d0      	movs	r1, #208	@ 0xd0
 8000ea2:	4816      	ldr	r0, [pc, #88]	@ (8000efc <MPU9250_Data+0x78>)
 8000ea4:	f001 fbd2 	bl	800264c <HAL_I2C_Master_Transmit>

	// Recevoir les 6 octets de données des axes X, Y, Z
	HAL_I2C_Master_Receive(&hi2c2, 0x68 << 1, data_read, 6, HAL_MAX_DELAY);
 8000ea8:	f107 0210 	add.w	r2, r7, #16
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	21d0      	movs	r1, #208	@ 0xd0
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <MPU9250_Data+0x78>)
 8000eb8:	f001 fcc6 	bl	8002848 <HAL_I2C_Master_Receive>

	// Construire les valeurs brutes pour chaque axe
	*x = (int16_t)((data_read[0] << 8) | data_read[1]);
 8000ebc:	7c3b      	ldrb	r3, [r7, #16]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7c7b      	ldrb	r3, [r7, #17]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((data_read[2] << 8) | data_read[3]);
 8000ece:	7cbb      	ldrb	r3, [r7, #18]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	7cfb      	ldrb	r3, [r7, #19]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((data_read[4] << 8) | data_read[5]);
 8000ee0:	7d3b      	ldrb	r3, [r7, #20]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7d7b      	ldrb	r3, [r7, #21]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	801a      	strh	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000e0 	.word	0x200000e0

08000f00 <Data_Accel>:


void Data_Accel(int16_t x, int16_t y, int16_t z) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	807b      	strh	r3, [r7, #2]
	printf("\r\n Acceleration X: %d , Y: %d , Z: %d \r\n", x * 4, y * 4, z * 4);  // ±4g
 8000f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f16:	0099      	lsls	r1, r3, #2
 8000f18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f1c:	009a      	lsls	r2, r3, #2
 8000f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <Data_Accel+0x34>)
 8000f26:	f004 fa05 	bl	8005334 <iprintf>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800647c 	.word	0x0800647c

08000f38 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f3e:	f000 fc49 	bl	80017d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f42:	f000 f92f 	bl	80011a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f46:	f7ff fe97 	bl	8000c78 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f4a:	f000 fb6b 	bl	8001624 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8000f4e:	f7ff ff01 	bl	8000d54 <MX_I2C2_Init>
	MX_CAN1_Init();
 8000f52:	f7ff fe13 	bl	8000b7c <MX_CAN1_Init>
	MX_USART1_UART_Init();
 8000f56:	f000 fb3b 	bl	80015d0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("TESTtp1 Hedia et Hugo \r\n");
 8000f5a:	4872      	ldr	r0, [pc, #456]	@ (8001124 <main+0x1ec>)
 8000f5c:	f004 fa52 	bl	8005404 <puts>

	uint8_t buf[1];

	buffer[0] = 0xD0;
 8000f60:	4b71      	ldr	r3, [pc, #452]	@ (8001128 <main+0x1f0>)
 8000f62:	22d0      	movs	r2, #208	@ 0xd0
 8000f64:	701a      	strb	r2, [r3, #0]
	printf("Hello world\r\n");
 8000f66:	4871      	ldr	r0, [pc, #452]	@ (800112c <main+0x1f4>)
 8000f68:	f004 fa4c 	bl	8005404 <puts>
	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, buffer, 1, HAL_MAX_DELAY) != 0) {
 8000f6c:	23ee      	movs	r3, #238	@ 0xee
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	4a6b      	ldr	r2, [pc, #428]	@ (8001128 <main+0x1f0>)
 8000f7a:	486d      	ldr	r0, [pc, #436]	@ (8001130 <main+0x1f8>)
 8000f7c:	f001 fb66 	bl	800264c <HAL_I2C_Master_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <main+0x54>
		printf("Problem in I2C Transmission\r\n");
 8000f86:	486b      	ldr	r0, [pc, #428]	@ (8001134 <main+0x1fc>)
 8000f88:	f004 fa3c 	bl	8005404 <puts>
	}

	if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer, 1,HAL_MAX_DELAY) != 0) {
 8000f8c:	23ee      	movs	r3, #238	@ 0xee
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	4a63      	ldr	r2, [pc, #396]	@ (8001128 <main+0x1f0>)
 8000f9a:	4865      	ldr	r0, [pc, #404]	@ (8001130 <main+0x1f8>)
 8000f9c:	f001 fc54 	bl	8002848 <HAL_I2C_Master_Receive>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <main+0x74>
		printf("Problem in I2C Reception \r\n");
 8000fa6:	4864      	ldr	r0, [pc, #400]	@ (8001138 <main+0x200>)
 8000fa8:	f004 fa2c 	bl	8005404 <puts>
	}

	printf("Identifiant: 0x%x", buffer[0]);
 8000fac:	4b5e      	ldr	r3, [pc, #376]	@ (8001128 <main+0x1f0>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4862      	ldr	r0, [pc, #392]	@ (800113c <main+0x204>)
 8000fb4:	f004 f9be 	bl	8005334 <iprintf>

	if (buf[0] == 0x58) {
 8000fb8:	7a3b      	ldrb	r3, [r7, #8]
 8000fba:	2b58      	cmp	r3, #88	@ 0x58
 8000fbc:	d103      	bne.n	8000fc6 <main+0x8e>
		printf("Verification Ok\r\n");
 8000fbe:	4860      	ldr	r0, [pc, #384]	@ (8001140 <main+0x208>)
 8000fc0:	f004 fa20 	bl	8005404 <puts>
 8000fc4:	e002      	b.n	8000fcc <main+0x94>

	} else {
		printf("Verification not Ok!\r\n");
 8000fc6:	485f      	ldr	r0, [pc, #380]	@ (8001144 <main+0x20c>)
 8000fc8:	f004 fa1c 	bl	8005404 <puts>

	}


	printf("\r\nConfigure BMP280\r\n");
 8000fcc:	485e      	ldr	r0, [pc, #376]	@ (8001148 <main+0x210>)
 8000fce:	f004 fa19 	bl	8005404 <puts>
	uint8_t buffer2[3];


	buffer2[0] = 0xF4;
 8000fd2:	23f4      	movs	r3, #244	@ 0xf4
 8000fd4:	713b      	strb	r3, [r7, #4]
	buffer2[1] = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000fd6:	2357      	movs	r3, #87	@ 0x57
 8000fd8:	717b      	strb	r3, [r7, #5]
	printf("Configure...\r\n");
 8000fda:	485c      	ldr	r0, [pc, #368]	@ (800114c <main+0x214>)
 8000fdc:	f004 fa12 	bl	8005404 <puts>

	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, buffer2, 2, HAL_MAX_DELAY) != 0) {
 8000fe0:	23ee      	movs	r3, #238	@ 0xee
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	1d3a      	adds	r2, r7, #4
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2302      	movs	r3, #2
 8000fee:	4850      	ldr	r0, [pc, #320]	@ (8001130 <main+0x1f8>)
 8000ff0:	f001 fb2c 	bl	800264c <HAL_I2C_Master_Transmit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <main+0xc8>
		printf("Problem with I2C Transmit\r\n");
 8000ffa:	4855      	ldr	r0, [pc, #340]	@ (8001150 <main+0x218>)
 8000ffc:	f004 fa02 	bl	8005404 <puts>
	}

	if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer2, 1, HAL_MAX_DELAY) != 0) {
 8001000:	23ee      	movs	r3, #238	@ 0xee
 8001002:	4619      	mov	r1, r3
 8001004:	1d3a      	adds	r2, r7, #4
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	4848      	ldr	r0, [pc, #288]	@ (8001130 <main+0x1f8>)
 8001010:	f001 fc1a 	bl	8002848 <HAL_I2C_Master_Receive>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <main+0xe8>
		printf("Problem with I2C Receive\r\n");
 800101a:	484e      	ldr	r0, [pc, #312]	@ (8001154 <main+0x21c>)
 800101c:	f004 f9f2 	bl	8005404 <puts>
	}


	if (buffer2[0] == buffer2[1]) {
 8001020:	793a      	ldrb	r2, [r7, #4]
 8001022:	797b      	ldrb	r3, [r7, #5]
 8001024:	429a      	cmp	r2, r3
 8001026:	d103      	bne.n	8001030 <main+0xf8>
		printf("Verification Ok\r\n");
 8001028:	4845      	ldr	r0, [pc, #276]	@ (8001140 <main+0x208>)
 800102a:	f004 f9eb 	bl	8005404 <puts>
 800102e:	e002      	b.n	8001036 <main+0xfe>
	} else {
		printf("Verification not Ok!\r\n");
 8001030:	4844      	ldr	r0, [pc, #272]	@ (8001144 <main+0x20c>)
 8001032:	f004 f9e7 	bl	8005404 <puts>
		//return 1;
	}

	//printf("etalonage\r\n");
	BMP280_get_trimming(data_Calib);
 8001036:	4848      	ldr	r0, [pc, #288]	@ (8001158 <main+0x220>)
 8001038:	f7ff fc80 	bl	800093c <BMP280_get_trimming>
	BMP280_Temperateur();
 800103c:	f7ff fab8 	bl	80005b0 <BMP280_Temperateur>
	BMP280_Pression();
 8001040:	f7ff fb1c 	bl	800067c <BMP280_Pression>
	//char[50] reponse[]
	//HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response));

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer[rx_index], 1);
 8001044:	4b45      	ldr	r3, [pc, #276]	@ (800115c <main+0x224>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	4b44      	ldr	r3, [pc, #272]	@ (8001160 <main+0x228>)
 800104e:	4413      	add	r3, r2
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	4843      	ldr	r0, [pc, #268]	@ (8001164 <main+0x22c>)
 8001056:	f003 f872 	bl	800413e <HAL_UART_Receive_IT>

	//HAL_Delay(1000);

	printf("\r\n Affichage de MPU \r\n");
 800105a:	4843      	ldr	r0, [pc, #268]	@ (8001168 <main+0x230>)
 800105c:	f004 f9d2 	bl	8005404 <puts>
	MPU9250_Data(&x, &y, &z);  // ou MPU9250_Read_Raw_Data pour le MPU9250
 8001060:	4a42      	ldr	r2, [pc, #264]	@ (800116c <main+0x234>)
 8001062:	4943      	ldr	r1, [pc, #268]	@ (8001170 <main+0x238>)
 8001064:	4843      	ldr	r0, [pc, #268]	@ (8001174 <main+0x23c>)
 8001066:	f7ff ff0d 	bl	8000e84 <MPU9250_Data>
	Data_Accel(x, y, z);
 800106a:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <main+0x23c>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	4a3f      	ldr	r2, [pc, #252]	@ (8001170 <main+0x238>)
 8001072:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001076:	4a3d      	ldr	r2, [pc, #244]	@ (800116c <main+0x234>)
 8001078:	f9b2 2000 	ldrsh.w	r2, [r2]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff3f 	bl	8000f00 <Data_Accel>
	//printf("Test\r\n");
	//HAL_UART_Receive_IT(&huart3, &Data, 1);

	// Démarrer le module CAN

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001082:	483d      	ldr	r0, [pc, #244]	@ (8001178 <main+0x240>)
 8001084:	f000 fd37 	bl	8001af6 <HAL_CAN_Start>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <main+0x160>
	{
		printf("erreur CAN\r\n");
 800108e:	483b      	ldr	r0, [pc, #236]	@ (800117c <main+0x244>)
 8001090:	f004 f9b8 	bl	8005404 <puts>
		//Gestion d'erreur
		Error_Handler();
 8001094:	f000 f96c 	bl	8001370 <Error_Handler>
	// printf("activation de CAN\r\n");

	//Manuel Mode


	TxHeader.StdId = 0x61;          // ID standard du message
 8001098:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <main+0x248>)
 800109a:	2261      	movs	r2, #97	@ 0x61
 800109c:	601a      	str	r2, [r3, #0]
	//TxHeader.ExtId = 0;              // ID étendu non utilisé ici
	TxHeader.IDE = CAN_ID_STD;       // Trame standard
 800109e:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <main+0x248>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;     // Trame de données
 80010a4:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <main+0x248>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;                // Taille des données (1 octet dans ce cas)
 80010aa:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <main+0x248>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80010b0:	4b33      	ldr	r3, [pc, #204]	@ (8001180 <main+0x248>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
	  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	  	  HAL_Delay(1000);

		 */
		// calcule d'angle
		angle = (Tempinit-BMP280_Temperateur())*coefficientK ;
 80010b6:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <main+0x24c>)
 80010b8:	681c      	ldr	r4, [r3, #0]
 80010ba:	f7ff fa79 	bl	80005b0 <BMP280_Temperateur>
 80010be:	4603      	mov	r3, r0
 80010c0:	1ae3      	subs	r3, r4, r3
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <main+0x250>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	fb12 f303 	smulbb	r3, r2, r3
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b2e      	ldr	r3, [pc, #184]	@ (800118c <main+0x254>)
 80010d2:	701a      	strb	r2, [r3, #0]
	 	  //HAL_Delay(1000);
	       printf("rotation moteur sens1\r\n");

		 */

		Val_temp=BMP280_Temperateur();
 80010d4:	f7ff fa6c 	bl	80005b0 <BMP280_Temperateur>
 80010d8:	4603      	mov	r3, r0
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <main+0x258>)
 80010de:	701a      	strb	r2, [r3, #0]

		int vitesse = Val_temp * 255;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <main+0x258>)
 80010e2:	f993 3000 	ldrsb.w	r3, [r3]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4613      	mov	r3, r2
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
		printf("angle=%i\r\n",vitesse);
 80010f0:	68f9      	ldr	r1, [r7, #12]
 80010f2:	4828      	ldr	r0, [pc, #160]	@ (8001194 <main+0x25c>)
 80010f4:	f004 f91e 	bl	8005334 <iprintf>

		//TxData[0] =90;// Commande pour déplacer le moteur de 90°

		TxData[1]=1;
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <main+0x260>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	705a      	strb	r2, [r3, #1]
		TxData[0]=vitesse;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <main+0x260>)
 8001104:	701a      	strb	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001106:	4b25      	ldr	r3, [pc, #148]	@ (800119c <main+0x264>)
 8001108:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <main+0x260>)
 800110a:	491d      	ldr	r1, [pc, #116]	@ (8001180 <main+0x248>)
 800110c:	481a      	ldr	r0, [pc, #104]	@ (8001178 <main+0x240>)
 800110e:	f000 fd36 	bl	8001b7e <HAL_CAN_AddTxMessage>
		HAL_Delay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001116:	f000 fbcf 	bl	80018b8 <HAL_Delay>
		printf("rotation moteur sens1\r\n");
 800111a:	4821      	ldr	r0, [pc, #132]	@ (80011a0 <main+0x268>)
 800111c:	f004 f972 	bl	8005404 <puts>
	{
 8001120:	bf00      	nop
 8001122:	e7c8      	b.n	80010b6 <main+0x17e>
 8001124:	080064a8 	.word	0x080064a8
 8001128:	2000017c 	.word	0x2000017c
 800112c:	080064c0 	.word	0x080064c0
 8001130:	200000e0 	.word	0x200000e0
 8001134:	080064d0 	.word	0x080064d0
 8001138:	080064f0 	.word	0x080064f0
 800113c:	0800650c 	.word	0x0800650c
 8001140:	08006520 	.word	0x08006520
 8001144:	08006534 	.word	0x08006534
 8001148:	0800654c 	.word	0x0800654c
 800114c:	08006560 	.word	0x08006560
 8001150:	08006570 	.word	0x08006570
 8001154:	0800658c 	.word	0x0800658c
 8001158:	20000160 	.word	0x20000160
 800115c:	200001c4 	.word	0x200001c4
 8001160:	20000184 	.word	0x20000184
 8001164:	2000024c 	.word	0x2000024c
 8001168:	080065a8 	.word	0x080065a8
 800116c:	20000150 	.word	0x20000150
 8001170:	2000014e 	.word	0x2000014e
 8001174:	2000014c 	.word	0x2000014c
 8001178:	200000b8 	.word	0x200000b8
 800117c:	080065c0 	.word	0x080065c0
 8001180:	20000134 	.word	0x20000134
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004
 800118c:	2000015c 	.word	0x2000015c
 8001190:	2000017d 	.word	0x2000017d
 8001194:	080065cc 	.word	0x080065cc
 8001198:	20000154 	.word	0x20000154
 800119c:	20000180 	.word	0x20000180
 80011a0:	080065d8 	.word	0x080065d8

080011a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2234      	movs	r2, #52	@ 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fa26 	bl	8005604 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <SystemClock_Config+0xd4>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	4a29      	ldr	r2, [pc, #164]	@ (8001278 <SystemClock_Config+0xd4>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <SystemClock_Config+0xd4>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <SystemClock_Config+0xd8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011f0:	4a22      	ldr	r2, [pc, #136]	@ (800127c <SystemClock_Config+0xd8>)
 80011f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <SystemClock_Config+0xd8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2310      	movs	r3, #16
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001218:	2310      	movs	r3, #16
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 800121c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001220:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001222:	2304      	movs	r3, #4
 8001224:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001226:	2302      	movs	r3, #2
 8001228:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4618      	mov	r0, r3
 8001234:	f002 fc0a 	bl	8003a4c <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800123e:	f000 f897 	bl	8001370 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	230f      	movs	r3, #15
 8001244:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	2302      	movs	r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001252:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2102      	movs	r1, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f8aa 	bl	80033b8 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800126a:	f000 f881 	bl	8001370 <Error_Handler>
	}
}
 800126e:	bf00      	nop
 8001270:	3750      	adds	r7, #80	@ 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1f      	ldr	r2, [pc, #124]	@ (800130c <HAL_UART_RxCpltCallback+0x8c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d138      	bne.n	8001304 <HAL_UART_RxCpltCallback+0x84>
		char received_char = rx_buffer[rx_index];
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <HAL_UART_RxCpltCallback+0x94>)
 800129c:	5c9b      	ldrb	r3, [r3, r2]
 800129e:	73fb      	strb	r3, [r7, #15]

		// Ajouter le caractère au buffer de commande
		if (received_char == '\r' || received_char == '\n') {
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b0d      	cmp	r3, #13
 80012a4:	d002      	beq.n	80012ac <HAL_UART_RxCpltCallback+0x2c>
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d10d      	bne.n	80012c8 <HAL_UART_RxCpltCallback+0x48>
			command_buffer[rx_index] = '\0';  // Terminer la commande
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_UART_RxCpltCallback+0x98>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]
			process_command(command_buffer);  // Traiter la commande reçue
 80012ba:	4817      	ldr	r0, [pc, #92]	@ (8001318 <HAL_UART_RxCpltCallback+0x98>)
 80012bc:	f000 f830 	bl	8001320 <process_command>
			rx_index = 0;                     // Réinitialiser l'index
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
		if (received_char == '\r' || received_char == '\n') {
 80012c6:	e012      	b.n	80012ee <HAL_UART_RxCpltCallback+0x6e>
		} else {
			command_buffer[rx_index++] = received_char;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	b2d1      	uxtb	r1, r2
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 80012d4:	7011      	strb	r1, [r2, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <HAL_UART_RxCpltCallback+0x98>)
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	5453      	strb	r3, [r2, r1]

			// Empêcher le dépassement du buffer
			if (rx_index >= BUFFER_SIZE) {
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80012e6:	d902      	bls.n	80012ee <HAL_UART_RxCpltCallback+0x6e>
				rx_index = 0;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
			}
		}

		// Relancer la réception d'un autre caractère
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer[rx_index], 1);
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_UART_RxCpltCallback+0x90>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <HAL_UART_RxCpltCallback+0x94>)
 80012f8:	4413      	add	r3, r2
 80012fa:	2201      	movs	r2, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	@ (800131c <HAL_UART_RxCpltCallback+0x9c>)
 8001300:	f002 ff1d 	bl	800413e <HAL_UART_Receive_IT>
	}
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40011000 	.word	0x40011000
 8001310:	200001c4 	.word	0x200001c4
 8001314:	20000184 	.word	0x20000184
 8001318:	200001c8 	.word	0x200001c8
 800131c:	2000024c 	.word	0x2000024c

08001320 <process_command>:

void process_command(char *command) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if (strncmp(command, "GET_T", 5) == 0) {
 8001328:	2205      	movs	r2, #5
 800132a:	490d      	ldr	r1, [pc, #52]	@ (8001360 <process_command+0x40>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f004 f971 	bl	8005614 <strncmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d103      	bne.n	8001340 <process_command+0x20>
		sprintf(response_buffer, "T=10_C\r\n"); // Exemple de température
 8001338:	490a      	ldr	r1, [pc, #40]	@ (8001364 <process_command+0x44>)
 800133a:	480b      	ldr	r0, [pc, #44]	@ (8001368 <process_command+0x48>)
 800133c:	f004 f86a 	bl	8005414 <siprintf>
    } else {
        sprintf(response_buffer, "Unknown command\r\n");
    }
	 */
	// Envoyer la réponse sur UART3
	HAL_UART_Transmit(&huart1, (uint8_t*)response_buffer, strlen(response_buffer), -1);
 8001340:	4809      	ldr	r0, [pc, #36]	@ (8001368 <process_command+0x48>)
 8001342:	f7fe ff65 	bl	8000210 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	b29a      	uxth	r2, r3
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	4906      	ldr	r1, [pc, #24]	@ (8001368 <process_command+0x48>)
 8001350:	4806      	ldr	r0, [pc, #24]	@ (800136c <process_command+0x4c>)
 8001352:	f002 fe69 	bl	8004028 <HAL_UART_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	080065f0 	.word	0x080065f0
 8001364:	080065f8 	.word	0x080065f8
 8001368:	20000208 	.word	0x20000208
 800136c:	2000024c 	.word	0x2000024c

08001370 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001390:	6453      	str	r3, [r2, #68]	@ 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f000 fd80 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800

080013cc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80013d4:	1d39      	adds	r1, r7, #4
 80013d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013da:	2201      	movs	r2, #1
 80013dc:	4803      	ldr	r0, [pc, #12]	@ (80013ec <__io_putchar+0x20>)
 80013de:	f002 fe23 	bl	8004028 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
 80013e2:	687b      	ldr	r3, [r7, #4]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000294 	.word	0x20000294

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 fa17 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <USART1_IRQHandler+0x10>)
 8001456:	f002 fe97 	bl	8004188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000024c 	.word	0x2000024c

08001464 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001476:	f3af 8000 	nop.w
 800147a:	4601      	mov	r1, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf0      	blt.n	8001476 <_read+0x12>
  }

  return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e009      	b.n	80014c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff87 	bl	80013cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf1      	blt.n	80014b0 <_write+0x12>
  }
  return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f004 f8b8 	bl	80056e4 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20020000 	.word	0x20020000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	20000248 	.word	0x20000248
 80015a8:	20000430 	.word	0x20000430

080015ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f002 fcbe 	bl	8003f88 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fead 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000024c 	.word	0x2000024c
 8001620:	40011000 	.word	0x40011000

08001624 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <MX_USART2_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800165c:	f002 fc94 	bl	8003f88 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f7ff fe83 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000294 	.word	0x20000294
 8001674:	40004400 	.word	0x40004400

08001678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a36      	ldr	r2, [pc, #216]	@ (8001770 <HAL_UART_MspInit+0xf8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d135      	bne.n	8001706 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a34      	ldr	r2, [pc, #208]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a2d      	ldr	r2, [pc, #180]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e4:	2307      	movs	r3, #7
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4822      	ldr	r0, [pc, #136]	@ (8001778 <HAL_UART_MspInit+0x100>)
 80016f0:	f000 fcba 	bl	8002068 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2025      	movs	r0, #37	@ 0x25
 80016fa:	f000 fbec 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016fe:	2025      	movs	r0, #37	@ 0x25
 8001700:	f000 fc05 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001704:	e030      	b.n	8001768 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <HAL_UART_MspInit+0x104>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d12b      	bne.n	8001768 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a16      	ldr	r2, [pc, #88]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 800171a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001734:	4a0f      	ldr	r2, [pc, #60]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6313      	str	r3, [r2, #48]	@ 0x30
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_UART_MspInit+0xfc>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001748:	230c      	movs	r3, #12
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001758:	2307      	movs	r3, #7
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <HAL_UART_MspInit+0x100>)
 8001764:	f000 fc80 	bl	8002068 <HAL_GPIO_Init>
}
 8001768:	bf00      	nop
 800176a:	3730      	adds	r7, #48	@ 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40011000 	.word	0x40011000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000
 800177c:	40004400 	.word	0x40004400

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001784:	f7ff ff12 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f003 ff9f 	bl	80056f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fbc1 	bl	8000f38 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017c4:	08006660 	.word	0x08006660
  ldr r2, =_sbss
 80017c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017cc:	2000042c 	.word	0x2000042c

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 fb5f 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fdb8 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fb77 	bl	8001f2a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 fb3f 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000008 	.word	0x20000008
 8001870:	20000010 	.word	0x20000010
 8001874:	2000000c 	.word	0x2000000c

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000010 	.word	0x20000010
 800189c:	200002dc 	.word	0x200002dc

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200002dc 	.word	0x200002dc

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000010 	.word	0x20000010

08001900 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0ed      	b.n	8001aee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff f962 	bl	8000be8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001934:	f7ff ffb4 	bl	80018a0 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193a:	e012      	b.n	8001962 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800193c:	f7ff ffb0 	bl	80018a0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d90b      	bls.n	8001962 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2205      	movs	r2, #5
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0c5      	b.n	8001aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0e5      	beq.n	800193c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0202 	bic.w	r2, r2, #2
 800197e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001980:	f7ff ff8e 	bl	80018a0 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001986:	e012      	b.n	80019ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001988:	f7ff ff8a 	bl	80018a0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b0a      	cmp	r3, #10
 8001994:	d90b      	bls.n	80019ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2205      	movs	r2, #5
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e09f      	b.n	8001aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1e5      	bne.n	8001988 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7e1b      	ldrb	r3, [r3, #24]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7e5b      	ldrb	r3, [r3, #25]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e007      	b.n	8001a10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7e9b      	ldrb	r3, [r3, #26]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0220 	orr.w	r2, r2, #32
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e007      	b.n	8001a3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0220 	bic.w	r2, r2, #32
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7edb      	ldrb	r3, [r3, #27]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0210 	bic.w	r2, r2, #16
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0210 	orr.w	r2, r2, #16
 8001a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7f1b      	ldrb	r3, [r3, #28]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0208 	orr.w	r2, r2, #8
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e007      	b.n	8001a8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0208 	bic.w	r2, r2, #8
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f5b      	ldrb	r3, [r3, #29]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d108      	bne.n	8001aa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0204 	orr.w	r2, r2, #4
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0204 	bic.w	r2, r2, #4
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	ea42 0103 	orr.w	r1, r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12e      	bne.n	8001b68 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b22:	f7ff febd 	bl	80018a0 <HAL_GetTick>
 8001b26:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b28:	e012      	b.n	8001b50 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b2a:	f7ff feb9 	bl	80018a0 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b0a      	cmp	r3, #10
 8001b36:	d90b      	bls.n	8001b50 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2205      	movs	r2, #5
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e012      	b.n	8001b76 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1e5      	bne.n	8001b2a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e006      	b.n	8001b76 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
  }
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b089      	sub	sp, #36	@ 0x24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b92:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d003      	beq.n	8001baa <HAL_CAN_AddTxMessage+0x2c>
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	f040 80ad 	bne.w	8001d04 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8095 	beq.w	8001cf4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	0e1b      	lsrs	r3, r3, #24
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10d      	bne.n	8001c02 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	6809      	ldr	r1, [r1, #0]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	440b      	add	r3, r1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e00f      	b.n	8001c22 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c0c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c16:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3318      	adds	r3, #24
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	440b      	add	r3, r1
 8001c20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3318      	adds	r3, #24
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	440b      	add	r3, r1
 8001c32:	3304      	adds	r3, #4
 8001c34:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	7d1b      	ldrb	r3, [r3, #20]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d111      	bne.n	8001c62 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3318      	adds	r3, #24
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	6811      	ldr	r1, [r2, #0]
 8001c52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3318      	adds	r3, #24
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3304      	adds	r3, #4
 8001c60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3307      	adds	r3, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	061a      	lsls	r2, r3, #24
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3306      	adds	r3, #6
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3305      	adds	r3, #5
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	3204      	adds	r2, #4
 8001c82:	7812      	ldrb	r2, [r2, #0]
 8001c84:	4610      	mov	r0, r2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	6811      	ldr	r1, [r2, #0]
 8001c8a:	ea43 0200 	orr.w	r2, r3, r0
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	440b      	add	r3, r1
 8001c94:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c98:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3303      	adds	r3, #3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	061a      	lsls	r2, r3, #24
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	4610      	mov	r0, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	6811      	ldr	r1, [r2, #0]
 8001cc0:	ea43 0200 	orr.w	r2, r3, r0
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3318      	adds	r3, #24
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3318      	adds	r3, #24
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	440b      	add	r3, r1
 8001cee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e00e      	b.n	8001d12 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e006      	b.n	8001d12 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	@ (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	@ (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	@ (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	@ 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff3e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff31 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff fca6 	bl	80018a0 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d008      	beq.n	8001f74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2280      	movs	r2, #128	@ 0x80
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e052      	b.n	800201a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0216 	bic.w	r2, r2, #22
 8001f82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <HAL_DMA_Abort+0x62>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0208 	bic.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc4:	e013      	b.n	8001fee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc6:	f7ff fc6b 	bl	80018a0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d90c      	bls.n	8001fee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e015      	b.n	800201a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e4      	bne.n	8001fc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	223f      	movs	r2, #63	@ 0x3f
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d004      	beq.n	8002040 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e00c      	b.n	800205a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2205      	movs	r2, #5
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	@ 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e165      	b.n	8002350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	f040 8154 	bne.w	800234a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d005      	beq.n	80020ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d130      	bne.n	800211c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b03      	cmp	r3, #3
 8002126:	d017      	beq.n	8002158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d123      	bne.n	80021ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80ae 	beq.w	800234a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002368 <HAL_GPIO_Init+0x300>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002368 <HAL_GPIO_Init+0x300>)
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002368 <HAL_GPIO_Init+0x300>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220a:	4a58      	ldr	r2, [pc, #352]	@ (800236c <HAL_GPIO_Init+0x304>)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4f      	ldr	r2, [pc, #316]	@ (8002370 <HAL_GPIO_Init+0x308>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d025      	beq.n	8002282 <HAL_GPIO_Init+0x21a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4e      	ldr	r2, [pc, #312]	@ (8002374 <HAL_GPIO_Init+0x30c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01f      	beq.n	800227e <HAL_GPIO_Init+0x216>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4d      	ldr	r2, [pc, #308]	@ (8002378 <HAL_GPIO_Init+0x310>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x212>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4c      	ldr	r2, [pc, #304]	@ (800237c <HAL_GPIO_Init+0x314>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x20e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	@ (8002380 <HAL_GPIO_Init+0x318>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x20a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4a      	ldr	r2, [pc, #296]	@ (8002384 <HAL_GPIO_Init+0x31c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x206>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a49      	ldr	r2, [pc, #292]	@ (8002388 <HAL_GPIO_Init+0x320>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x202>
 8002266:	2306      	movs	r3, #6
 8002268:	e00c      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800226a:	2307      	movs	r3, #7
 800226c:	e00a      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800226e:	2305      	movs	r3, #5
 8002270:	e008      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 8002272:	2304      	movs	r3, #4
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 8002276:	2303      	movs	r3, #3
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800227a:	2302      	movs	r3, #2
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 8002282:	2300      	movs	r3, #0
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f002 0203 	and.w	r2, r2, #3
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4093      	lsls	r3, r2
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002294:	4935      	ldr	r1, [pc, #212]	@ (800236c <HAL_GPIO_Init+0x304>)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b3a      	ldr	r3, [pc, #232]	@ (800238c <HAL_GPIO_Init+0x324>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a31      	ldr	r2, [pc, #196]	@ (800238c <HAL_GPIO_Init+0x324>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <HAL_GPIO_Init+0x324>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a26      	ldr	r2, [pc, #152]	@ (800238c <HAL_GPIO_Init+0x324>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022f6:	4b25      	ldr	r3, [pc, #148]	@ (800238c <HAL_GPIO_Init+0x324>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231a:	4a1c      	ldr	r2, [pc, #112]	@ (800238c <HAL_GPIO_Init+0x324>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_GPIO_Init+0x324>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002344:	4a11      	ldr	r2, [pc, #68]	@ (800238c <HAL_GPIO_Init+0x324>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	f67f ae96 	bls.w	8002084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3724      	adds	r7, #36	@ 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40013800 	.word	0x40013800
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40021400 	.word	0x40021400
 8002388:	40021800 	.word	0x40021800
 800238c:	40013c00 	.word	0x40013c00

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e12b      	b.n	800262e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fce0 	bl	8000db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2224      	movs	r2, #36	@ 0x24
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002428:	f001 f8b8 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 800242c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4a81      	ldr	r2, [pc, #516]	@ (8002638 <HAL_I2C_Init+0x274>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d807      	bhi.n	8002448 <HAL_I2C_Init+0x84>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a80      	ldr	r2, [pc, #512]	@ (800263c <HAL_I2C_Init+0x278>)
 800243c:	4293      	cmp	r3, r2
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e006      	b.n	8002456 <HAL_I2C_Init+0x92>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a7d      	ldr	r2, [pc, #500]	@ (8002640 <HAL_I2C_Init+0x27c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0e7      	b.n	800262e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a78      	ldr	r2, [pc, #480]	@ (8002644 <HAL_I2C_Init+0x280>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9b      	lsrs	r3, r3, #18
 8002468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a6a      	ldr	r2, [pc, #424]	@ (8002638 <HAL_I2C_Init+0x274>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d802      	bhi.n	8002498 <HAL_I2C_Init+0xd4>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3301      	adds	r3, #1
 8002496:	e009      	b.n	80024ac <HAL_I2C_Init+0xe8>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	4a69      	ldr	r2, [pc, #420]	@ (8002648 <HAL_I2C_Init+0x284>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	3301      	adds	r3, #1
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	495c      	ldr	r1, [pc, #368]	@ (8002638 <HAL_I2C_Init+0x274>)
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d819      	bhi.n	8002500 <HAL_I2C_Init+0x13c>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e59      	subs	r1, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024da:	1c59      	adds	r1, r3, #1
 80024dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024e0:	400b      	ands	r3, r1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_I2C_Init+0x138>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e59      	subs	r1, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fa:	e051      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e04f      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d111      	bne.n	800252c <HAL_I2C_Init+0x168>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e58      	subs	r0, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e012      	b.n	8002552 <HAL_I2C_Init+0x18e>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	0099      	lsls	r1, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Init+0x196>
 8002556:	2301      	movs	r3, #1
 8002558:	e022      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10e      	bne.n	8002580 <HAL_I2C_Init+0x1bc>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e58      	subs	r0, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	440b      	add	r3, r1
 8002570:	fbb0 f3f3 	udiv	r3, r0, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800257e:	e00f      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	0099      	lsls	r1, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	fbb0 f3f3 	udiv	r3, r0, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	6809      	ldr	r1, [r1, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6911      	ldr	r1, [r2, #16]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	000186a0 	.word	0x000186a0
 800263c:	001e847f 	.word	0x001e847f
 8002640:	003d08ff 	.word	0x003d08ff
 8002644:	431bde83 	.word	0x431bde83
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	460b      	mov	r3, r1
 800265a:	817b      	strh	r3, [r7, #10]
 800265c:	4613      	mov	r3, r2
 800265e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff f91e 	bl	80018a0 <HAL_GetTick>
 8002664:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	f040 80e0 	bne.w	8002834 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2319      	movs	r3, #25
 800267a:	2201      	movs	r2, #1
 800267c:	4970      	ldr	r1, [pc, #448]	@ (8002840 <HAL_I2C_Master_Transmit+0x1f4>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fc64 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	e0d3      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_I2C_Master_Transmit+0x50>
 8002698:	2302      	movs	r3, #2
 800269a:	e0cc      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d007      	beq.n	80026c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2221      	movs	r2, #33	@ 0x21
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2210      	movs	r2, #16
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	893a      	ldrh	r2, [r7, #8]
 80026f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a50      	ldr	r2, [pc, #320]	@ (8002844 <HAL_I2C_Master_Transmit+0x1f8>)
 8002702:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 face 	bl	8002cac <I2C_MasterRequestWrite>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e08d      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002730:	e066      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fd22 	bl	8003180 <I2C_WaitOnTXEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b04      	cmp	r3, #4
 8002748:	d107      	bne.n	800275a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d11b      	bne.n	80027d4 <HAL_I2C_Master_Transmit+0x188>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d017      	beq.n	80027d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	6a39      	ldr	r1, [r7, #32]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fd19 	bl	8003210 <I2C_WaitOnBTFFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d107      	bne.n	80027fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e01a      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	d194      	bne.n	8002732 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	00100002 	.word	0x00100002
 8002844:	ffff0000 	.word	0xffff0000

08002848 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	@ 0x30
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
 8002858:	4613      	mov	r3, r2
 800285a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff f820 	bl	80018a0 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 8217 	bne.w	8002c9e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2319      	movs	r3, #25
 8002876:	2201      	movs	r2, #1
 8002878:	497c      	ldr	r1, [pc, #496]	@ (8002a6c <HAL_I2C_Master_Receive+0x224>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fb66 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	e20a      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_I2C_Master_Receive+0x50>
 8002894:	2302      	movs	r3, #2
 8002896:	e203      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d007      	beq.n	80028be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2222      	movs	r2, #34	@ 0x22
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2210      	movs	r2, #16
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	893a      	ldrh	r2, [r7, #8]
 80028ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002a70 <HAL_I2C_Master_Receive+0x228>)
 80028fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002900:	8979      	ldrh	r1, [r7, #10]
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fa52 	bl	8002db0 <I2C_MasterRequestRead>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e1c4      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d113      	bne.n	8002946 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e198      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11b      	bne.n	8002986 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800295c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e178      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	2b02      	cmp	r3, #2
 800298c:	d11b      	bne.n	80029c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800299c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	e158      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029ec:	e144      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f200 80f1 	bhi.w	8002bda <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d123      	bne.n	8002a48 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fc4b 	bl	80032a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e145      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a46:	e117      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d14e      	bne.n	8002aee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	2200      	movs	r2, #0
 8002a58:	4906      	ldr	r1, [pc, #24]	@ (8002a74 <HAL_I2C_Master_Receive+0x22c>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa76 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e11a      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000
 8002a74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aec:	e0c4      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	2200      	movs	r2, #0
 8002af6:	496c      	ldr	r1, [pc, #432]	@ (8002ca8 <HAL_I2C_Master_Receive+0x460>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa27 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cb      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	2200      	movs	r2, #0
 8002b52:	4955      	ldr	r1, [pc, #340]	@ (8002ca8 <HAL_I2C_Master_Receive+0x460>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f9f9 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e09d      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bd8:	e04e      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fb5e 	bl	80032a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e058      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d124      	bne.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d107      	bne.n	8002c46 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c44:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f aeb6 	bne.w	80029ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3728      	adds	r7, #40	@ 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	00010004 	.word	0x00010004

08002cac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d006      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d003      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cd4:	d108      	bne.n	8002ce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00b      	b.n	8002d00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d107      	bne.n	8002d00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f91d 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d26:	d103      	bne.n	8002d30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e035      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	e01b      	b.n	8002d88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d50:	897b      	ldrh	r3, [r7, #10]
 8002d52:	11db      	asrs	r3, r3, #7
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 0306 	and.w	r3, r3, #6
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f063 030f 	orn	r3, r3, #15
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	490e      	ldr	r1, [pc, #56]	@ (8002da8 <I2C_MasterRequestWrite+0xfc>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f966 	bl	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e010      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4907      	ldr	r1, [pc, #28]	@ (8002dac <I2C_MasterRequestWrite+0x100>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f956 	bl	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00010008 	.word	0x00010008
 8002dac:	00010002 	.word	0x00010002

08002db0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d006      	beq.n	8002dea <I2C_MasterRequestRead+0x3a>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d003      	beq.n	8002dea <I2C_MasterRequestRead+0x3a>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002de8:	d108      	bne.n	8002dfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00b      	b.n	8002e14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	2b11      	cmp	r3, #17
 8002e02:	d107      	bne.n	8002e14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f893 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3a:	d103      	bne.n	8002e44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e079      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e50:	d108      	bne.n	8002e64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e52:	897b      	ldrh	r3, [r7, #10]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e05f      	b.n	8002f24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	11db      	asrs	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f063 030f 	orn	r3, r3, #15
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4930      	ldr	r1, [pc, #192]	@ (8002f44 <I2C_MasterRequestRead+0x194>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8dc 	bl	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e054      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4929      	ldr	r1, [pc, #164]	@ (8002f48 <I2C_MasterRequestRead+0x198>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8cc 	bl	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e044      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f831 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002efe:	d103      	bne.n	8002f08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e017      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	11db      	asrs	r3, r3, #7
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f003 0306 	and.w	r3, r3, #6
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f063 030e 	orn	r3, r3, #14
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <I2C_MasterRequestRead+0x198>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f888 	bl	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	00010008 	.word	0x00010008
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5c:	e048      	b.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d044      	beq.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fe fc9b 	bl	80018a0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d139      	bne.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10d      	bne.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	e00c      	b.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d116      	bne.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e023      	b.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10d      	bne.n	8003016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	e00c      	b.n	8003030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	43da      	mvns	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	429a      	cmp	r2, r3
 8003034:	d093      	beq.n	8002f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304e:	e071      	b.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305e:	d123      	bne.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e067      	b.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d041      	beq.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fe fbf6 	bl	80018a0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d136      	bne.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10c      	bne.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e00b      	b.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e021      	b.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10c      	bne.n	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e00b      	b.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4013      	ands	r3, r2
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f47f af6d 	bne.w	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800318c:	e034      	b.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f8e3 	bl	800335a <I2C_IsAcknowledgeFailed>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e034      	b.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d028      	beq.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe fb7b 	bl	80018a0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11d      	bne.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c6:	2b80      	cmp	r3, #128	@ 0x80
 80031c8:	d016      	beq.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003202:	2b80      	cmp	r3, #128	@ 0x80
 8003204:	d1c3      	bne.n	800318e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800321c:	e034      	b.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f89b 	bl	800335a <I2C_IsAcknowledgeFailed>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e034      	b.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d028      	beq.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fb33 	bl	80018a0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11d      	bne.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d016      	beq.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e007      	b.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d1c3      	bne.n	800321e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ac:	e049      	b.n	8003342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d119      	bne.n	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0210 	mvn.w	r2, #16
 80032c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e030      	b.n	8003352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7fe fad6 	bl	80018a0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d11d      	bne.n	8003342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d016      	beq.n	8003342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f043 0220 	orr.w	r2, r3, #32
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e007      	b.n	8003352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334c:	2b40      	cmp	r3, #64	@ 0x40
 800334e:	d1ae      	bne.n	80032ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003370:	d11b      	bne.n	80033aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800337a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0cc      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b68      	ldr	r3, [pc, #416]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d90c      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b65      	ldr	r3, [pc, #404]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b63      	ldr	r3, [pc, #396]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b8      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800340c:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a58      	ldr	r2, [pc, #352]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003416:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003424:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a52      	ldr	r2, [pc, #328]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800342e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b50      	ldr	r3, [pc, #320]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	494d      	ldr	r1, [pc, #308]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d044      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d119      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d003      	beq.n	8003476 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003472:	2b03      	cmp	r3, #3
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b3f      	ldr	r3, [pc, #252]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e067      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	4b37      	ldr	r3, [pc, #220]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4934      	ldr	r1, [pc, #208]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fe f9fa 	bl	80018a0 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fe f9f6 	bl	80018a0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e04f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 020c 	and.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1eb      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d8:	4b25      	ldr	r3, [pc, #148]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d20c      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e032      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4916      	ldr	r1, [pc, #88]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	490e      	ldr	r1, [pc, #56]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353e:	f000 f855 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	490a      	ldr	r1, [pc, #40]	@ (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	4a09      	ldr	r2, [pc, #36]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe f95a 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023c00 	.word	0x40023c00
 8003574:	40023800 	.word	0x40023800
 8003578:	08006604 	.word	0x08006604
 800357c:	20000008 	.word	0x20000008
 8003580:	2000000c 	.word	0x2000000c

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_RCC_GetHCLKFreq+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000008 	.word	0x20000008

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff0 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0a9b      	lsrs	r3, r3, #10
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	08006614 	.word	0x08006614

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffdc 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0b5b      	lsrs	r3, r3, #13
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08006614 	.word	0x08006614

080035ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f0:	b0ae      	sub	sp, #184	@ 0xb8
 80035f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003612:	4bcb      	ldr	r3, [pc, #812]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b0c      	cmp	r3, #12
 800361c:	f200 8206 	bhi.w	8003a2c <HAL_RCC_GetSysClockFreq+0x440>
 8003620:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	0800365d 	.word	0x0800365d
 800362c:	08003a2d 	.word	0x08003a2d
 8003630:	08003a2d 	.word	0x08003a2d
 8003634:	08003a2d 	.word	0x08003a2d
 8003638:	08003665 	.word	0x08003665
 800363c:	08003a2d 	.word	0x08003a2d
 8003640:	08003a2d 	.word	0x08003a2d
 8003644:	08003a2d 	.word	0x08003a2d
 8003648:	0800366d 	.word	0x0800366d
 800364c:	08003a2d 	.word	0x08003a2d
 8003650:	08003a2d 	.word	0x08003a2d
 8003654:	08003a2d 	.word	0x08003a2d
 8003658:	0800385d 	.word	0x0800385d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4bb9      	ldr	r3, [pc, #740]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x358>)
 800365e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003662:	e1e7      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003664:	4bb8      	ldr	r3, [pc, #736]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800366a:	e1e3      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800366c:	4bb4      	ldr	r3, [pc, #720]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003674:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003678:	4bb1      	ldr	r3, [pc, #708]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d071      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003684:	4bae      	ldr	r3, [pc, #696]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003690:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003694:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036aa:	4622      	mov	r2, r4
 80036ac:	462b      	mov	r3, r5
 80036ae:	f04f 0000 	mov.w	r0, #0
 80036b2:	f04f 0100 	mov.w	r1, #0
 80036b6:	0159      	lsls	r1, r3, #5
 80036b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036bc:	0150      	lsls	r0, r2, #5
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4621      	mov	r1, r4
 80036c4:	1a51      	subs	r1, r2, r1
 80036c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80036c8:	4629      	mov	r1, r5
 80036ca:	eb63 0301 	sbc.w	r3, r3, r1
 80036ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80036dc:	4649      	mov	r1, r9
 80036de:	018b      	lsls	r3, r1, #6
 80036e0:	4641      	mov	r1, r8
 80036e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036e6:	4641      	mov	r1, r8
 80036e8:	018a      	lsls	r2, r1, #6
 80036ea:	4641      	mov	r1, r8
 80036ec:	1a51      	subs	r1, r2, r1
 80036ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036f0:	4649      	mov	r1, r9
 80036f2:	eb63 0301 	sbc.w	r3, r3, r1
 80036f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003704:	4649      	mov	r1, r9
 8003706:	00cb      	lsls	r3, r1, #3
 8003708:	4641      	mov	r1, r8
 800370a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370e:	4641      	mov	r1, r8
 8003710:	00ca      	lsls	r2, r1, #3
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	4603      	mov	r3, r0
 8003718:	4622      	mov	r2, r4
 800371a:	189b      	adds	r3, r3, r2
 800371c:	633b      	str	r3, [r7, #48]	@ 0x30
 800371e:	462b      	mov	r3, r5
 8003720:	460a      	mov	r2, r1
 8003722:	eb42 0303 	adc.w	r3, r2, r3
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003734:	4629      	mov	r1, r5
 8003736:	024b      	lsls	r3, r1, #9
 8003738:	4621      	mov	r1, r4
 800373a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800373e:	4621      	mov	r1, r4
 8003740:	024a      	lsls	r2, r1, #9
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003750:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003754:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003758:	f7fc fdb2 	bl	80002c0 <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4613      	mov	r3, r2
 8003762:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003766:	e067      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003768:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003774:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003778:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800377c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003782:	2300      	movs	r3, #0
 8003784:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003786:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	f04f 0000 	mov.w	r0, #0
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	0159      	lsls	r1, r3, #5
 8003798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379c:	0150      	lsls	r0, r2, #5
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4621      	mov	r1, r4
 80037a4:	1a51      	subs	r1, r2, r1
 80037a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037a8:	4629      	mov	r1, r5
 80037aa:	eb63 0301 	sbc.w	r3, r3, r1
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80037bc:	4649      	mov	r1, r9
 80037be:	018b      	lsls	r3, r1, #6
 80037c0:	4641      	mov	r1, r8
 80037c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037c6:	4641      	mov	r1, r8
 80037c8:	018a      	lsls	r2, r1, #6
 80037ca:	4641      	mov	r1, r8
 80037cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80037d0:	4649      	mov	r1, r9
 80037d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ea:	4692      	mov	sl, r2
 80037ec:	469b      	mov	fp, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	eb1a 0303 	adds.w	r3, sl, r3
 80037f4:	623b      	str	r3, [r7, #32]
 80037f6:	462b      	mov	r3, r5
 80037f8:	eb4b 0303 	adc.w	r3, fp, r3
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800380a:	4629      	mov	r1, r5
 800380c:	028b      	lsls	r3, r1, #10
 800380e:	4621      	mov	r1, r4
 8003810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003814:	4621      	mov	r1, r4
 8003816:	028a      	lsls	r2, r1, #10
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003820:	2200      	movs	r2, #0
 8003822:	673b      	str	r3, [r7, #112]	@ 0x70
 8003824:	677a      	str	r2, [r7, #116]	@ 0x74
 8003826:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800382a:	f7fc fd49 	bl	80002c0 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4613      	mov	r3, r2
 8003834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003838:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800384a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800384e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800385a:	e0eb      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800385c:	4b38      	ldr	r3, [pc, #224]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003868:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d06b      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003874:	4b32      	ldr	r3, [pc, #200]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x354>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	2200      	movs	r2, #0
 800387c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800387e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003886:	663b      	str	r3, [r7, #96]	@ 0x60
 8003888:	2300      	movs	r3, #0
 800388a:	667b      	str	r3, [r7, #100]	@ 0x64
 800388c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003890:	4622      	mov	r2, r4
 8003892:	462b      	mov	r3, r5
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a2:	0150      	lsls	r0, r2, #5
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4621      	mov	r1, r4
 80038aa:	1a51      	subs	r1, r2, r1
 80038ac:	61b9      	str	r1, [r7, #24]
 80038ae:	4629      	mov	r1, r5
 80038b0:	eb63 0301 	sbc.w	r3, r3, r1
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80038c2:	4659      	mov	r1, fp
 80038c4:	018b      	lsls	r3, r1, #6
 80038c6:	4651      	mov	r1, sl
 80038c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038cc:	4651      	mov	r1, sl
 80038ce:	018a      	lsls	r2, r1, #6
 80038d0:	4651      	mov	r1, sl
 80038d2:	ebb2 0801 	subs.w	r8, r2, r1
 80038d6:	4659      	mov	r1, fp
 80038d8:	eb63 0901 	sbc.w	r9, r3, r1
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038f0:	4690      	mov	r8, r2
 80038f2:	4699      	mov	r9, r3
 80038f4:	4623      	mov	r3, r4
 80038f6:	eb18 0303 	adds.w	r3, r8, r3
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	462b      	mov	r3, r5
 80038fe:	eb49 0303 	adc.w	r3, r9, r3
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003910:	4629      	mov	r1, r5
 8003912:	024b      	lsls	r3, r1, #9
 8003914:	4621      	mov	r1, r4
 8003916:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800391a:	4621      	mov	r1, r4
 800391c:	024a      	lsls	r2, r1, #9
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003926:	2200      	movs	r2, #0
 8003928:	65bb      	str	r3, [r7, #88]	@ 0x58
 800392a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800392c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003930:	f7fc fcc6 	bl	80002c0 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800393e:	e065      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x420>
 8003940:	40023800 	.word	0x40023800
 8003944:	00f42400 	.word	0x00f42400
 8003948:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x458>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	2200      	movs	r2, #0
 8003954:	4618      	mov	r0, r3
 8003956:	4611      	mov	r1, r2
 8003958:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800395c:	653b      	str	r3, [r7, #80]	@ 0x50
 800395e:	2300      	movs	r3, #0
 8003960:	657b      	str	r3, [r7, #84]	@ 0x54
 8003962:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003966:	4642      	mov	r2, r8
 8003968:	464b      	mov	r3, r9
 800396a:	f04f 0000 	mov.w	r0, #0
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	0159      	lsls	r1, r3, #5
 8003974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003978:	0150      	lsls	r0, r2, #5
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4641      	mov	r1, r8
 8003980:	1a51      	subs	r1, r2, r1
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	4649      	mov	r1, r9
 8003986:	eb63 0301 	sbc.w	r3, r3, r1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003998:	4659      	mov	r1, fp
 800399a:	018b      	lsls	r3, r1, #6
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a2:	4651      	mov	r1, sl
 80039a4:	018a      	lsls	r2, r1, #6
 80039a6:	4651      	mov	r1, sl
 80039a8:	1a54      	subs	r4, r2, r1
 80039aa:	4659      	mov	r1, fp
 80039ac:	eb63 0501 	sbc.w	r5, r3, r1
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	00eb      	lsls	r3, r5, #3
 80039ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039be:	00e2      	lsls	r2, r4, #3
 80039c0:	4614      	mov	r4, r2
 80039c2:	461d      	mov	r5, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	18e3      	adds	r3, r4, r3
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	464b      	mov	r3, r9
 80039cc:	eb45 0303 	adc.w	r3, r5, r3
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039de:	4629      	mov	r1, r5
 80039e0:	028b      	lsls	r3, r1, #10
 80039e2:	4621      	mov	r1, r4
 80039e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e8:	4621      	mov	r1, r4
 80039ea:	028a      	lsls	r2, r1, #10
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039f4:	2200      	movs	r2, #0
 80039f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039fe:	f7fc fc5f 	bl	80002c0 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4613      	mov	r3, r2
 8003a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0f1b      	lsrs	r3, r3, #28
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a2a:	e003      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	37b8      	adds	r7, #184	@ 0xb8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	00f42400 	.word	0x00f42400

08003a4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e28d      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8083 	beq.w	8003b72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a6c:	4b94      	ldr	r3, [pc, #592]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d019      	beq.n	8003aac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a78:	4b91      	ldr	r3, [pc, #580]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a84:	4b8e      	ldr	r3, [pc, #568]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a90:	d00c      	beq.n	8003aac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a92:	4b8b      	ldr	r3, [pc, #556]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d112      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b88      	ldr	r3, [pc, #544]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4b84      	ldr	r3, [pc, #528]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x124>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d157      	bne.n	8003b70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e25a      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x90>
 8003ace:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7b      	ldr	r2, [pc, #492]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01d      	b.n	8003b18 <HAL_RCC_OscConfig+0xcc>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0xb4>
 8003ae6:	4b76      	ldr	r3, [pc, #472]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a75      	ldr	r2, [pc, #468]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b73      	ldr	r3, [pc, #460]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a72      	ldr	r2, [pc, #456]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0xcc>
 8003b00:	4b6f      	ldr	r3, [pc, #444]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a6e      	ldr	r2, [pc, #440]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6b      	ldr	r2, [pc, #428]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd febe 	bl	80018a0 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fd feba 	bl	80018a0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	@ 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e21f      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b61      	ldr	r3, [pc, #388]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0xdc>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fd feaa 	bl	80018a0 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fd fea6 	bl	80018a0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	@ 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e20b      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	4b57      	ldr	r3, [pc, #348]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x104>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d06f      	beq.n	8003c5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b7e:	4b50      	ldr	r3, [pc, #320]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d017      	beq.n	8003bba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b96:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b47      	ldr	r3, [pc, #284]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d11c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b44      	ldr	r3, [pc, #272]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	4b41      	ldr	r3, [pc, #260]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x186>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e1d3      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4937      	ldr	r1, [pc, #220]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	e03a      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf0:	4b34      	ldr	r3, [pc, #208]	@ (8003cc4 <HAL_RCC_OscConfig+0x278>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fd fe53 	bl	80018a0 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7fd fe4f 	bl	80018a0 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e1b4      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b28      	ldr	r3, [pc, #160]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4925      	ldr	r1, [pc, #148]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c32:	4b24      	ldr	r3, [pc, #144]	@ (8003cc4 <HAL_RCC_OscConfig+0x278>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fe32 	bl	80018a0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fd fe2e 	bl	80018a0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e193      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d036      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4b15      	ldr	r3, [pc, #84]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd fe12 	bl	80018a0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fd fe0e 	bl	80018a0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e173      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x234>
 8003c9e:	e01b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca0:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fdfb 	bl	80018a0 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cac:	e00e      	b.n	8003ccc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cae:	f7fd fdf7 	bl	80018a0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d907      	bls.n	8003ccc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e15c      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	42470000 	.word	0x42470000
 8003cc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ea      	bne.n	8003cae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8097 	beq.w	8003e14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b83      	ldr	r3, [pc, #524]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d06:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b79      	ldr	r3, [pc, #484]	@ (8003efc <HAL_RCC_OscConfig+0x4b0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d118      	bne.n	8003d54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d22:	4b76      	ldr	r3, [pc, #472]	@ (8003efc <HAL_RCC_OscConfig+0x4b0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a75      	ldr	r2, [pc, #468]	@ (8003efc <HAL_RCC_OscConfig+0x4b0>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fdb7 	bl	80018a0 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fd fdb3 	bl	80018a0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e118      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b6c      	ldr	r3, [pc, #432]	@ (8003efc <HAL_RCC_OscConfig+0x4b0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x31e>
 8003d5c:	4b66      	ldr	r3, [pc, #408]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d60:	4a65      	ldr	r2, [pc, #404]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d68:	e01c      	b.n	8003da4 <HAL_RCC_OscConfig+0x358>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x340>
 8003d72:	4b61      	ldr	r3, [pc, #388]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	4a60      	ldr	r2, [pc, #384]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0x358>
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d90:	4a59      	ldr	r2, [pc, #356]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d98:	4b57      	ldr	r3, [pc, #348]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	4a56      	ldr	r2, [pc, #344]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd fd78 	bl	80018a0 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fd fd74 	bl	80018a0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0d7      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <HAL_RCC_OscConfig+0x368>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fd fd62 	bl	80018a0 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fd fd5e 	bl	80018a0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0c1      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df6:	4b40      	ldr	r3, [pc, #256]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ee      	bne.n	8003de0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80ad 	beq.w	8003f78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e1e:	4b36      	ldr	r3, [pc, #216]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d060      	beq.n	8003eec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d145      	bne.n	8003ebe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b33      	ldr	r3, [pc, #204]	@ (8003f00 <HAL_RCC_OscConfig+0x4b4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fd32 	bl	80018a0 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd fd2e 	bl	80018a0 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e093      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	4b29      	ldr	r3, [pc, #164]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	019b      	lsls	r3, r3, #6
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	3b01      	subs	r3, #1
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	071b      	lsls	r3, r3, #28
 8003e8a:	491b      	ldr	r1, [pc, #108]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <HAL_RCC_OscConfig+0x4b4>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fd fd03 	bl	80018a0 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fd fcff 	bl	80018a0 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e064      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x452>
 8003ebc:	e05c      	b.n	8003f78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <HAL_RCC_OscConfig+0x4b4>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fcec 	bl	80018a0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fd fce8 	bl	80018a0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e04d      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x480>
 8003eea:	e045      	b.n	8003f78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e040      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40007000 	.word	0x40007000
 8003f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f04:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <HAL_RCC_OscConfig+0x538>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d030      	beq.n	8003f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d129      	bne.n	8003f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d122      	bne.n	8003f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d119      	bne.n	8003f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d10f      	bne.n	8003f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e042      	b.n	8004020 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fb62 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	@ 0x24
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fdbd 	bl	8004b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	d175      	bne.n	8004134 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_UART_Transmit+0x2c>
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e06e      	b.n	8004136 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2221      	movs	r2, #33	@ 0x21
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004066:	f7fd fc1b 	bl	80018a0 <HAL_GetTick>
 800406a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d108      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e003      	b.n	800409c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800409c:	e02e      	b.n	80040fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fb1f 	bl	80046ec <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e03a      	b.n	8004136 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	3302      	adds	r3, #2
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	e007      	b.n	80040ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1cb      	bne.n	800409e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2140      	movs	r1, #64	@ 0x40
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 faeb 	bl	80046ec <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e006      	b.n	8004136 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	d112      	bne.n	800417e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_UART_Receive_IT+0x26>
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e00b      	b.n	8004180 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	461a      	mov	r2, r3
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fb12 	bl	800479e <UART_Start_Receive_IT>
 800417a:	4603      	mov	r3, r0
 800417c:	e000      	b.n	8004180 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0ba      	sub	sp, #232	@ 0xe8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_UART_IRQHandler+0x66>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fbf2 	bl	80049d0 <UART_Receive_IT>
      return;
 80041ec:	e25b      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80de 	beq.w	80043b4 <HAL_UART_IRQHandler+0x22c>
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004208:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80d1 	beq.w	80043b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_UART_IRQHandler+0xae>
 800421e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_UART_IRQHandler+0xd2>
 8004242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	f043 0202 	orr.w	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_UART_IRQHandler+0xf6>
 8004266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d011      	beq.n	80042ae <HAL_UART_IRQHandler+0x126>
 800428a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d105      	bne.n	80042a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f043 0208 	orr.w	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 81f2 	beq.w	800469c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_UART_IRQHandler+0x14e>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fb7d 	bl	80049d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_UART_IRQHandler+0x17a>
 80042fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04f      	beq.n	80043a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa85 	bl	8004812 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004312:	2b40      	cmp	r3, #64	@ 0x40
 8004314:	d141      	bne.n	800439a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800432c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004342:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004346:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800434e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800435a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1d9      	bne.n	8004316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d013      	beq.n	8004392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436e:	4a7e      	ldr	r2, [pc, #504]	@ (8004568 <HAL_UART_IRQHandler+0x3e0>)
 8004370:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fe53 	bl	8002022 <HAL_DMA_Abort_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800438c:	4610      	mov	r0, r2
 800438e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e00e      	b.n	80043b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f994 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e00a      	b.n	80043b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f990 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e006      	b.n	80043b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f98c 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043ae:	e175      	b.n	800469c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	bf00      	nop
    return;
 80043b2:	e173      	b.n	800469c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	f040 814f 	bne.w	800465c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8148 	beq.w	800465c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8141 	beq.w	800465c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fa:	2b40      	cmp	r3, #64	@ 0x40
 80043fc:	f040 80b6 	bne.w	800456c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800440c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8145 	beq.w	80046a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800441e:	429a      	cmp	r2, r3
 8004420:	f080 813e 	bcs.w	80046a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800442a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004436:	f000 8088 	beq.w	800454a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004472:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800447e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1d9      	bne.n	800443a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e1      	bne.n	8004486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e3      	bne.n	80044c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800452c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800452e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004532:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800453a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e3      	bne.n	8004508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fcfc 	bl	8001f42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004558:	b29b      	uxth	r3, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	b29b      	uxth	r3, r3
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8b7 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004566:	e09b      	b.n	80046a0 <HAL_UART_IRQHandler+0x518>
 8004568:	080048d9 	.word	0x080048d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 808e 	beq.w	80046a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8089 	beq.w	80046a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80045b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e3      	bne.n	8004592 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3314      	adds	r3, #20
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	623b      	str	r3, [r7, #32]
   return(result);
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80045f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e3      	bne.n	80045ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004634:	61fa      	str	r2, [r7, #28]
 8004636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	617b      	str	r3, [r7, #20]
   return(result);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e3      	bne.n	8004610 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800464e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f83d 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800465a:	e023      	b.n	80046a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <HAL_UART_IRQHandler+0x4f4>
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f943 	bl	8004900 <UART_Transmit_IT>
    return;
 800467a:	e014      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00e      	beq.n	80046a6 <HAL_UART_IRQHandler+0x51e>
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f983 	bl	80049a0 <UART_EndTransmit_IT>
    return;
 800469a:	e004      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046a4:	bf00      	nop
  }
}
 80046a6:	37e8      	adds	r7, #232	@ 0xe8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	e03b      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d037      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fd f8cb 	bl	80018a0 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	6a3a      	ldr	r2, [r7, #32]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <UART_WaitOnFlagUntilTimeout+0x30>
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e03a      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d023      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x8a>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b80      	cmp	r3, #128	@ 0x80
 8004732:	d020      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b40      	cmp	r3, #64	@ 0x40
 8004738:	d01d      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d116      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f857 	bl	8004812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2208      	movs	r2, #8
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e00f      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	429a      	cmp	r2, r3
 8004792:	d0b4      	beq.n	80046fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	4613      	mov	r3, r2
 80047aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	88fa      	ldrh	r2, [r7, #6]
 80047b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2222      	movs	r2, #34	@ 0x22
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0220 	orr.w	r2, r2, #32
 8004802:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004812:	b480      	push	{r7}
 8004814:	b095      	sub	sp, #84	@ 0x54
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800483a:	643a      	str	r2, [r7, #64]	@ 0x40
 800483c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	61fb      	str	r3, [r7, #28]
   return(result);
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800486e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	2b01      	cmp	r3, #1
 8004888:	d119      	bne.n	80048be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	60bb      	str	r3, [r7, #8]
   return(result);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f023 0310 	bic.w	r3, r3, #16
 80048a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048aa:	61ba      	str	r2, [r7, #24]
 80048ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6979      	ldr	r1, [r7, #20]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	613b      	str	r3, [r7, #16]
   return(result);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048cc:	bf00      	nop
 80048ce:	3754      	adds	r7, #84	@ 0x54
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff fee4 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b21      	cmp	r3, #33	@ 0x21
 8004912:	d13e      	bne.n	8004992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800491c:	d114      	bne.n	8004948 <UART_Transmit_IT+0x48>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d110      	bne.n	8004948 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800493a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]
 8004946:	e008      	b.n	800495a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	1c59      	adds	r1, r3, #1
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6211      	str	r1, [r2, #32]
 8004952:	781a      	ldrb	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29b      	uxth	r3, r3
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4619      	mov	r1, r3
 8004968:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10f      	bne.n	800498e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800497c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800498c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fe73 	bl	80046ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	@ 0x30
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b22      	cmp	r3, #34	@ 0x22
 80049e2:	f040 80ae 	bne.w	8004b42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ee:	d117      	bne.n	8004a20 <UART_Receive_IT+0x50>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d113      	bne.n	8004a20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a18:	1c9a      	adds	r2, r3, #2
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a1e:	e026      	b.n	8004a6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a32:	d007      	beq.n	8004a44 <UART_Receive_IT+0x74>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <UART_Receive_IT+0x82>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e008      	b.n	8004a64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d15d      	bne.n	8004b3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0220 	bic.w	r2, r2, #32
 8004a90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d135      	bne.n	8004b34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f023 0310 	bic.w	r3, r3, #16
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aee:	623a      	str	r2, [r7, #32]
 8004af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	69f9      	ldr	r1, [r7, #28]
 8004af4:	6a3a      	ldr	r2, [r7, #32]
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e5      	bne.n	8004ace <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d10a      	bne.n	8004b26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fdd1 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
 8004b32:	e002      	b.n	8004b3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc fba3 	bl	8001280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e002      	b.n	8004b44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3730      	adds	r7, #48	@ 0x30
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b50:	b0c0      	sub	sp, #256	@ 0x100
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	68d9      	ldr	r1, [r3, #12]
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	ea40 0301 	orr.w	r3, r0, r1
 8004b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ba4:	f021 010c 	bic.w	r1, r1, #12
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc6:	6999      	ldr	r1, [r3, #24]
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	ea40 0301 	orr.w	r3, r0, r1
 8004bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b8f      	ldr	r3, [pc, #572]	@ (8004e18 <UART_SetConfig+0x2cc>)
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d005      	beq.n	8004bec <UART_SetConfig+0xa0>
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b8d      	ldr	r3, [pc, #564]	@ (8004e1c <UART_SetConfig+0x2d0>)
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d104      	bne.n	8004bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bec:	f7fe fcea 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bf4:	e003      	b.n	8004bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bf6:	f7fe fcd1 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 8004bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c08:	f040 810c 	bne.w	8004e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c1e:	4622      	mov	r2, r4
 8004c20:	462b      	mov	r3, r5
 8004c22:	1891      	adds	r1, r2, r2
 8004c24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c26:	415b      	adcs	r3, r3
 8004c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c2e:	4621      	mov	r1, r4
 8004c30:	eb12 0801 	adds.w	r8, r2, r1
 8004c34:	4629      	mov	r1, r5
 8004c36:	eb43 0901 	adc.w	r9, r3, r1
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4e:	4690      	mov	r8, r2
 8004c50:	4699      	mov	r9, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	eb18 0303 	adds.w	r3, r8, r3
 8004c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	eb49 0303 	adc.w	r3, r9, r3
 8004c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	18db      	adds	r3, r3, r3
 8004c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c80:	4613      	mov	r3, r2
 8004c82:	eb42 0303 	adc.w	r3, r2, r3
 8004c86:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c90:	f7fb fb16 	bl	80002c0 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4b61      	ldr	r3, [pc, #388]	@ (8004e20 <UART_SetConfig+0x2d4>)
 8004c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	011c      	lsls	r4, r3, #4
 8004ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	1891      	adds	r1, r2, r2
 8004cba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cbc:	415b      	adcs	r3, r3
 8004cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8004cca:	4649      	mov	r1, r9
 8004ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce4:	4692      	mov	sl, r2
 8004ce6:	469b      	mov	fp, r3
 8004ce8:	4643      	mov	r3, r8
 8004cea:	eb1a 0303 	adds.w	r3, sl, r3
 8004cee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d10:	460b      	mov	r3, r1
 8004d12:	18db      	adds	r3, r3, r3
 8004d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d16:	4613      	mov	r3, r2
 8004d18:	eb42 0303 	adc.w	r3, r2, r3
 8004d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d26:	f7fb facb 	bl	80002c0 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4b3b      	ldr	r3, [pc, #236]	@ (8004e20 <UART_SetConfig+0x2d4>)
 8004d32:	fba3 2301 	umull	r2, r3, r3, r1
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	2264      	movs	r2, #100	@ 0x64
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	1acb      	subs	r3, r1, r3
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d46:	4b36      	ldr	r3, [pc, #216]	@ (8004e20 <UART_SetConfig+0x2d4>)
 8004d48:	fba3 2302 	umull	r2, r3, r3, r2
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d54:	441c      	add	r4, r3
 8004d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	1891      	adds	r1, r2, r2
 8004d6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d70:	415b      	adcs	r3, r3
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d78:	4641      	mov	r1, r8
 8004d7a:	1851      	adds	r1, r2, r1
 8004d7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d7e:	4649      	mov	r1, r9
 8004d80:	414b      	adcs	r3, r1
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d90:	4659      	mov	r1, fp
 8004d92:	00cb      	lsls	r3, r1, #3
 8004d94:	4651      	mov	r1, sl
 8004d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	00ca      	lsls	r2, r1, #3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	4642      	mov	r2, r8
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dac:	464b      	mov	r3, r9
 8004dae:	460a      	mov	r2, r1
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dcc:	460b      	mov	r3, r1
 8004dce:	18db      	adds	r3, r3, r3
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004de2:	f7fb fa6d 	bl	80002c0 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <UART_SetConfig+0x2d4>)
 8004dec:	fba3 1302 	umull	r1, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	2164      	movs	r1, #100	@ 0x64
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	3332      	adds	r3, #50	@ 0x32
 8004dfe:	4a08      	ldr	r2, [pc, #32]	@ (8004e20 <UART_SetConfig+0x2d4>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	f003 0207 	and.w	r2, r3, #7
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4422      	add	r2, r4
 8004e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e14:	e106      	b.n	8005024 <UART_SetConfig+0x4d8>
 8004e16:	bf00      	nop
 8004e18:	40011000 	.word	0x40011000
 8004e1c:	40011400 	.word	0x40011400
 8004e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e36:	4642      	mov	r2, r8
 8004e38:	464b      	mov	r3, r9
 8004e3a:	1891      	adds	r1, r2, r2
 8004e3c:	6239      	str	r1, [r7, #32]
 8004e3e:	415b      	adcs	r3, r3
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e46:	4641      	mov	r1, r8
 8004e48:	1854      	adds	r4, r2, r1
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	eb43 0501 	adc.w	r5, r3, r1
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	00eb      	lsls	r3, r5, #3
 8004e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5e:	00e2      	lsls	r2, r4, #3
 8004e60:	4614      	mov	r4, r2
 8004e62:	461d      	mov	r5, r3
 8004e64:	4643      	mov	r3, r8
 8004e66:	18e3      	adds	r3, r4, r3
 8004e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	eb45 0303 	adc.w	r3, r5, r3
 8004e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e92:	4629      	mov	r1, r5
 8004e94:	008b      	lsls	r3, r1, #2
 8004e96:	4621      	mov	r1, r4
 8004e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	008a      	lsls	r2, r1, #2
 8004ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ea4:	f7fb fa0c 	bl	80002c0 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4b60      	ldr	r3, [pc, #384]	@ (8005030 <UART_SetConfig+0x4e4>)
 8004eae:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	011c      	lsls	r4, r3, #4
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ec0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	61b9      	str	r1, [r7, #24]
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed8:	4641      	mov	r1, r8
 8004eda:	1851      	adds	r1, r2, r1
 8004edc:	6139      	str	r1, [r7, #16]
 8004ede:	4649      	mov	r1, r9
 8004ee0:	414b      	adcs	r3, r1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	00cb      	lsls	r3, r1, #3
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efa:	4651      	mov	r1, sl
 8004efc:	00ca      	lsls	r2, r1, #3
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	4642      	mov	r2, r8
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	460a      	mov	r2, r1
 8004f10:	eb42 0303 	adc.w	r3, r2, r3
 8004f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f30:	4649      	mov	r1, r9
 8004f32:	008b      	lsls	r3, r1, #2
 8004f34:	4641      	mov	r1, r8
 8004f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	008a      	lsls	r2, r1, #2
 8004f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f42:	f7fb f9bd 	bl	80002c0 <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4b38      	ldr	r3, [pc, #224]	@ (8005030 <UART_SetConfig+0x4e4>)
 8004f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2264      	movs	r2, #100	@ 0x64
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	1acb      	subs	r3, r1, r3
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	3332      	adds	r3, #50	@ 0x32
 8004f60:	4a33      	ldr	r2, [pc, #204]	@ (8005030 <UART_SetConfig+0x4e4>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f6c:	441c      	add	r4, r3
 8004f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f72:	2200      	movs	r2, #0
 8004f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f76:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	1891      	adds	r1, r2, r2
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	415b      	adcs	r3, r3
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	1851      	adds	r1, r2, r1
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	4649      	mov	r1, r9
 8004f94:	414b      	adcs	r3, r1
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	00cb      	lsls	r3, r1, #3
 8004fa8:	4651      	mov	r1, sl
 8004faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fae:	4651      	mov	r1, sl
 8004fb0:	00ca      	lsls	r2, r1, #3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4642      	mov	r2, r8
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	eb42 0303 	adc.w	r3, r2, r3
 8004fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	008b      	lsls	r3, r1, #2
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fea:	4641      	mov	r1, r8
 8004fec:	008a      	lsls	r2, r1, #2
 8004fee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ff2:	f7fb f965 	bl	80002c0 <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <UART_SetConfig+0x4e4>)
 8004ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	2164      	movs	r1, #100	@ 0x64
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	3332      	adds	r3, #50	@ 0x32
 800500e:	4a08      	ldr	r2, [pc, #32]	@ (8005030 <UART_SetConfig+0x4e4>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f003 020f 	and.w	r2, r3, #15
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4422      	add	r2, r4
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800502a:	46bd      	mov	sp, r7
 800502c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005030:	51eb851f 	.word	0x51eb851f

08005034 <malloc>:
 8005034:	4b02      	ldr	r3, [pc, #8]	@ (8005040 <malloc+0xc>)
 8005036:	4601      	mov	r1, r0
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f000 b82d 	b.w	8005098 <_malloc_r>
 800503e:	bf00      	nop
 8005040:	20000020 	.word	0x20000020

08005044 <free>:
 8005044:	4b02      	ldr	r3, [pc, #8]	@ (8005050 <free+0xc>)
 8005046:	4601      	mov	r1, r0
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	f000 bb79 	b.w	8005740 <_free_r>
 800504e:	bf00      	nop
 8005050:	20000020 	.word	0x20000020

08005054 <sbrk_aligned>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4e0f      	ldr	r6, [pc, #60]	@ (8005094 <sbrk_aligned+0x40>)
 8005058:	460c      	mov	r4, r1
 800505a:	6831      	ldr	r1, [r6, #0]
 800505c:	4605      	mov	r5, r0
 800505e:	b911      	cbnz	r1, 8005066 <sbrk_aligned+0x12>
 8005060:	f000 fb1e 	bl	80056a0 <_sbrk_r>
 8005064:	6030      	str	r0, [r6, #0]
 8005066:	4621      	mov	r1, r4
 8005068:	4628      	mov	r0, r5
 800506a:	f000 fb19 	bl	80056a0 <_sbrk_r>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	d103      	bne.n	800507a <sbrk_aligned+0x26>
 8005072:	f04f 34ff 	mov.w	r4, #4294967295
 8005076:	4620      	mov	r0, r4
 8005078:	bd70      	pop	{r4, r5, r6, pc}
 800507a:	1cc4      	adds	r4, r0, #3
 800507c:	f024 0403 	bic.w	r4, r4, #3
 8005080:	42a0      	cmp	r0, r4
 8005082:	d0f8      	beq.n	8005076 <sbrk_aligned+0x22>
 8005084:	1a21      	subs	r1, r4, r0
 8005086:	4628      	mov	r0, r5
 8005088:	f000 fb0a 	bl	80056a0 <_sbrk_r>
 800508c:	3001      	adds	r0, #1
 800508e:	d1f2      	bne.n	8005076 <sbrk_aligned+0x22>
 8005090:	e7ef      	b.n	8005072 <sbrk_aligned+0x1e>
 8005092:	bf00      	nop
 8005094:	200002e0 	.word	0x200002e0

08005098 <_malloc_r>:
 8005098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800509c:	1ccd      	adds	r5, r1, #3
 800509e:	f025 0503 	bic.w	r5, r5, #3
 80050a2:	3508      	adds	r5, #8
 80050a4:	2d0c      	cmp	r5, #12
 80050a6:	bf38      	it	cc
 80050a8:	250c      	movcc	r5, #12
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	4606      	mov	r6, r0
 80050ae:	db01      	blt.n	80050b4 <_malloc_r+0x1c>
 80050b0:	42a9      	cmp	r1, r5
 80050b2:	d904      	bls.n	80050be <_malloc_r+0x26>
 80050b4:	230c      	movs	r3, #12
 80050b6:	6033      	str	r3, [r6, #0]
 80050b8:	2000      	movs	r0, #0
 80050ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005194 <_malloc_r+0xfc>
 80050c2:	f000 f869 	bl	8005198 <__malloc_lock>
 80050c6:	f8d8 3000 	ldr.w	r3, [r8]
 80050ca:	461c      	mov	r4, r3
 80050cc:	bb44      	cbnz	r4, 8005120 <_malloc_r+0x88>
 80050ce:	4629      	mov	r1, r5
 80050d0:	4630      	mov	r0, r6
 80050d2:	f7ff ffbf 	bl	8005054 <sbrk_aligned>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	4604      	mov	r4, r0
 80050da:	d158      	bne.n	800518e <_malloc_r+0xf6>
 80050dc:	f8d8 4000 	ldr.w	r4, [r8]
 80050e0:	4627      	mov	r7, r4
 80050e2:	2f00      	cmp	r7, #0
 80050e4:	d143      	bne.n	800516e <_malloc_r+0xd6>
 80050e6:	2c00      	cmp	r4, #0
 80050e8:	d04b      	beq.n	8005182 <_malloc_r+0xea>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	4639      	mov	r1, r7
 80050ee:	4630      	mov	r0, r6
 80050f0:	eb04 0903 	add.w	r9, r4, r3
 80050f4:	f000 fad4 	bl	80056a0 <_sbrk_r>
 80050f8:	4581      	cmp	r9, r0
 80050fa:	d142      	bne.n	8005182 <_malloc_r+0xea>
 80050fc:	6821      	ldr	r1, [r4, #0]
 80050fe:	1a6d      	subs	r5, r5, r1
 8005100:	4629      	mov	r1, r5
 8005102:	4630      	mov	r0, r6
 8005104:	f7ff ffa6 	bl	8005054 <sbrk_aligned>
 8005108:	3001      	adds	r0, #1
 800510a:	d03a      	beq.n	8005182 <_malloc_r+0xea>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	442b      	add	r3, r5
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	f8d8 3000 	ldr.w	r3, [r8]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	bb62      	cbnz	r2, 8005174 <_malloc_r+0xdc>
 800511a:	f8c8 7000 	str.w	r7, [r8]
 800511e:	e00f      	b.n	8005140 <_malloc_r+0xa8>
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	1b52      	subs	r2, r2, r5
 8005124:	d420      	bmi.n	8005168 <_malloc_r+0xd0>
 8005126:	2a0b      	cmp	r2, #11
 8005128:	d917      	bls.n	800515a <_malloc_r+0xc2>
 800512a:	1961      	adds	r1, r4, r5
 800512c:	42a3      	cmp	r3, r4
 800512e:	6025      	str	r5, [r4, #0]
 8005130:	bf18      	it	ne
 8005132:	6059      	strne	r1, [r3, #4]
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	bf08      	it	eq
 8005138:	f8c8 1000 	streq.w	r1, [r8]
 800513c:	5162      	str	r2, [r4, r5]
 800513e:	604b      	str	r3, [r1, #4]
 8005140:	4630      	mov	r0, r6
 8005142:	f000 f82f 	bl	80051a4 <__malloc_unlock>
 8005146:	f104 000b 	add.w	r0, r4, #11
 800514a:	1d23      	adds	r3, r4, #4
 800514c:	f020 0007 	bic.w	r0, r0, #7
 8005150:	1ac2      	subs	r2, r0, r3
 8005152:	bf1c      	itt	ne
 8005154:	1a1b      	subne	r3, r3, r0
 8005156:	50a3      	strne	r3, [r4, r2]
 8005158:	e7af      	b.n	80050ba <_malloc_r+0x22>
 800515a:	6862      	ldr	r2, [r4, #4]
 800515c:	42a3      	cmp	r3, r4
 800515e:	bf0c      	ite	eq
 8005160:	f8c8 2000 	streq.w	r2, [r8]
 8005164:	605a      	strne	r2, [r3, #4]
 8005166:	e7eb      	b.n	8005140 <_malloc_r+0xa8>
 8005168:	4623      	mov	r3, r4
 800516a:	6864      	ldr	r4, [r4, #4]
 800516c:	e7ae      	b.n	80050cc <_malloc_r+0x34>
 800516e:	463c      	mov	r4, r7
 8005170:	687f      	ldr	r7, [r7, #4]
 8005172:	e7b6      	b.n	80050e2 <_malloc_r+0x4a>
 8005174:	461a      	mov	r2, r3
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	42a3      	cmp	r3, r4
 800517a:	d1fb      	bne.n	8005174 <_malloc_r+0xdc>
 800517c:	2300      	movs	r3, #0
 800517e:	6053      	str	r3, [r2, #4]
 8005180:	e7de      	b.n	8005140 <_malloc_r+0xa8>
 8005182:	230c      	movs	r3, #12
 8005184:	6033      	str	r3, [r6, #0]
 8005186:	4630      	mov	r0, r6
 8005188:	f000 f80c 	bl	80051a4 <__malloc_unlock>
 800518c:	e794      	b.n	80050b8 <_malloc_r+0x20>
 800518e:	6005      	str	r5, [r0, #0]
 8005190:	e7d6      	b.n	8005140 <_malloc_r+0xa8>
 8005192:	bf00      	nop
 8005194:	200002e4 	.word	0x200002e4

08005198 <__malloc_lock>:
 8005198:	4801      	ldr	r0, [pc, #4]	@ (80051a0 <__malloc_lock+0x8>)
 800519a:	f000 bace 	b.w	800573a <__retarget_lock_acquire_recursive>
 800519e:	bf00      	nop
 80051a0:	20000428 	.word	0x20000428

080051a4 <__malloc_unlock>:
 80051a4:	4801      	ldr	r0, [pc, #4]	@ (80051ac <__malloc_unlock+0x8>)
 80051a6:	f000 bac9 	b.w	800573c <__retarget_lock_release_recursive>
 80051aa:	bf00      	nop
 80051ac:	20000428 	.word	0x20000428

080051b0 <std>:
 80051b0:	2300      	movs	r3, #0
 80051b2:	b510      	push	{r4, lr}
 80051b4:	4604      	mov	r4, r0
 80051b6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051be:	6083      	str	r3, [r0, #8]
 80051c0:	8181      	strh	r1, [r0, #12]
 80051c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80051c4:	81c2      	strh	r2, [r0, #14]
 80051c6:	6183      	str	r3, [r0, #24]
 80051c8:	4619      	mov	r1, r3
 80051ca:	2208      	movs	r2, #8
 80051cc:	305c      	adds	r0, #92	@ 0x5c
 80051ce:	f000 fa19 	bl	8005604 <memset>
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <std+0x58>)
 80051d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80051d6:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <std+0x5c>)
 80051d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <std+0x60>)
 80051dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <std+0x64>)
 80051e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <std+0x68>)
 80051e4:	6224      	str	r4, [r4, #32]
 80051e6:	429c      	cmp	r4, r3
 80051e8:	d006      	beq.n	80051f8 <std+0x48>
 80051ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051ee:	4294      	cmp	r4, r2
 80051f0:	d002      	beq.n	80051f8 <std+0x48>
 80051f2:	33d0      	adds	r3, #208	@ 0xd0
 80051f4:	429c      	cmp	r4, r3
 80051f6:	d105      	bne.n	8005204 <std+0x54>
 80051f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005200:	f000 ba9a 	b.w	8005738 <__retarget_lock_init_recursive>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	08005455 	.word	0x08005455
 800520c:	08005477 	.word	0x08005477
 8005210:	080054af 	.word	0x080054af
 8005214:	080054d3 	.word	0x080054d3
 8005218:	200002e8 	.word	0x200002e8

0800521c <stdio_exit_handler>:
 800521c:	4a02      	ldr	r2, [pc, #8]	@ (8005228 <stdio_exit_handler+0xc>)
 800521e:	4903      	ldr	r1, [pc, #12]	@ (800522c <stdio_exit_handler+0x10>)
 8005220:	4803      	ldr	r0, [pc, #12]	@ (8005230 <stdio_exit_handler+0x14>)
 8005222:	f000 b869 	b.w	80052f8 <_fwalk_sglue>
 8005226:	bf00      	nop
 8005228:	20000014 	.word	0x20000014
 800522c:	0800612d 	.word	0x0800612d
 8005230:	20000024 	.word	0x20000024

08005234 <cleanup_stdio>:
 8005234:	6841      	ldr	r1, [r0, #4]
 8005236:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <cleanup_stdio+0x34>)
 8005238:	4299      	cmp	r1, r3
 800523a:	b510      	push	{r4, lr}
 800523c:	4604      	mov	r4, r0
 800523e:	d001      	beq.n	8005244 <cleanup_stdio+0x10>
 8005240:	f000 ff74 	bl	800612c <_fflush_r>
 8005244:	68a1      	ldr	r1, [r4, #8]
 8005246:	4b09      	ldr	r3, [pc, #36]	@ (800526c <cleanup_stdio+0x38>)
 8005248:	4299      	cmp	r1, r3
 800524a:	d002      	beq.n	8005252 <cleanup_stdio+0x1e>
 800524c:	4620      	mov	r0, r4
 800524e:	f000 ff6d 	bl	800612c <_fflush_r>
 8005252:	68e1      	ldr	r1, [r4, #12]
 8005254:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <cleanup_stdio+0x3c>)
 8005256:	4299      	cmp	r1, r3
 8005258:	d004      	beq.n	8005264 <cleanup_stdio+0x30>
 800525a:	4620      	mov	r0, r4
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005260:	f000 bf64 	b.w	800612c <_fflush_r>
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop
 8005268:	200002e8 	.word	0x200002e8
 800526c:	20000350 	.word	0x20000350
 8005270:	200003b8 	.word	0x200003b8

08005274 <global_stdio_init.part.0>:
 8005274:	b510      	push	{r4, lr}
 8005276:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <global_stdio_init.part.0+0x30>)
 8005278:	4c0b      	ldr	r4, [pc, #44]	@ (80052a8 <global_stdio_init.part.0+0x34>)
 800527a:	4a0c      	ldr	r2, [pc, #48]	@ (80052ac <global_stdio_init.part.0+0x38>)
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	4620      	mov	r0, r4
 8005280:	2200      	movs	r2, #0
 8005282:	2104      	movs	r1, #4
 8005284:	f7ff ff94 	bl	80051b0 <std>
 8005288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800528c:	2201      	movs	r2, #1
 800528e:	2109      	movs	r1, #9
 8005290:	f7ff ff8e 	bl	80051b0 <std>
 8005294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005298:	2202      	movs	r2, #2
 800529a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529e:	2112      	movs	r1, #18
 80052a0:	f7ff bf86 	b.w	80051b0 <std>
 80052a4:	20000420 	.word	0x20000420
 80052a8:	200002e8 	.word	0x200002e8
 80052ac:	0800521d 	.word	0x0800521d

080052b0 <__sfp_lock_acquire>:
 80052b0:	4801      	ldr	r0, [pc, #4]	@ (80052b8 <__sfp_lock_acquire+0x8>)
 80052b2:	f000 ba42 	b.w	800573a <__retarget_lock_acquire_recursive>
 80052b6:	bf00      	nop
 80052b8:	20000429 	.word	0x20000429

080052bc <__sfp_lock_release>:
 80052bc:	4801      	ldr	r0, [pc, #4]	@ (80052c4 <__sfp_lock_release+0x8>)
 80052be:	f000 ba3d 	b.w	800573c <__retarget_lock_release_recursive>
 80052c2:	bf00      	nop
 80052c4:	20000429 	.word	0x20000429

080052c8 <__sinit>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	4604      	mov	r4, r0
 80052cc:	f7ff fff0 	bl	80052b0 <__sfp_lock_acquire>
 80052d0:	6a23      	ldr	r3, [r4, #32]
 80052d2:	b11b      	cbz	r3, 80052dc <__sinit+0x14>
 80052d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d8:	f7ff bff0 	b.w	80052bc <__sfp_lock_release>
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <__sinit+0x28>)
 80052de:	6223      	str	r3, [r4, #32]
 80052e0:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <__sinit+0x2c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f5      	bne.n	80052d4 <__sinit+0xc>
 80052e8:	f7ff ffc4 	bl	8005274 <global_stdio_init.part.0>
 80052ec:	e7f2      	b.n	80052d4 <__sinit+0xc>
 80052ee:	bf00      	nop
 80052f0:	08005235 	.word	0x08005235
 80052f4:	20000420 	.word	0x20000420

080052f8 <_fwalk_sglue>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	4607      	mov	r7, r0
 80052fe:	4688      	mov	r8, r1
 8005300:	4614      	mov	r4, r2
 8005302:	2600      	movs	r6, #0
 8005304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005308:	f1b9 0901 	subs.w	r9, r9, #1
 800530c:	d505      	bpl.n	800531a <_fwalk_sglue+0x22>
 800530e:	6824      	ldr	r4, [r4, #0]
 8005310:	2c00      	cmp	r4, #0
 8005312:	d1f7      	bne.n	8005304 <_fwalk_sglue+0xc>
 8005314:	4630      	mov	r0, r6
 8005316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531a:	89ab      	ldrh	r3, [r5, #12]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d907      	bls.n	8005330 <_fwalk_sglue+0x38>
 8005320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005324:	3301      	adds	r3, #1
 8005326:	d003      	beq.n	8005330 <_fwalk_sglue+0x38>
 8005328:	4629      	mov	r1, r5
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	4306      	orrs	r6, r0
 8005330:	3568      	adds	r5, #104	@ 0x68
 8005332:	e7e9      	b.n	8005308 <_fwalk_sglue+0x10>

08005334 <iprintf>:
 8005334:	b40f      	push	{r0, r1, r2, r3}
 8005336:	b507      	push	{r0, r1, r2, lr}
 8005338:	4906      	ldr	r1, [pc, #24]	@ (8005354 <iprintf+0x20>)
 800533a:	ab04      	add	r3, sp, #16
 800533c:	6808      	ldr	r0, [r1, #0]
 800533e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005342:	6881      	ldr	r1, [r0, #8]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	f000 fbc7 	bl	8005ad8 <_vfiprintf_r>
 800534a:	b003      	add	sp, #12
 800534c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005350:	b004      	add	sp, #16
 8005352:	4770      	bx	lr
 8005354:	20000020 	.word	0x20000020

08005358 <_puts_r>:
 8005358:	6a03      	ldr	r3, [r0, #32]
 800535a:	b570      	push	{r4, r5, r6, lr}
 800535c:	6884      	ldr	r4, [r0, #8]
 800535e:	4605      	mov	r5, r0
 8005360:	460e      	mov	r6, r1
 8005362:	b90b      	cbnz	r3, 8005368 <_puts_r+0x10>
 8005364:	f7ff ffb0 	bl	80052c8 <__sinit>
 8005368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800536a:	07db      	lsls	r3, r3, #31
 800536c:	d405      	bmi.n	800537a <_puts_r+0x22>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	0598      	lsls	r0, r3, #22
 8005372:	d402      	bmi.n	800537a <_puts_r+0x22>
 8005374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005376:	f000 f9e0 	bl	800573a <__retarget_lock_acquire_recursive>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	0719      	lsls	r1, r3, #28
 800537e:	d502      	bpl.n	8005386 <_puts_r+0x2e>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d135      	bne.n	80053f2 <_puts_r+0x9a>
 8005386:	4621      	mov	r1, r4
 8005388:	4628      	mov	r0, r5
 800538a:	f000 f8e5 	bl	8005558 <__swsetup_r>
 800538e:	b380      	cbz	r0, 80053f2 <_puts_r+0x9a>
 8005390:	f04f 35ff 	mov.w	r5, #4294967295
 8005394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005396:	07da      	lsls	r2, r3, #31
 8005398:	d405      	bmi.n	80053a6 <_puts_r+0x4e>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	059b      	lsls	r3, r3, #22
 800539e:	d402      	bmi.n	80053a6 <_puts_r+0x4e>
 80053a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053a2:	f000 f9cb 	bl	800573c <__retarget_lock_release_recursive>
 80053a6:	4628      	mov	r0, r5
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da04      	bge.n	80053b8 <_puts_r+0x60>
 80053ae:	69a2      	ldr	r2, [r4, #24]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	dc17      	bgt.n	80053e4 <_puts_r+0x8c>
 80053b4:	290a      	cmp	r1, #10
 80053b6:	d015      	beq.n	80053e4 <_puts_r+0x8c>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	6022      	str	r2, [r4, #0]
 80053be:	7019      	strb	r1, [r3, #0]
 80053c0:	68a3      	ldr	r3, [r4, #8]
 80053c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60a3      	str	r3, [r4, #8]
 80053ca:	2900      	cmp	r1, #0
 80053cc:	d1ed      	bne.n	80053aa <_puts_r+0x52>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da11      	bge.n	80053f6 <_puts_r+0x9e>
 80053d2:	4622      	mov	r2, r4
 80053d4:	210a      	movs	r1, #10
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f87f 	bl	80054da <__swbuf_r>
 80053dc:	3001      	adds	r0, #1
 80053de:	d0d7      	beq.n	8005390 <_puts_r+0x38>
 80053e0:	250a      	movs	r5, #10
 80053e2:	e7d7      	b.n	8005394 <_puts_r+0x3c>
 80053e4:	4622      	mov	r2, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f877 	bl	80054da <__swbuf_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1e7      	bne.n	80053c0 <_puts_r+0x68>
 80053f0:	e7ce      	b.n	8005390 <_puts_r+0x38>
 80053f2:	3e01      	subs	r6, #1
 80053f4:	e7e4      	b.n	80053c0 <_puts_r+0x68>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	6022      	str	r2, [r4, #0]
 80053fc:	220a      	movs	r2, #10
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	e7ee      	b.n	80053e0 <_puts_r+0x88>
	...

08005404 <puts>:
 8005404:	4b02      	ldr	r3, [pc, #8]	@ (8005410 <puts+0xc>)
 8005406:	4601      	mov	r1, r0
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	f7ff bfa5 	b.w	8005358 <_puts_r>
 800540e:	bf00      	nop
 8005410:	20000020 	.word	0x20000020

08005414 <siprintf>:
 8005414:	b40e      	push	{r1, r2, r3}
 8005416:	b500      	push	{lr}
 8005418:	b09c      	sub	sp, #112	@ 0x70
 800541a:	ab1d      	add	r3, sp, #116	@ 0x74
 800541c:	9002      	str	r0, [sp, #8]
 800541e:	9006      	str	r0, [sp, #24]
 8005420:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005424:	4809      	ldr	r0, [pc, #36]	@ (800544c <siprintf+0x38>)
 8005426:	9107      	str	r1, [sp, #28]
 8005428:	9104      	str	r1, [sp, #16]
 800542a:	4909      	ldr	r1, [pc, #36]	@ (8005450 <siprintf+0x3c>)
 800542c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005430:	9105      	str	r1, [sp, #20]
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	a902      	add	r1, sp, #8
 8005438:	f000 fa28 	bl	800588c <_svfiprintf_r>
 800543c:	9b02      	ldr	r3, [sp, #8]
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	b01c      	add	sp, #112	@ 0x70
 8005444:	f85d eb04 	ldr.w	lr, [sp], #4
 8005448:	b003      	add	sp, #12
 800544a:	4770      	bx	lr
 800544c:	20000020 	.word	0x20000020
 8005450:	ffff0208 	.word	0xffff0208

08005454 <__sread>:
 8005454:	b510      	push	{r4, lr}
 8005456:	460c      	mov	r4, r1
 8005458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545c:	f000 f90e 	bl	800567c <_read_r>
 8005460:	2800      	cmp	r0, #0
 8005462:	bfab      	itete	ge
 8005464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005466:	89a3      	ldrhlt	r3, [r4, #12]
 8005468:	181b      	addge	r3, r3, r0
 800546a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800546e:	bfac      	ite	ge
 8005470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005472:	81a3      	strhlt	r3, [r4, #12]
 8005474:	bd10      	pop	{r4, pc}

08005476 <__swrite>:
 8005476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547a:	461f      	mov	r7, r3
 800547c:	898b      	ldrh	r3, [r1, #12]
 800547e:	05db      	lsls	r3, r3, #23
 8005480:	4605      	mov	r5, r0
 8005482:	460c      	mov	r4, r1
 8005484:	4616      	mov	r6, r2
 8005486:	d505      	bpl.n	8005494 <__swrite+0x1e>
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	2302      	movs	r3, #2
 800548e:	2200      	movs	r2, #0
 8005490:	f000 f8e2 	bl	8005658 <_lseek_r>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800549a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	4632      	mov	r2, r6
 80054a2:	463b      	mov	r3, r7
 80054a4:	4628      	mov	r0, r5
 80054a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	f000 b909 	b.w	80056c0 <_write_r>

080054ae <__sseek>:
 80054ae:	b510      	push	{r4, lr}
 80054b0:	460c      	mov	r4, r1
 80054b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b6:	f000 f8cf 	bl	8005658 <_lseek_r>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	bf15      	itete	ne
 80054c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054ca:	81a3      	strheq	r3, [r4, #12]
 80054cc:	bf18      	it	ne
 80054ce:	81a3      	strhne	r3, [r4, #12]
 80054d0:	bd10      	pop	{r4, pc}

080054d2 <__sclose>:
 80054d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d6:	f000 b8af 	b.w	8005638 <_close_r>

080054da <__swbuf_r>:
 80054da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054dc:	460e      	mov	r6, r1
 80054de:	4614      	mov	r4, r2
 80054e0:	4605      	mov	r5, r0
 80054e2:	b118      	cbz	r0, 80054ec <__swbuf_r+0x12>
 80054e4:	6a03      	ldr	r3, [r0, #32]
 80054e6:	b90b      	cbnz	r3, 80054ec <__swbuf_r+0x12>
 80054e8:	f7ff feee 	bl	80052c8 <__sinit>
 80054ec:	69a3      	ldr	r3, [r4, #24]
 80054ee:	60a3      	str	r3, [r4, #8]
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	071a      	lsls	r2, r3, #28
 80054f4:	d501      	bpl.n	80054fa <__swbuf_r+0x20>
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	b943      	cbnz	r3, 800550c <__swbuf_r+0x32>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f82b 	bl	8005558 <__swsetup_r>
 8005502:	b118      	cbz	r0, 800550c <__swbuf_r+0x32>
 8005504:	f04f 37ff 	mov.w	r7, #4294967295
 8005508:	4638      	mov	r0, r7
 800550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	6922      	ldr	r2, [r4, #16]
 8005510:	1a98      	subs	r0, r3, r2
 8005512:	6963      	ldr	r3, [r4, #20]
 8005514:	b2f6      	uxtb	r6, r6
 8005516:	4283      	cmp	r3, r0
 8005518:	4637      	mov	r7, r6
 800551a:	dc05      	bgt.n	8005528 <__swbuf_r+0x4e>
 800551c:	4621      	mov	r1, r4
 800551e:	4628      	mov	r0, r5
 8005520:	f000 fe04 	bl	800612c <_fflush_r>
 8005524:	2800      	cmp	r0, #0
 8005526:	d1ed      	bne.n	8005504 <__swbuf_r+0x2a>
 8005528:	68a3      	ldr	r3, [r4, #8]
 800552a:	3b01      	subs	r3, #1
 800552c:	60a3      	str	r3, [r4, #8]
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	6022      	str	r2, [r4, #0]
 8005534:	701e      	strb	r6, [r3, #0]
 8005536:	6962      	ldr	r2, [r4, #20]
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	429a      	cmp	r2, r3
 800553c:	d004      	beq.n	8005548 <__swbuf_r+0x6e>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	07db      	lsls	r3, r3, #31
 8005542:	d5e1      	bpl.n	8005508 <__swbuf_r+0x2e>
 8005544:	2e0a      	cmp	r6, #10
 8005546:	d1df      	bne.n	8005508 <__swbuf_r+0x2e>
 8005548:	4621      	mov	r1, r4
 800554a:	4628      	mov	r0, r5
 800554c:	f000 fdee 	bl	800612c <_fflush_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	d0d9      	beq.n	8005508 <__swbuf_r+0x2e>
 8005554:	e7d6      	b.n	8005504 <__swbuf_r+0x2a>
	...

08005558 <__swsetup_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4b29      	ldr	r3, [pc, #164]	@ (8005600 <__swsetup_r+0xa8>)
 800555c:	4605      	mov	r5, r0
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	460c      	mov	r4, r1
 8005562:	b118      	cbz	r0, 800556c <__swsetup_r+0x14>
 8005564:	6a03      	ldr	r3, [r0, #32]
 8005566:	b90b      	cbnz	r3, 800556c <__swsetup_r+0x14>
 8005568:	f7ff feae 	bl	80052c8 <__sinit>
 800556c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005570:	0719      	lsls	r1, r3, #28
 8005572:	d422      	bmi.n	80055ba <__swsetup_r+0x62>
 8005574:	06da      	lsls	r2, r3, #27
 8005576:	d407      	bmi.n	8005588 <__swsetup_r+0x30>
 8005578:	2209      	movs	r2, #9
 800557a:	602a      	str	r2, [r5, #0]
 800557c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	f04f 30ff 	mov.w	r0, #4294967295
 8005586:	e033      	b.n	80055f0 <__swsetup_r+0x98>
 8005588:	0758      	lsls	r0, r3, #29
 800558a:	d512      	bpl.n	80055b2 <__swsetup_r+0x5a>
 800558c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800558e:	b141      	cbz	r1, 80055a2 <__swsetup_r+0x4a>
 8005590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005594:	4299      	cmp	r1, r3
 8005596:	d002      	beq.n	800559e <__swsetup_r+0x46>
 8005598:	4628      	mov	r0, r5
 800559a:	f000 f8d1 	bl	8005740 <_free_r>
 800559e:	2300      	movs	r3, #0
 80055a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055a8:	81a3      	strh	r3, [r4, #12]
 80055aa:	2300      	movs	r3, #0
 80055ac:	6063      	str	r3, [r4, #4]
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	f043 0308 	orr.w	r3, r3, #8
 80055b8:	81a3      	strh	r3, [r4, #12]
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	b94b      	cbnz	r3, 80055d2 <__swsetup_r+0x7a>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055c8:	d003      	beq.n	80055d2 <__swsetup_r+0x7a>
 80055ca:	4621      	mov	r1, r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 fdfb 	bl	80061c8 <__smakebuf_r>
 80055d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d6:	f013 0201 	ands.w	r2, r3, #1
 80055da:	d00a      	beq.n	80055f2 <__swsetup_r+0x9a>
 80055dc:	2200      	movs	r2, #0
 80055de:	60a2      	str	r2, [r4, #8]
 80055e0:	6962      	ldr	r2, [r4, #20]
 80055e2:	4252      	negs	r2, r2
 80055e4:	61a2      	str	r2, [r4, #24]
 80055e6:	6922      	ldr	r2, [r4, #16]
 80055e8:	b942      	cbnz	r2, 80055fc <__swsetup_r+0xa4>
 80055ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055ee:	d1c5      	bne.n	800557c <__swsetup_r+0x24>
 80055f0:	bd38      	pop	{r3, r4, r5, pc}
 80055f2:	0799      	lsls	r1, r3, #30
 80055f4:	bf58      	it	pl
 80055f6:	6962      	ldrpl	r2, [r4, #20]
 80055f8:	60a2      	str	r2, [r4, #8]
 80055fa:	e7f4      	b.n	80055e6 <__swsetup_r+0x8e>
 80055fc:	2000      	movs	r0, #0
 80055fe:	e7f7      	b.n	80055f0 <__swsetup_r+0x98>
 8005600:	20000020 	.word	0x20000020

08005604 <memset>:
 8005604:	4402      	add	r2, r0
 8005606:	4603      	mov	r3, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	d100      	bne.n	800560e <memset+0xa>
 800560c:	4770      	bx	lr
 800560e:	f803 1b01 	strb.w	r1, [r3], #1
 8005612:	e7f9      	b.n	8005608 <memset+0x4>

08005614 <strncmp>:
 8005614:	b510      	push	{r4, lr}
 8005616:	b16a      	cbz	r2, 8005634 <strncmp+0x20>
 8005618:	3901      	subs	r1, #1
 800561a:	1884      	adds	r4, r0, r2
 800561c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005620:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005624:	429a      	cmp	r2, r3
 8005626:	d103      	bne.n	8005630 <strncmp+0x1c>
 8005628:	42a0      	cmp	r0, r4
 800562a:	d001      	beq.n	8005630 <strncmp+0x1c>
 800562c:	2a00      	cmp	r2, #0
 800562e:	d1f5      	bne.n	800561c <strncmp+0x8>
 8005630:	1ad0      	subs	r0, r2, r3
 8005632:	bd10      	pop	{r4, pc}
 8005634:	4610      	mov	r0, r2
 8005636:	e7fc      	b.n	8005632 <strncmp+0x1e>

08005638 <_close_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d06      	ldr	r5, [pc, #24]	@ (8005654 <_close_r+0x1c>)
 800563c:	2300      	movs	r3, #0
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	f7fb ff47 	bl	80014d6 <_close>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_close_r+0x1a>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_close_r+0x1a>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	20000424 	.word	0x20000424

08005658 <_lseek_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d07      	ldr	r5, [pc, #28]	@ (8005678 <_lseek_r+0x20>)
 800565c:	4604      	mov	r4, r0
 800565e:	4608      	mov	r0, r1
 8005660:	4611      	mov	r1, r2
 8005662:	2200      	movs	r2, #0
 8005664:	602a      	str	r2, [r5, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fb ff5c 	bl	8001524 <_lseek>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_lseek_r+0x1e>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_lseek_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	20000424 	.word	0x20000424

0800567c <_read_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d07      	ldr	r5, [pc, #28]	@ (800569c <_read_r+0x20>)
 8005680:	4604      	mov	r4, r0
 8005682:	4608      	mov	r0, r1
 8005684:	4611      	mov	r1, r2
 8005686:	2200      	movs	r2, #0
 8005688:	602a      	str	r2, [r5, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f7fb feea 	bl	8001464 <_read>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_read_r+0x1e>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_read_r+0x1e>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	20000424 	.word	0x20000424

080056a0 <_sbrk_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4d06      	ldr	r5, [pc, #24]	@ (80056bc <_sbrk_r+0x1c>)
 80056a4:	2300      	movs	r3, #0
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	f7fb ff48 	bl	8001540 <_sbrk>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_sbrk_r+0x1a>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_sbrk_r+0x1a>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000424 	.word	0x20000424

080056c0 <_write_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d07      	ldr	r5, [pc, #28]	@ (80056e0 <_write_r+0x20>)
 80056c4:	4604      	mov	r4, r0
 80056c6:	4608      	mov	r0, r1
 80056c8:	4611      	mov	r1, r2
 80056ca:	2200      	movs	r2, #0
 80056cc:	602a      	str	r2, [r5, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f7fb fee5 	bl	800149e <_write>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_write_r+0x1e>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_write_r+0x1e>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	20000424 	.word	0x20000424

080056e4 <__errno>:
 80056e4:	4b01      	ldr	r3, [pc, #4]	@ (80056ec <__errno+0x8>)
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000020 	.word	0x20000020

080056f0 <__libc_init_array>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005728 <__libc_init_array+0x38>)
 80056f4:	4c0d      	ldr	r4, [pc, #52]	@ (800572c <__libc_init_array+0x3c>)
 80056f6:	1b64      	subs	r4, r4, r5
 80056f8:	10a4      	asrs	r4, r4, #2
 80056fa:	2600      	movs	r6, #0
 80056fc:	42a6      	cmp	r6, r4
 80056fe:	d109      	bne.n	8005714 <__libc_init_array+0x24>
 8005700:	4d0b      	ldr	r5, [pc, #44]	@ (8005730 <__libc_init_array+0x40>)
 8005702:	4c0c      	ldr	r4, [pc, #48]	@ (8005734 <__libc_init_array+0x44>)
 8005704:	f000 fe1c 	bl	8006340 <_init>
 8005708:	1b64      	subs	r4, r4, r5
 800570a:	10a4      	asrs	r4, r4, #2
 800570c:	2600      	movs	r6, #0
 800570e:	42a6      	cmp	r6, r4
 8005710:	d105      	bne.n	800571e <__libc_init_array+0x2e>
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	f855 3b04 	ldr.w	r3, [r5], #4
 8005718:	4798      	blx	r3
 800571a:	3601      	adds	r6, #1
 800571c:	e7ee      	b.n	80056fc <__libc_init_array+0xc>
 800571e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005722:	4798      	blx	r3
 8005724:	3601      	adds	r6, #1
 8005726:	e7f2      	b.n	800570e <__libc_init_array+0x1e>
 8005728:	08006658 	.word	0x08006658
 800572c:	08006658 	.word	0x08006658
 8005730:	08006658 	.word	0x08006658
 8005734:	0800665c 	.word	0x0800665c

08005738 <__retarget_lock_init_recursive>:
 8005738:	4770      	bx	lr

0800573a <__retarget_lock_acquire_recursive>:
 800573a:	4770      	bx	lr

0800573c <__retarget_lock_release_recursive>:
 800573c:	4770      	bx	lr
	...

08005740 <_free_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4605      	mov	r5, r0
 8005744:	2900      	cmp	r1, #0
 8005746:	d041      	beq.n	80057cc <_free_r+0x8c>
 8005748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574c:	1f0c      	subs	r4, r1, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	bfb8      	it	lt
 8005752:	18e4      	addlt	r4, r4, r3
 8005754:	f7ff fd20 	bl	8005198 <__malloc_lock>
 8005758:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <_free_r+0x90>)
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	b933      	cbnz	r3, 800576c <_free_r+0x2c>
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6014      	str	r4, [r2, #0]
 8005762:	4628      	mov	r0, r5
 8005764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005768:	f7ff bd1c 	b.w	80051a4 <__malloc_unlock>
 800576c:	42a3      	cmp	r3, r4
 800576e:	d908      	bls.n	8005782 <_free_r+0x42>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	1821      	adds	r1, r4, r0
 8005774:	428b      	cmp	r3, r1
 8005776:	bf01      	itttt	eq
 8005778:	6819      	ldreq	r1, [r3, #0]
 800577a:	685b      	ldreq	r3, [r3, #4]
 800577c:	1809      	addeq	r1, r1, r0
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	e7ed      	b.n	800575e <_free_r+0x1e>
 8005782:	461a      	mov	r2, r3
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b10b      	cbz	r3, 800578c <_free_r+0x4c>
 8005788:	42a3      	cmp	r3, r4
 800578a:	d9fa      	bls.n	8005782 <_free_r+0x42>
 800578c:	6811      	ldr	r1, [r2, #0]
 800578e:	1850      	adds	r0, r2, r1
 8005790:	42a0      	cmp	r0, r4
 8005792:	d10b      	bne.n	80057ac <_free_r+0x6c>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	4401      	add	r1, r0
 8005798:	1850      	adds	r0, r2, r1
 800579a:	4283      	cmp	r3, r0
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	d1e0      	bne.n	8005762 <_free_r+0x22>
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	6053      	str	r3, [r2, #4]
 80057a6:	4408      	add	r0, r1
 80057a8:	6010      	str	r0, [r2, #0]
 80057aa:	e7da      	b.n	8005762 <_free_r+0x22>
 80057ac:	d902      	bls.n	80057b4 <_free_r+0x74>
 80057ae:	230c      	movs	r3, #12
 80057b0:	602b      	str	r3, [r5, #0]
 80057b2:	e7d6      	b.n	8005762 <_free_r+0x22>
 80057b4:	6820      	ldr	r0, [r4, #0]
 80057b6:	1821      	adds	r1, r4, r0
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf04      	itt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	bf04      	itt	eq
 80057c4:	1809      	addeq	r1, r1, r0
 80057c6:	6021      	streq	r1, [r4, #0]
 80057c8:	6054      	str	r4, [r2, #4]
 80057ca:	e7ca      	b.n	8005762 <_free_r+0x22>
 80057cc:	bd38      	pop	{r3, r4, r5, pc}
 80057ce:	bf00      	nop
 80057d0:	200002e4 	.word	0x200002e4

080057d4 <__ssputs_r>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	688e      	ldr	r6, [r1, #8]
 80057da:	461f      	mov	r7, r3
 80057dc:	42be      	cmp	r6, r7
 80057de:	680b      	ldr	r3, [r1, #0]
 80057e0:	4682      	mov	sl, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4690      	mov	r8, r2
 80057e6:	d82d      	bhi.n	8005844 <__ssputs_r+0x70>
 80057e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057f0:	d026      	beq.n	8005840 <__ssputs_r+0x6c>
 80057f2:	6965      	ldr	r5, [r4, #20]
 80057f4:	6909      	ldr	r1, [r1, #16]
 80057f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057fa:	eba3 0901 	sub.w	r9, r3, r1
 80057fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005802:	1c7b      	adds	r3, r7, #1
 8005804:	444b      	add	r3, r9
 8005806:	106d      	asrs	r5, r5, #1
 8005808:	429d      	cmp	r5, r3
 800580a:	bf38      	it	cc
 800580c:	461d      	movcc	r5, r3
 800580e:	0553      	lsls	r3, r2, #21
 8005810:	d527      	bpl.n	8005862 <__ssputs_r+0x8e>
 8005812:	4629      	mov	r1, r5
 8005814:	f7ff fc40 	bl	8005098 <_malloc_r>
 8005818:	4606      	mov	r6, r0
 800581a:	b360      	cbz	r0, 8005876 <__ssputs_r+0xa2>
 800581c:	6921      	ldr	r1, [r4, #16]
 800581e:	464a      	mov	r2, r9
 8005820:	f000 fd4a 	bl	80062b8 <memcpy>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800582a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	6126      	str	r6, [r4, #16]
 8005832:	6165      	str	r5, [r4, #20]
 8005834:	444e      	add	r6, r9
 8005836:	eba5 0509 	sub.w	r5, r5, r9
 800583a:	6026      	str	r6, [r4, #0]
 800583c:	60a5      	str	r5, [r4, #8]
 800583e:	463e      	mov	r6, r7
 8005840:	42be      	cmp	r6, r7
 8005842:	d900      	bls.n	8005846 <__ssputs_r+0x72>
 8005844:	463e      	mov	r6, r7
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	4632      	mov	r2, r6
 800584a:	4641      	mov	r1, r8
 800584c:	f000 fcf8 	bl	8006240 <memmove>
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	1b9b      	subs	r3, r3, r6
 8005854:	60a3      	str	r3, [r4, #8]
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4433      	add	r3, r6
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	2000      	movs	r0, #0
 800585e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005862:	462a      	mov	r2, r5
 8005864:	f000 fd36 	bl	80062d4 <_realloc_r>
 8005868:	4606      	mov	r6, r0
 800586a:	2800      	cmp	r0, #0
 800586c:	d1e0      	bne.n	8005830 <__ssputs_r+0x5c>
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	4650      	mov	r0, sl
 8005872:	f7ff ff65 	bl	8005740 <_free_r>
 8005876:	230c      	movs	r3, #12
 8005878:	f8ca 3000 	str.w	r3, [sl]
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e7e9      	b.n	800585e <__ssputs_r+0x8a>
	...

0800588c <_svfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	4698      	mov	r8, r3
 8005892:	898b      	ldrh	r3, [r1, #12]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	b09d      	sub	sp, #116	@ 0x74
 8005898:	4607      	mov	r7, r0
 800589a:	460d      	mov	r5, r1
 800589c:	4614      	mov	r4, r2
 800589e:	d510      	bpl.n	80058c2 <_svfiprintf_r+0x36>
 80058a0:	690b      	ldr	r3, [r1, #16]
 80058a2:	b973      	cbnz	r3, 80058c2 <_svfiprintf_r+0x36>
 80058a4:	2140      	movs	r1, #64	@ 0x40
 80058a6:	f7ff fbf7 	bl	8005098 <_malloc_r>
 80058aa:	6028      	str	r0, [r5, #0]
 80058ac:	6128      	str	r0, [r5, #16]
 80058ae:	b930      	cbnz	r0, 80058be <_svfiprintf_r+0x32>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	b01d      	add	sp, #116	@ 0x74
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058be:	2340      	movs	r3, #64	@ 0x40
 80058c0:	616b      	str	r3, [r5, #20]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c6:	2320      	movs	r3, #32
 80058c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d0:	2330      	movs	r3, #48	@ 0x30
 80058d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a70 <_svfiprintf_r+0x1e4>
 80058d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058da:	f04f 0901 	mov.w	r9, #1
 80058de:	4623      	mov	r3, r4
 80058e0:	469a      	mov	sl, r3
 80058e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e6:	b10a      	cbz	r2, 80058ec <_svfiprintf_r+0x60>
 80058e8:	2a25      	cmp	r2, #37	@ 0x25
 80058ea:	d1f9      	bne.n	80058e0 <_svfiprintf_r+0x54>
 80058ec:	ebba 0b04 	subs.w	fp, sl, r4
 80058f0:	d00b      	beq.n	800590a <_svfiprintf_r+0x7e>
 80058f2:	465b      	mov	r3, fp
 80058f4:	4622      	mov	r2, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	4638      	mov	r0, r7
 80058fa:	f7ff ff6b 	bl	80057d4 <__ssputs_r>
 80058fe:	3001      	adds	r0, #1
 8005900:	f000 80a7 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005906:	445a      	add	r2, fp
 8005908:	9209      	str	r2, [sp, #36]	@ 0x24
 800590a:	f89a 3000 	ldrb.w	r3, [sl]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 809f 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005914:	2300      	movs	r3, #0
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591e:	f10a 0a01 	add.w	sl, sl, #1
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	9307      	str	r3, [sp, #28]
 8005926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800592a:	931a      	str	r3, [sp, #104]	@ 0x68
 800592c:	4654      	mov	r4, sl
 800592e:	2205      	movs	r2, #5
 8005930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005934:	484e      	ldr	r0, [pc, #312]	@ (8005a70 <_svfiprintf_r+0x1e4>)
 8005936:	f7fa fc73 	bl	8000220 <memchr>
 800593a:	9a04      	ldr	r2, [sp, #16]
 800593c:	b9d8      	cbnz	r0, 8005976 <_svfiprintf_r+0xea>
 800593e:	06d0      	lsls	r0, r2, #27
 8005940:	bf44      	itt	mi
 8005942:	2320      	movmi	r3, #32
 8005944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005948:	0711      	lsls	r1, r2, #28
 800594a:	bf44      	itt	mi
 800594c:	232b      	movmi	r3, #43	@ 0x2b
 800594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005952:	f89a 3000 	ldrb.w	r3, [sl]
 8005956:	2b2a      	cmp	r3, #42	@ 0x2a
 8005958:	d015      	beq.n	8005986 <_svfiprintf_r+0xfa>
 800595a:	9a07      	ldr	r2, [sp, #28]
 800595c:	4654      	mov	r4, sl
 800595e:	2000      	movs	r0, #0
 8005960:	f04f 0c0a 	mov.w	ip, #10
 8005964:	4621      	mov	r1, r4
 8005966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800596a:	3b30      	subs	r3, #48	@ 0x30
 800596c:	2b09      	cmp	r3, #9
 800596e:	d94b      	bls.n	8005a08 <_svfiprintf_r+0x17c>
 8005970:	b1b0      	cbz	r0, 80059a0 <_svfiprintf_r+0x114>
 8005972:	9207      	str	r2, [sp, #28]
 8005974:	e014      	b.n	80059a0 <_svfiprintf_r+0x114>
 8005976:	eba0 0308 	sub.w	r3, r0, r8
 800597a:	fa09 f303 	lsl.w	r3, r9, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	46a2      	mov	sl, r4
 8005984:	e7d2      	b.n	800592c <_svfiprintf_r+0xa0>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	1d19      	adds	r1, r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	9103      	str	r1, [sp, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfbb      	ittet	lt
 8005992:	425b      	neglt	r3, r3
 8005994:	f042 0202 	orrlt.w	r2, r2, #2
 8005998:	9307      	strge	r3, [sp, #28]
 800599a:	9307      	strlt	r3, [sp, #28]
 800599c:	bfb8      	it	lt
 800599e:	9204      	strlt	r2, [sp, #16]
 80059a0:	7823      	ldrb	r3, [r4, #0]
 80059a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80059a4:	d10a      	bne.n	80059bc <_svfiprintf_r+0x130>
 80059a6:	7863      	ldrb	r3, [r4, #1]
 80059a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059aa:	d132      	bne.n	8005a12 <_svfiprintf_r+0x186>
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	1d1a      	adds	r2, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9203      	str	r2, [sp, #12]
 80059b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059b8:	3402      	adds	r4, #2
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a80 <_svfiprintf_r+0x1f4>
 80059c0:	7821      	ldrb	r1, [r4, #0]
 80059c2:	2203      	movs	r2, #3
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7fa fc2b 	bl	8000220 <memchr>
 80059ca:	b138      	cbz	r0, 80059dc <_svfiprintf_r+0x150>
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	eba0 000a 	sub.w	r0, r0, sl
 80059d2:	2240      	movs	r2, #64	@ 0x40
 80059d4:	4082      	lsls	r2, r0
 80059d6:	4313      	orrs	r3, r2
 80059d8:	3401      	adds	r4, #1
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	4824      	ldr	r0, [pc, #144]	@ (8005a74 <_svfiprintf_r+0x1e8>)
 80059e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059e6:	2206      	movs	r2, #6
 80059e8:	f7fa fc1a 	bl	8000220 <memchr>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d036      	beq.n	8005a5e <_svfiprintf_r+0x1d2>
 80059f0:	4b21      	ldr	r3, [pc, #132]	@ (8005a78 <_svfiprintf_r+0x1ec>)
 80059f2:	bb1b      	cbnz	r3, 8005a3c <_svfiprintf_r+0x1b0>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	3307      	adds	r3, #7
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	3308      	adds	r3, #8
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a02:	4433      	add	r3, r6
 8005a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a06:	e76a      	b.n	80058de <_svfiprintf_r+0x52>
 8005a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7a8      	b.n	8005964 <_svfiprintf_r+0xd8>
 8005a12:	2300      	movs	r3, #0
 8005a14:	3401      	adds	r4, #1
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 0c0a 	mov.w	ip, #10
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a24:	3a30      	subs	r2, #48	@ 0x30
 8005a26:	2a09      	cmp	r2, #9
 8005a28:	d903      	bls.n	8005a32 <_svfiprintf_r+0x1a6>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0c6      	beq.n	80059bc <_svfiprintf_r+0x130>
 8005a2e:	9105      	str	r1, [sp, #20]
 8005a30:	e7c4      	b.n	80059bc <_svfiprintf_r+0x130>
 8005a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a36:	4604      	mov	r4, r0
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e7f0      	b.n	8005a1e <_svfiprintf_r+0x192>
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4b0e      	ldr	r3, [pc, #56]	@ (8005a7c <_svfiprintf_r+0x1f0>)
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	4638      	mov	r0, r7
 8005a48:	f3af 8000 	nop.w
 8005a4c:	1c42      	adds	r2, r0, #1
 8005a4e:	4606      	mov	r6, r0
 8005a50:	d1d6      	bne.n	8005a00 <_svfiprintf_r+0x174>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	065b      	lsls	r3, r3, #25
 8005a56:	f53f af2d 	bmi.w	80058b4 <_svfiprintf_r+0x28>
 8005a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a5c:	e72c      	b.n	80058b8 <_svfiprintf_r+0x2c>
 8005a5e:	ab03      	add	r3, sp, #12
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <_svfiprintf_r+0x1f0>)
 8005a66:	a904      	add	r1, sp, #16
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f000 f9bb 	bl	8005de4 <_printf_i>
 8005a6e:	e7ed      	b.n	8005a4c <_svfiprintf_r+0x1c0>
 8005a70:	0800661c 	.word	0x0800661c
 8005a74:	08006626 	.word	0x08006626
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	080057d5 	.word	0x080057d5
 8005a80:	08006622 	.word	0x08006622

08005a84 <__sfputc_r>:
 8005a84:	6893      	ldr	r3, [r2, #8]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	b410      	push	{r4}
 8005a8c:	6093      	str	r3, [r2, #8]
 8005a8e:	da08      	bge.n	8005aa2 <__sfputc_r+0x1e>
 8005a90:	6994      	ldr	r4, [r2, #24]
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	db01      	blt.n	8005a9a <__sfputc_r+0x16>
 8005a96:	290a      	cmp	r1, #10
 8005a98:	d103      	bne.n	8005aa2 <__sfputc_r+0x1e>
 8005a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a9e:	f7ff bd1c 	b.w	80054da <__swbuf_r>
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	1c58      	adds	r0, r3, #1
 8005aa6:	6010      	str	r0, [r2, #0]
 8005aa8:	7019      	strb	r1, [r3, #0]
 8005aaa:	4608      	mov	r0, r1
 8005aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <__sfputs_r>:
 8005ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	18d5      	adds	r5, r2, r3
 8005abc:	42ac      	cmp	r4, r5
 8005abe:	d101      	bne.n	8005ac4 <__sfputs_r+0x12>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e007      	b.n	8005ad4 <__sfputs_r+0x22>
 8005ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac8:	463a      	mov	r2, r7
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ffda 	bl	8005a84 <__sfputc_r>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d1f3      	bne.n	8005abc <__sfputs_r+0xa>
 8005ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ad8 <_vfiprintf_r>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	460d      	mov	r5, r1
 8005ade:	b09d      	sub	sp, #116	@ 0x74
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	4698      	mov	r8, r3
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	b118      	cbz	r0, 8005af0 <_vfiprintf_r+0x18>
 8005ae8:	6a03      	ldr	r3, [r0, #32]
 8005aea:	b90b      	cbnz	r3, 8005af0 <_vfiprintf_r+0x18>
 8005aec:	f7ff fbec 	bl	80052c8 <__sinit>
 8005af0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005af2:	07d9      	lsls	r1, r3, #31
 8005af4:	d405      	bmi.n	8005b02 <_vfiprintf_r+0x2a>
 8005af6:	89ab      	ldrh	r3, [r5, #12]
 8005af8:	059a      	lsls	r2, r3, #22
 8005afa:	d402      	bmi.n	8005b02 <_vfiprintf_r+0x2a>
 8005afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005afe:	f7ff fe1c 	bl	800573a <__retarget_lock_acquire_recursive>
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	071b      	lsls	r3, r3, #28
 8005b06:	d501      	bpl.n	8005b0c <_vfiprintf_r+0x34>
 8005b08:	692b      	ldr	r3, [r5, #16]
 8005b0a:	b99b      	cbnz	r3, 8005b34 <_vfiprintf_r+0x5c>
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f7ff fd22 	bl	8005558 <__swsetup_r>
 8005b14:	b170      	cbz	r0, 8005b34 <_vfiprintf_r+0x5c>
 8005b16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b18:	07dc      	lsls	r4, r3, #31
 8005b1a:	d504      	bpl.n	8005b26 <_vfiprintf_r+0x4e>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	b01d      	add	sp, #116	@ 0x74
 8005b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b26:	89ab      	ldrh	r3, [r5, #12]
 8005b28:	0598      	lsls	r0, r3, #22
 8005b2a:	d4f7      	bmi.n	8005b1c <_vfiprintf_r+0x44>
 8005b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b2e:	f7ff fe05 	bl	800573c <__retarget_lock_release_recursive>
 8005b32:	e7f3      	b.n	8005b1c <_vfiprintf_r+0x44>
 8005b34:	2300      	movs	r3, #0
 8005b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b42:	2330      	movs	r3, #48	@ 0x30
 8005b44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cf4 <_vfiprintf_r+0x21c>
 8005b48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b4c:	f04f 0901 	mov.w	r9, #1
 8005b50:	4623      	mov	r3, r4
 8005b52:	469a      	mov	sl, r3
 8005b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b58:	b10a      	cbz	r2, 8005b5e <_vfiprintf_r+0x86>
 8005b5a:	2a25      	cmp	r2, #37	@ 0x25
 8005b5c:	d1f9      	bne.n	8005b52 <_vfiprintf_r+0x7a>
 8005b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b62:	d00b      	beq.n	8005b7c <_vfiprintf_r+0xa4>
 8005b64:	465b      	mov	r3, fp
 8005b66:	4622      	mov	r2, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ffa1 	bl	8005ab2 <__sfputs_r>
 8005b70:	3001      	adds	r0, #1
 8005b72:	f000 80a7 	beq.w	8005cc4 <_vfiprintf_r+0x1ec>
 8005b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b78:	445a      	add	r2, fp
 8005b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 809f 	beq.w	8005cc4 <_vfiprintf_r+0x1ec>
 8005b86:	2300      	movs	r3, #0
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b90:	f10a 0a01 	add.w	sl, sl, #1
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	9307      	str	r3, [sp, #28]
 8005b98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b9e:	4654      	mov	r4, sl
 8005ba0:	2205      	movs	r2, #5
 8005ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba6:	4853      	ldr	r0, [pc, #332]	@ (8005cf4 <_vfiprintf_r+0x21c>)
 8005ba8:	f7fa fb3a 	bl	8000220 <memchr>
 8005bac:	9a04      	ldr	r2, [sp, #16]
 8005bae:	b9d8      	cbnz	r0, 8005be8 <_vfiprintf_r+0x110>
 8005bb0:	06d1      	lsls	r1, r2, #27
 8005bb2:	bf44      	itt	mi
 8005bb4:	2320      	movmi	r3, #32
 8005bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bba:	0713      	lsls	r3, r2, #28
 8005bbc:	bf44      	itt	mi
 8005bbe:	232b      	movmi	r3, #43	@ 0x2b
 8005bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bca:	d015      	beq.n	8005bf8 <_vfiprintf_r+0x120>
 8005bcc:	9a07      	ldr	r2, [sp, #28]
 8005bce:	4654      	mov	r4, sl
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f04f 0c0a 	mov.w	ip, #10
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bdc:	3b30      	subs	r3, #48	@ 0x30
 8005bde:	2b09      	cmp	r3, #9
 8005be0:	d94b      	bls.n	8005c7a <_vfiprintf_r+0x1a2>
 8005be2:	b1b0      	cbz	r0, 8005c12 <_vfiprintf_r+0x13a>
 8005be4:	9207      	str	r2, [sp, #28]
 8005be6:	e014      	b.n	8005c12 <_vfiprintf_r+0x13a>
 8005be8:	eba0 0308 	sub.w	r3, r0, r8
 8005bec:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	46a2      	mov	sl, r4
 8005bf6:	e7d2      	b.n	8005b9e <_vfiprintf_r+0xc6>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	1d19      	adds	r1, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	9103      	str	r1, [sp, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfbb      	ittet	lt
 8005c04:	425b      	neglt	r3, r3
 8005c06:	f042 0202 	orrlt.w	r2, r2, #2
 8005c0a:	9307      	strge	r3, [sp, #28]
 8005c0c:	9307      	strlt	r3, [sp, #28]
 8005c0e:	bfb8      	it	lt
 8005c10:	9204      	strlt	r2, [sp, #16]
 8005c12:	7823      	ldrb	r3, [r4, #0]
 8005c14:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c16:	d10a      	bne.n	8005c2e <_vfiprintf_r+0x156>
 8005c18:	7863      	ldrb	r3, [r4, #1]
 8005c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c1c:	d132      	bne.n	8005c84 <_vfiprintf_r+0x1ac>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	1d1a      	adds	r2, r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	9203      	str	r2, [sp, #12]
 8005c26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c2a:	3402      	adds	r4, #2
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d04 <_vfiprintf_r+0x22c>
 8005c32:	7821      	ldrb	r1, [r4, #0]
 8005c34:	2203      	movs	r2, #3
 8005c36:	4650      	mov	r0, sl
 8005c38:	f7fa faf2 	bl	8000220 <memchr>
 8005c3c:	b138      	cbz	r0, 8005c4e <_vfiprintf_r+0x176>
 8005c3e:	9b04      	ldr	r3, [sp, #16]
 8005c40:	eba0 000a 	sub.w	r0, r0, sl
 8005c44:	2240      	movs	r2, #64	@ 0x40
 8005c46:	4082      	lsls	r2, r0
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c52:	4829      	ldr	r0, [pc, #164]	@ (8005cf8 <_vfiprintf_r+0x220>)
 8005c54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c58:	2206      	movs	r2, #6
 8005c5a:	f7fa fae1 	bl	8000220 <memchr>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d03f      	beq.n	8005ce2 <_vfiprintf_r+0x20a>
 8005c62:	4b26      	ldr	r3, [pc, #152]	@ (8005cfc <_vfiprintf_r+0x224>)
 8005c64:	bb1b      	cbnz	r3, 8005cae <_vfiprintf_r+0x1d6>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	3308      	adds	r3, #8
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c74:	443b      	add	r3, r7
 8005c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c78:	e76a      	b.n	8005b50 <_vfiprintf_r+0x78>
 8005c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c7e:	460c      	mov	r4, r1
 8005c80:	2001      	movs	r0, #1
 8005c82:	e7a8      	b.n	8005bd6 <_vfiprintf_r+0xfe>
 8005c84:	2300      	movs	r3, #0
 8005c86:	3401      	adds	r4, #1
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f04f 0c0a 	mov.w	ip, #10
 8005c90:	4620      	mov	r0, r4
 8005c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c96:	3a30      	subs	r2, #48	@ 0x30
 8005c98:	2a09      	cmp	r2, #9
 8005c9a:	d903      	bls.n	8005ca4 <_vfiprintf_r+0x1cc>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0c6      	beq.n	8005c2e <_vfiprintf_r+0x156>
 8005ca0:	9105      	str	r1, [sp, #20]
 8005ca2:	e7c4      	b.n	8005c2e <_vfiprintf_r+0x156>
 8005ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ca8:	4604      	mov	r4, r0
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f0      	b.n	8005c90 <_vfiprintf_r+0x1b8>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4b12      	ldr	r3, [pc, #72]	@ (8005d00 <_vfiprintf_r+0x228>)
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f3af 8000 	nop.w
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	1c78      	adds	r0, r7, #1
 8005cc2:	d1d6      	bne.n	8005c72 <_vfiprintf_r+0x19a>
 8005cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cc6:	07d9      	lsls	r1, r3, #31
 8005cc8:	d405      	bmi.n	8005cd6 <_vfiprintf_r+0x1fe>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_vfiprintf_r+0x1fe>
 8005cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cd2:	f7ff fd33 	bl	800573c <__retarget_lock_release_recursive>
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	065b      	lsls	r3, r3, #25
 8005cda:	f53f af1f 	bmi.w	8005b1c <_vfiprintf_r+0x44>
 8005cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ce0:	e71e      	b.n	8005b20 <_vfiprintf_r+0x48>
 8005ce2:	ab03      	add	r3, sp, #12
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4b05      	ldr	r3, [pc, #20]	@ (8005d00 <_vfiprintf_r+0x228>)
 8005cea:	a904      	add	r1, sp, #16
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f879 	bl	8005de4 <_printf_i>
 8005cf2:	e7e4      	b.n	8005cbe <_vfiprintf_r+0x1e6>
 8005cf4:	0800661c 	.word	0x0800661c
 8005cf8:	08006626 	.word	0x08006626
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005ab3 	.word	0x08005ab3
 8005d04:	08006622 	.word	0x08006622

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4698      	mov	r8, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfb8      	it	lt
 8005d1c:	4613      	movlt	r3, r2
 8005d1e:	6033      	str	r3, [r6, #0]
 8005d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d24:	4607      	mov	r7, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	b10a      	cbz	r2, 8005d2e <_printf_common+0x26>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	6833      	ldrmi	r3, [r6, #0]
 8005d36:	3302      	addmi	r3, #2
 8005d38:	6033      	strmi	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	f015 0506 	ands.w	r5, r5, #6
 8005d40:	d106      	bne.n	8005d50 <_printf_common+0x48>
 8005d42:	f104 0a19 	add.w	sl, r4, #25
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dc26      	bgt.n	8005d9e <_printf_common+0x96>
 8005d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	3b00      	subs	r3, #0
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	0692      	lsls	r2, r2, #26
 8005d5e:	d42b      	bmi.n	8005db8 <_printf_common+0xb0>
 8005d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d64:	4641      	mov	r1, r8
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c8      	blx	r9
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d01e      	beq.n	8005dac <_printf_common+0xa4>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	f003 0306 	and.w	r3, r3, #6
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	bf02      	ittt	eq
 8005d7a:	68e5      	ldreq	r5, [r4, #12]
 8005d7c:	6833      	ldreq	r3, [r6, #0]
 8005d7e:	1aed      	subeq	r5, r5, r3
 8005d80:	68a3      	ldr	r3, [r4, #8]
 8005d82:	bf0c      	ite	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	2500      	movne	r5, #0
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bfc4      	itt	gt
 8005d8e:	1a9b      	subgt	r3, r3, r2
 8005d90:	18ed      	addgt	r5, r5, r3
 8005d92:	2600      	movs	r6, #0
 8005d94:	341a      	adds	r4, #26
 8005d96:	42b5      	cmp	r5, r6
 8005d98:	d11a      	bne.n	8005dd0 <_printf_common+0xc8>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e008      	b.n	8005db0 <_printf_common+0xa8>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4652      	mov	r2, sl
 8005da2:	4641      	mov	r1, r8
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c8      	blx	r9
 8005da8:	3001      	adds	r0, #1
 8005daa:	d103      	bne.n	8005db4 <_printf_common+0xac>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7c6      	b.n	8005d46 <_printf_common+0x3e>
 8005db8:	18e1      	adds	r1, r4, r3
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	2030      	movs	r0, #48	@ 0x30
 8005dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dc2:	4422      	add	r2, r4
 8005dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dcc:	3302      	adds	r3, #2
 8005dce:	e7c7      	b.n	8005d60 <_printf_common+0x58>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c8      	blx	r9
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d0e6      	beq.n	8005dac <_printf_common+0xa4>
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7d9      	b.n	8005d96 <_printf_common+0x8e>
	...

08005de4 <_printf_i>:
 8005de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	7e0f      	ldrb	r7, [r1, #24]
 8005dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dec:	2f78      	cmp	r7, #120	@ 0x78
 8005dee:	4691      	mov	r9, r2
 8005df0:	4680      	mov	r8, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	469a      	mov	sl, r3
 8005df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dfa:	d807      	bhi.n	8005e0c <_printf_i+0x28>
 8005dfc:	2f62      	cmp	r7, #98	@ 0x62
 8005dfe:	d80a      	bhi.n	8005e16 <_printf_i+0x32>
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	f000 80d2 	beq.w	8005faa <_printf_i+0x1c6>
 8005e06:	2f58      	cmp	r7, #88	@ 0x58
 8005e08:	f000 80b9 	beq.w	8005f7e <_printf_i+0x19a>
 8005e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e14:	e03a      	b.n	8005e8c <_printf_i+0xa8>
 8005e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e1a:	2b15      	cmp	r3, #21
 8005e1c:	d8f6      	bhi.n	8005e0c <_printf_i+0x28>
 8005e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e24 <_printf_i+0x40>)
 8005e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e0d 	.word	0x08005e0d
 8005e30:	08005e0d 	.word	0x08005e0d
 8005e34:	08005e0d 	.word	0x08005e0d
 8005e38:	08005e0d 	.word	0x08005e0d
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e0d 	.word	0x08005e0d
 8005e44:	08005e0d 	.word	0x08005e0d
 8005e48:	08005e0d 	.word	0x08005e0d
 8005e4c:	08005e0d 	.word	0x08005e0d
 8005e50:	08005f91 	.word	0x08005f91
 8005e54:	08005ebb 	.word	0x08005ebb
 8005e58:	08005f4b 	.word	0x08005f4b
 8005e5c:	08005e0d 	.word	0x08005e0d
 8005e60:	08005e0d 	.word	0x08005e0d
 8005e64:	08005fb3 	.word	0x08005fb3
 8005e68:	08005e0d 	.word	0x08005e0d
 8005e6c:	08005ebb 	.word	0x08005ebb
 8005e70:	08005e0d 	.word	0x08005e0d
 8005e74:	08005e0d 	.word	0x08005e0d
 8005e78:	08005f53 	.word	0x08005f53
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6032      	str	r2, [r6, #0]
 8005e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e09d      	b.n	8005fcc <_printf_i+0x1e8>
 8005e90:	6833      	ldr	r3, [r6, #0]
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	1d19      	adds	r1, r3, #4
 8005e96:	6031      	str	r1, [r6, #0]
 8005e98:	0606      	lsls	r6, r0, #24
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0xbc>
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	e003      	b.n	8005ea8 <_printf_i+0xc4>
 8005ea0:	0645      	lsls	r5, r0, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0xb8>
 8005ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	da03      	bge.n	8005eb4 <_printf_i+0xd0>
 8005eac:	232d      	movs	r3, #45	@ 0x2d
 8005eae:	426d      	negs	r5, r5
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb4:	4859      	ldr	r0, [pc, #356]	@ (800601c <_printf_i+0x238>)
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	e011      	b.n	8005ede <_printf_i+0xfa>
 8005eba:	6821      	ldr	r1, [r4, #0]
 8005ebc:	6833      	ldr	r3, [r6, #0]
 8005ebe:	0608      	lsls	r0, r1, #24
 8005ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ec4:	d402      	bmi.n	8005ecc <_printf_i+0xe8>
 8005ec6:	0649      	lsls	r1, r1, #25
 8005ec8:	bf48      	it	mi
 8005eca:	b2ad      	uxthmi	r5, r5
 8005ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ece:	4853      	ldr	r0, [pc, #332]	@ (800601c <_printf_i+0x238>)
 8005ed0:	6033      	str	r3, [r6, #0]
 8005ed2:	bf14      	ite	ne
 8005ed4:	230a      	movne	r3, #10
 8005ed6:	2308      	moveq	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ede:	6866      	ldr	r6, [r4, #4]
 8005ee0:	60a6      	str	r6, [r4, #8]
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	bfa2      	ittt	ge
 8005ee6:	6821      	ldrge	r1, [r4, #0]
 8005ee8:	f021 0104 	bicge.w	r1, r1, #4
 8005eec:	6021      	strge	r1, [r4, #0]
 8005eee:	b90d      	cbnz	r5, 8005ef4 <_printf_i+0x110>
 8005ef0:	2e00      	cmp	r6, #0
 8005ef2:	d04b      	beq.n	8005f8c <_printf_i+0x1a8>
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005efa:	fb03 5711 	mls	r7, r3, r1, r5
 8005efe:	5dc7      	ldrb	r7, [r0, r7]
 8005f00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f04:	462f      	mov	r7, r5
 8005f06:	42bb      	cmp	r3, r7
 8005f08:	460d      	mov	r5, r1
 8005f0a:	d9f4      	bls.n	8005ef6 <_printf_i+0x112>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d10b      	bne.n	8005f28 <_printf_i+0x144>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07df      	lsls	r7, r3, #31
 8005f14:	d508      	bpl.n	8005f28 <_printf_i+0x144>
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	6861      	ldr	r1, [r4, #4]
 8005f1a:	4299      	cmp	r1, r3
 8005f1c:	bfde      	ittt	le
 8005f1e:	2330      	movle	r3, #48	@ 0x30
 8005f20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f28:	1b92      	subs	r2, r2, r6
 8005f2a:	6122      	str	r2, [r4, #16]
 8005f2c:	f8cd a000 	str.w	sl, [sp]
 8005f30:	464b      	mov	r3, r9
 8005f32:	aa03      	add	r2, sp, #12
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff fee6 	bl	8005d08 <_printf_common>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d14a      	bne.n	8005fd6 <_printf_i+0x1f2>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	b004      	add	sp, #16
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	f043 0320 	orr.w	r3, r3, #32
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	4833      	ldr	r0, [pc, #204]	@ (8006020 <_printf_i+0x23c>)
 8005f54:	2778      	movs	r7, #120	@ 0x78
 8005f56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	6831      	ldr	r1, [r6, #0]
 8005f5e:	061f      	lsls	r7, r3, #24
 8005f60:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f64:	d402      	bmi.n	8005f6c <_printf_i+0x188>
 8005f66:	065f      	lsls	r7, r3, #25
 8005f68:	bf48      	it	mi
 8005f6a:	b2ad      	uxthmi	r5, r5
 8005f6c:	6031      	str	r1, [r6, #0]
 8005f6e:	07d9      	lsls	r1, r3, #31
 8005f70:	bf44      	itt	mi
 8005f72:	f043 0320 	orrmi.w	r3, r3, #32
 8005f76:	6023      	strmi	r3, [r4, #0]
 8005f78:	b11d      	cbz	r5, 8005f82 <_printf_i+0x19e>
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	e7ac      	b.n	8005ed8 <_printf_i+0xf4>
 8005f7e:	4827      	ldr	r0, [pc, #156]	@ (800601c <_printf_i+0x238>)
 8005f80:	e7e9      	b.n	8005f56 <_printf_i+0x172>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	f023 0320 	bic.w	r3, r3, #32
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	e7f6      	b.n	8005f7a <_printf_i+0x196>
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	e7bd      	b.n	8005f0c <_printf_i+0x128>
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	6825      	ldr	r5, [r4, #0]
 8005f94:	6961      	ldr	r1, [r4, #20]
 8005f96:	1d18      	adds	r0, r3, #4
 8005f98:	6030      	str	r0, [r6, #0]
 8005f9a:	062e      	lsls	r6, r5, #24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	d501      	bpl.n	8005fa4 <_printf_i+0x1c0>
 8005fa0:	6019      	str	r1, [r3, #0]
 8005fa2:	e002      	b.n	8005faa <_printf_i+0x1c6>
 8005fa4:	0668      	lsls	r0, r5, #25
 8005fa6:	d5fb      	bpl.n	8005fa0 <_printf_i+0x1bc>
 8005fa8:	8019      	strh	r1, [r3, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	4616      	mov	r6, r2
 8005fb0:	e7bc      	b.n	8005f2c <_printf_i+0x148>
 8005fb2:	6833      	ldr	r3, [r6, #0]
 8005fb4:	1d1a      	adds	r2, r3, #4
 8005fb6:	6032      	str	r2, [r6, #0]
 8005fb8:	681e      	ldr	r6, [r3, #0]
 8005fba:	6862      	ldr	r2, [r4, #4]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7fa f92e 	bl	8000220 <memchr>
 8005fc4:	b108      	cbz	r0, 8005fca <_printf_i+0x1e6>
 8005fc6:	1b80      	subs	r0, r0, r6
 8005fc8:	6060      	str	r0, [r4, #4]
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd4:	e7aa      	b.n	8005f2c <_printf_i+0x148>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4640      	mov	r0, r8
 8005fde:	47d0      	blx	sl
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d0ad      	beq.n	8005f40 <_printf_i+0x15c>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	079b      	lsls	r3, r3, #30
 8005fe8:	d413      	bmi.n	8006012 <_printf_i+0x22e>
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	bfb8      	it	lt
 8005ff2:	4618      	movlt	r0, r3
 8005ff4:	e7a6      	b.n	8005f44 <_printf_i+0x160>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	47d0      	blx	sl
 8006000:	3001      	adds	r0, #1
 8006002:	d09d      	beq.n	8005f40 <_printf_i+0x15c>
 8006004:	3501      	adds	r5, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	9903      	ldr	r1, [sp, #12]
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	42ab      	cmp	r3, r5
 800600e:	dcf2      	bgt.n	8005ff6 <_printf_i+0x212>
 8006010:	e7eb      	b.n	8005fea <_printf_i+0x206>
 8006012:	2500      	movs	r5, #0
 8006014:	f104 0619 	add.w	r6, r4, #25
 8006018:	e7f5      	b.n	8006006 <_printf_i+0x222>
 800601a:	bf00      	nop
 800601c:	0800662d 	.word	0x0800662d
 8006020:	0800663e 	.word	0x0800663e

08006024 <__sflush_r>:
 8006024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602c:	0716      	lsls	r6, r2, #28
 800602e:	4605      	mov	r5, r0
 8006030:	460c      	mov	r4, r1
 8006032:	d454      	bmi.n	80060de <__sflush_r+0xba>
 8006034:	684b      	ldr	r3, [r1, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dc02      	bgt.n	8006040 <__sflush_r+0x1c>
 800603a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	dd48      	ble.n	80060d2 <__sflush_r+0xae>
 8006040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006042:	2e00      	cmp	r6, #0
 8006044:	d045      	beq.n	80060d2 <__sflush_r+0xae>
 8006046:	2300      	movs	r3, #0
 8006048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800604c:	682f      	ldr	r7, [r5, #0]
 800604e:	6a21      	ldr	r1, [r4, #32]
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	d030      	beq.n	80060b6 <__sflush_r+0x92>
 8006054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	0759      	lsls	r1, r3, #29
 800605a:	d505      	bpl.n	8006068 <__sflush_r+0x44>
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006062:	b10b      	cbz	r3, 8006068 <__sflush_r+0x44>
 8006064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	2300      	movs	r3, #0
 800606a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800606c:	6a21      	ldr	r1, [r4, #32]
 800606e:	4628      	mov	r0, r5
 8006070:	47b0      	blx	r6
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	d106      	bne.n	8006086 <__sflush_r+0x62>
 8006078:	6829      	ldr	r1, [r5, #0]
 800607a:	291d      	cmp	r1, #29
 800607c:	d82b      	bhi.n	80060d6 <__sflush_r+0xb2>
 800607e:	4a2a      	ldr	r2, [pc, #168]	@ (8006128 <__sflush_r+0x104>)
 8006080:	410a      	asrs	r2, r1
 8006082:	07d6      	lsls	r6, r2, #31
 8006084:	d427      	bmi.n	80060d6 <__sflush_r+0xb2>
 8006086:	2200      	movs	r2, #0
 8006088:	6062      	str	r2, [r4, #4]
 800608a:	04d9      	lsls	r1, r3, #19
 800608c:	6922      	ldr	r2, [r4, #16]
 800608e:	6022      	str	r2, [r4, #0]
 8006090:	d504      	bpl.n	800609c <__sflush_r+0x78>
 8006092:	1c42      	adds	r2, r0, #1
 8006094:	d101      	bne.n	800609a <__sflush_r+0x76>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	b903      	cbnz	r3, 800609c <__sflush_r+0x78>
 800609a:	6560      	str	r0, [r4, #84]	@ 0x54
 800609c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800609e:	602f      	str	r7, [r5, #0]
 80060a0:	b1b9      	cbz	r1, 80060d2 <__sflush_r+0xae>
 80060a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060a6:	4299      	cmp	r1, r3
 80060a8:	d002      	beq.n	80060b0 <__sflush_r+0x8c>
 80060aa:	4628      	mov	r0, r5
 80060ac:	f7ff fb48 	bl	8005740 <_free_r>
 80060b0:	2300      	movs	r3, #0
 80060b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80060b4:	e00d      	b.n	80060d2 <__sflush_r+0xae>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b0      	blx	r6
 80060bc:	4602      	mov	r2, r0
 80060be:	1c50      	adds	r0, r2, #1
 80060c0:	d1c9      	bne.n	8006056 <__sflush_r+0x32>
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0c6      	beq.n	8006056 <__sflush_r+0x32>
 80060c8:	2b1d      	cmp	r3, #29
 80060ca:	d001      	beq.n	80060d0 <__sflush_r+0xac>
 80060cc:	2b16      	cmp	r3, #22
 80060ce:	d11e      	bne.n	800610e <__sflush_r+0xea>
 80060d0:	602f      	str	r7, [r5, #0]
 80060d2:	2000      	movs	r0, #0
 80060d4:	e022      	b.n	800611c <__sflush_r+0xf8>
 80060d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060da:	b21b      	sxth	r3, r3
 80060dc:	e01b      	b.n	8006116 <__sflush_r+0xf2>
 80060de:	690f      	ldr	r7, [r1, #16]
 80060e0:	2f00      	cmp	r7, #0
 80060e2:	d0f6      	beq.n	80060d2 <__sflush_r+0xae>
 80060e4:	0793      	lsls	r3, r2, #30
 80060e6:	680e      	ldr	r6, [r1, #0]
 80060e8:	bf08      	it	eq
 80060ea:	694b      	ldreq	r3, [r1, #20]
 80060ec:	600f      	str	r7, [r1, #0]
 80060ee:	bf18      	it	ne
 80060f0:	2300      	movne	r3, #0
 80060f2:	eba6 0807 	sub.w	r8, r6, r7
 80060f6:	608b      	str	r3, [r1, #8]
 80060f8:	f1b8 0f00 	cmp.w	r8, #0
 80060fc:	dde9      	ble.n	80060d2 <__sflush_r+0xae>
 80060fe:	6a21      	ldr	r1, [r4, #32]
 8006100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006102:	4643      	mov	r3, r8
 8006104:	463a      	mov	r2, r7
 8006106:	4628      	mov	r0, r5
 8006108:	47b0      	blx	r6
 800610a:	2800      	cmp	r0, #0
 800610c:	dc08      	bgt.n	8006120 <__sflush_r+0xfc>
 800610e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	4407      	add	r7, r0
 8006122:	eba8 0800 	sub.w	r8, r8, r0
 8006126:	e7e7      	b.n	80060f8 <__sflush_r+0xd4>
 8006128:	dfbffffe 	.word	0xdfbffffe

0800612c <_fflush_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	690b      	ldr	r3, [r1, #16]
 8006130:	4605      	mov	r5, r0
 8006132:	460c      	mov	r4, r1
 8006134:	b913      	cbnz	r3, 800613c <_fflush_r+0x10>
 8006136:	2500      	movs	r5, #0
 8006138:	4628      	mov	r0, r5
 800613a:	bd38      	pop	{r3, r4, r5, pc}
 800613c:	b118      	cbz	r0, 8006146 <_fflush_r+0x1a>
 800613e:	6a03      	ldr	r3, [r0, #32]
 8006140:	b90b      	cbnz	r3, 8006146 <_fflush_r+0x1a>
 8006142:	f7ff f8c1 	bl	80052c8 <__sinit>
 8006146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0f3      	beq.n	8006136 <_fflush_r+0xa>
 800614e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006150:	07d0      	lsls	r0, r2, #31
 8006152:	d404      	bmi.n	800615e <_fflush_r+0x32>
 8006154:	0599      	lsls	r1, r3, #22
 8006156:	d402      	bmi.n	800615e <_fflush_r+0x32>
 8006158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800615a:	f7ff faee 	bl	800573a <__retarget_lock_acquire_recursive>
 800615e:	4628      	mov	r0, r5
 8006160:	4621      	mov	r1, r4
 8006162:	f7ff ff5f 	bl	8006024 <__sflush_r>
 8006166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006168:	07da      	lsls	r2, r3, #31
 800616a:	4605      	mov	r5, r0
 800616c:	d4e4      	bmi.n	8006138 <_fflush_r+0xc>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	059b      	lsls	r3, r3, #22
 8006172:	d4e1      	bmi.n	8006138 <_fflush_r+0xc>
 8006174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006176:	f7ff fae1 	bl	800573c <__retarget_lock_release_recursive>
 800617a:	e7dd      	b.n	8006138 <_fflush_r+0xc>

0800617c <__swhatbuf_r>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	460c      	mov	r4, r1
 8006180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006184:	2900      	cmp	r1, #0
 8006186:	b096      	sub	sp, #88	@ 0x58
 8006188:	4615      	mov	r5, r2
 800618a:	461e      	mov	r6, r3
 800618c:	da0d      	bge.n	80061aa <__swhatbuf_r+0x2e>
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006194:	f04f 0100 	mov.w	r1, #0
 8006198:	bf14      	ite	ne
 800619a:	2340      	movne	r3, #64	@ 0x40
 800619c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061a0:	2000      	movs	r0, #0
 80061a2:	6031      	str	r1, [r6, #0]
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	b016      	add	sp, #88	@ 0x58
 80061a8:	bd70      	pop	{r4, r5, r6, pc}
 80061aa:	466a      	mov	r2, sp
 80061ac:	f000 f862 	bl	8006274 <_fstat_r>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	dbec      	blt.n	800618e <__swhatbuf_r+0x12>
 80061b4:	9901      	ldr	r1, [sp, #4]
 80061b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061be:	4259      	negs	r1, r3
 80061c0:	4159      	adcs	r1, r3
 80061c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061c6:	e7eb      	b.n	80061a0 <__swhatbuf_r+0x24>

080061c8 <__smakebuf_r>:
 80061c8:	898b      	ldrh	r3, [r1, #12]
 80061ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061cc:	079d      	lsls	r5, r3, #30
 80061ce:	4606      	mov	r6, r0
 80061d0:	460c      	mov	r4, r1
 80061d2:	d507      	bpl.n	80061e4 <__smakebuf_r+0x1c>
 80061d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	2301      	movs	r3, #1
 80061de:	6163      	str	r3, [r4, #20]
 80061e0:	b003      	add	sp, #12
 80061e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e4:	ab01      	add	r3, sp, #4
 80061e6:	466a      	mov	r2, sp
 80061e8:	f7ff ffc8 	bl	800617c <__swhatbuf_r>
 80061ec:	9f00      	ldr	r7, [sp, #0]
 80061ee:	4605      	mov	r5, r0
 80061f0:	4639      	mov	r1, r7
 80061f2:	4630      	mov	r0, r6
 80061f4:	f7fe ff50 	bl	8005098 <_malloc_r>
 80061f8:	b948      	cbnz	r0, 800620e <__smakebuf_r+0x46>
 80061fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061fe:	059a      	lsls	r2, r3, #22
 8006200:	d4ee      	bmi.n	80061e0 <__smakebuf_r+0x18>
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	f043 0302 	orr.w	r3, r3, #2
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	e7e2      	b.n	80061d4 <__smakebuf_r+0xc>
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	6020      	str	r0, [r4, #0]
 8006212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800621e:	b15b      	cbz	r3, 8006238 <__smakebuf_r+0x70>
 8006220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006224:	4630      	mov	r0, r6
 8006226:	f000 f837 	bl	8006298 <_isatty_r>
 800622a:	b128      	cbz	r0, 8006238 <__smakebuf_r+0x70>
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	431d      	orrs	r5, r3
 800623c:	81a5      	strh	r5, [r4, #12]
 800623e:	e7cf      	b.n	80061e0 <__smakebuf_r+0x18>

08006240 <memmove>:
 8006240:	4288      	cmp	r0, r1
 8006242:	b510      	push	{r4, lr}
 8006244:	eb01 0402 	add.w	r4, r1, r2
 8006248:	d902      	bls.n	8006250 <memmove+0x10>
 800624a:	4284      	cmp	r4, r0
 800624c:	4623      	mov	r3, r4
 800624e:	d807      	bhi.n	8006260 <memmove+0x20>
 8006250:	1e43      	subs	r3, r0, #1
 8006252:	42a1      	cmp	r1, r4
 8006254:	d008      	beq.n	8006268 <memmove+0x28>
 8006256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800625a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800625e:	e7f8      	b.n	8006252 <memmove+0x12>
 8006260:	4402      	add	r2, r0
 8006262:	4601      	mov	r1, r0
 8006264:	428a      	cmp	r2, r1
 8006266:	d100      	bne.n	800626a <memmove+0x2a>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800626e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006272:	e7f7      	b.n	8006264 <memmove+0x24>

08006274 <_fstat_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d07      	ldr	r5, [pc, #28]	@ (8006294 <_fstat_r+0x20>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	f7fb f934 	bl	80014ee <_fstat>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	d102      	bne.n	8006290 <_fstat_r+0x1c>
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	b103      	cbz	r3, 8006290 <_fstat_r+0x1c>
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	bf00      	nop
 8006294:	20000424 	.word	0x20000424

08006298 <_isatty_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d06      	ldr	r5, [pc, #24]	@ (80062b4 <_isatty_r+0x1c>)
 800629c:	2300      	movs	r3, #0
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	f7fb f933 	bl	800150e <_isatty>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_isatty_r+0x1a>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_isatty_r+0x1a>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	20000424 	.word	0x20000424

080062b8 <memcpy>:
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c0:	d100      	bne.n	80062c4 <memcpy+0xc>
 80062c2:	4770      	bx	lr
 80062c4:	b510      	push	{r4, lr}
 80062c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d1f9      	bne.n	80062c6 <memcpy+0xe>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <_realloc_r>:
 80062d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d8:	4680      	mov	r8, r0
 80062da:	4615      	mov	r5, r2
 80062dc:	460c      	mov	r4, r1
 80062de:	b921      	cbnz	r1, 80062ea <_realloc_r+0x16>
 80062e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	4611      	mov	r1, r2
 80062e6:	f7fe bed7 	b.w	8005098 <_malloc_r>
 80062ea:	b92a      	cbnz	r2, 80062f8 <_realloc_r+0x24>
 80062ec:	f7ff fa28 	bl	8005740 <_free_r>
 80062f0:	2400      	movs	r4, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f8:	f000 f81a 	bl	8006330 <_malloc_usable_size_r>
 80062fc:	4285      	cmp	r5, r0
 80062fe:	4606      	mov	r6, r0
 8006300:	d802      	bhi.n	8006308 <_realloc_r+0x34>
 8006302:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006306:	d8f4      	bhi.n	80062f2 <_realloc_r+0x1e>
 8006308:	4629      	mov	r1, r5
 800630a:	4640      	mov	r0, r8
 800630c:	f7fe fec4 	bl	8005098 <_malloc_r>
 8006310:	4607      	mov	r7, r0
 8006312:	2800      	cmp	r0, #0
 8006314:	d0ec      	beq.n	80062f0 <_realloc_r+0x1c>
 8006316:	42b5      	cmp	r5, r6
 8006318:	462a      	mov	r2, r5
 800631a:	4621      	mov	r1, r4
 800631c:	bf28      	it	cs
 800631e:	4632      	movcs	r2, r6
 8006320:	f7ff ffca 	bl	80062b8 <memcpy>
 8006324:	4621      	mov	r1, r4
 8006326:	4640      	mov	r0, r8
 8006328:	f7ff fa0a 	bl	8005740 <_free_r>
 800632c:	463c      	mov	r4, r7
 800632e:	e7e0      	b.n	80062f2 <_realloc_r+0x1e>

08006330 <_malloc_usable_size_r>:
 8006330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006334:	1f18      	subs	r0, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfbc      	itt	lt
 800633a:	580b      	ldrlt	r3, [r1, r0]
 800633c:	18c0      	addlt	r0, r0, r3
 800633e:	4770      	bx	lr

08006340 <_init>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr

0800634c <_fini>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	bf00      	nop
 8006350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006352:	bc08      	pop	{r3}
 8006354:	469e      	mov	lr, r3
 8006356:	4770      	bx	lr
