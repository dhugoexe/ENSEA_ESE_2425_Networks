
TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006294  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006464  08006464  00007464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006818  08006818  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006820  08006820  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006828  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000070  08006898  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006898  00008380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb08  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a01  00000000  00000000  00017ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f4  00000000  00000000  0001b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023981  00000000  00000000  0001bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129b9  00000000  00000000  0003f60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d012e  00000000  00000000  00051fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001220f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  00122138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00125f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800644c 	.word	0x0800644c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800644c 	.word	0x0800644c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <BMP280_Temperateur>:
int16_t dig_P9;

int32_t t_fine;


int32_t BMP280_Temperateur() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
	uint8_t *buffer;
	uint8_t registre = 0xFA;
 80005b6:	23fa      	movs	r3, #250	@ 0xfa
 80005b8:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, &registre, 1, HAL_MAX_DELAY) != 0) {
 80005ba:	23ee      	movs	r3, #238	@ 0xee
 80005bc:	4619      	mov	r1, r3
 80005be:	1cfa      	adds	r2, r7, #3
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4825      	ldr	r0, [pc, #148]	@ (8000660 <BMP280_Temperateur+0xb0>)
 80005ca:	f002 f8b1 	bl	8002730 <HAL_I2C_Master_Transmit>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <BMP280_Temperateur+0x2a>
			printf("Problem in Transmition I2C\r\n");
 80005d4:	4823      	ldr	r0, [pc, #140]	@ (8000664 <BMP280_Temperateur+0xb4>)
 80005d6:	f004 ff87 	bl	80054e8 <puts>
		}

		buffer = (uint8_t*) malloc(3);
 80005da:	2003      	movs	r0, #3
 80005dc:	f004 fd9c 	bl	8005118 <malloc>
 80005e0:	4603      	mov	r3, r0
 80005e2:	607b      	str	r3, [r7, #4]
		if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer, 3, HAL_MAX_DELAY) != 0) {
 80005e4:	23ee      	movs	r3, #238	@ 0xee
 80005e6:	4619      	mov	r1, r3
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2303      	movs	r3, #3
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <BMP280_Temperateur+0xb0>)
 80005f4:	f002 f99a 	bl	800292c <HAL_I2C_Master_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <BMP280_Temperateur+0x54>
			printf("Problem in Reciption I2C\r\n");
 80005fe:	481a      	ldr	r0, [pc, #104]	@ (8000668 <BMP280_Temperateur+0xb8>)
 8000600:	f004 ff72 	bl	80054e8 <puts>
		}

	NONcompensateTemperateur = ((int32_t) (buffer[0]) << 12) | ((int32_t) (buffer[1]) << 4) | ((int32_t) (buffer[2]) >> 4);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	031a      	lsls	r2, r3, #12
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	4313      	orrs	r3, r2
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	3202      	adds	r2, #2
 8000618:	7812      	ldrb	r2, [r2, #0]
 800061a:	0912      	lsrs	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	4313      	orrs	r3, r2
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <BMP280_Temperateur+0xbc>)
 8000622:	6013      	str	r3, [r2, #0]
	compensateTemperateur =bmp280_compensate_T_int32(NONcompensateTemperateur);
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <BMP280_Temperateur+0xbc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f88d 	bl	8000748 <bmp280_compensate_T_int32>
 800062e:	4603      	mov	r3, r0
 8000630:	4a0f      	ldr	r2, [pc, #60]	@ (8000670 <BMP280_Temperateur+0xc0>)
 8000632:	6013      	str	r3, [r2, #0]
	free(buffer);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f004 fd77 	bl	8005128 <free>

	    printf("TemperatureNonCompens: %ld \r\n" , NONcompensateTemperateur);
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <BMP280_Temperateur+0xbc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	@ (8000674 <BMP280_Temperateur+0xc4>)
 8000642:	f004 fee9 	bl	8005418 <iprintf>
		printf("TemperatureCompens: %ld °C\r\n", compensateTemperateur);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <BMP280_Temperateur+0xc0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	480a      	ldr	r0, [pc, #40]	@ (8000678 <BMP280_Temperateur+0xc8>)
 800064e:	f004 fee3 	bl	8005418 <iprintf>
		return NONcompensateTemperateur;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <BMP280_Temperateur+0xbc>)
 8000654:	681b      	ldr	r3, [r3, #0]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000e0 	.word	0x200000e0
 8000664:	08006464 	.word	0x08006464
 8000668:	08006480 	.word	0x08006480
 800066c:	20000098 	.word	0x20000098
 8000670:	20000094 	.word	0x20000094
 8000674:	0800649c 	.word	0x0800649c
 8000678:	080064bc 	.word	0x080064bc

0800067c <BMP280_Pression>:

int BMP280_Pression() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af02      	add	r7, sp, #8

	uint8_t *buffer;
	uint8_t registre = 0xF7;
 8000682:	23f7      	movs	r3, #247	@ 0xf7
 8000684:	70fb      	strb	r3, [r7, #3]


	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, &registre, 1, HAL_MAX_DELAY) != 0) {
 8000686:	23ee      	movs	r3, #238	@ 0xee
 8000688:	4619      	mov	r1, r3
 800068a:	1cfa      	adds	r2, r7, #3
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4825      	ldr	r0, [pc, #148]	@ (800072c <BMP280_Pression+0xb0>)
 8000696:	f002 f84b 	bl	8002730 <HAL_I2C_Master_Transmit>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <BMP280_Pression+0x2a>
				printf("Problem in Transmition I2C\r\n");
 80006a0:	4823      	ldr	r0, [pc, #140]	@ (8000730 <BMP280_Pression+0xb4>)
 80006a2:	f004 ff21 	bl	80054e8 <puts>
			}

			buffer = (uint8_t*) malloc(3);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f004 fd36 	bl	8005118 <malloc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
			if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer, 3, HAL_MAX_DELAY) != 0) {
 80006b0:	23ee      	movs	r3, #238	@ 0xee
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2303      	movs	r3, #3
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	481b      	ldr	r0, [pc, #108]	@ (800072c <BMP280_Pression+0xb0>)
 80006c0:	f002 f934 	bl	800292c <HAL_I2C_Master_Receive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <BMP280_Pression+0x54>
				printf("Problem in Reception I2C\r\n");
 80006ca:	481a      	ldr	r0, [pc, #104]	@ (8000734 <BMP280_Pression+0xb8>)
 80006cc:	f004 ff0c 	bl	80054e8 <puts>
			}

	NONcompensatePression = ((int32_t) (buffer[0]) << 12) | ((int32_t) (buffer[1]) << 4) | ((int32_t) (buffer[2]) >> 4);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	031a      	lsls	r2, r3, #12
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4313      	orrs	r3, r2
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	3202      	adds	r2, #2
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	0912      	lsrs	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	4313      	orrs	r3, r2
 80006ec:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <BMP280_Pression+0xbc>)
 80006ee:	6013      	str	r3, [r2, #0]

	compensatePression=bmp280_compensate_P_int32(NONcompensatePression);
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <BMP280_Pression+0xbc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f871 	bl	80007dc <bmp280_compensate_P_int32>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <BMP280_Pression+0xc0>)
 8000700:	601a      	str	r2, [r3, #0]
	free(buffer);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f004 fd10 	bl	8005128 <free>

	        printf("PressionNonCompens: %ld \r\n" , NONcompensatePression);
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <BMP280_Pression+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <BMP280_Pression+0xc4>)
 8000710:	f004 fe82 	bl	8005418 <iprintf>
			printf("PressionCompens: %ld hPa \r\n", compensatePression);
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <BMP280_Pression+0xc0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	480a      	ldr	r0, [pc, #40]	@ (8000744 <BMP280_Pression+0xc8>)
 800071c:	f004 fe7c 	bl	8005418 <iprintf>
			return compensatePression;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <BMP280_Pression+0xc0>)
 8000722:	681b      	ldr	r3, [r3, #0]


	return 0;
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000e0 	.word	0x200000e0
 8000730:	08006464 	.word	0x08006464
 8000734:	080064dc 	.word	0x080064dc
 8000738:	2000008c 	.word	0x2000008c
 800073c:	20000090 	.word	0x20000090
 8000740:	080064f8 	.word	0x080064f8
 8000744:	08006514 	.word	0x08006514

08000748 <bmp280_compensate_T_int32>:
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
int32_t t_fine;

int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	10da      	asrs	r2, r3, #3
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <bmp280_compensate_T_int32+0x80>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <bmp280_compensate_T_int32+0x84>)
 800075e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	12db      	asrs	r3, r3, #11
 8000768:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) *
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	111b      	asrs	r3, r3, #4
 800076e:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <bmp280_compensate_T_int32+0x80>)
 8000770:	8812      	ldrh	r2, [r2, #0]
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	1112      	asrs	r2, r2, #4
 8000778:	4913      	ldr	r1, [pc, #76]	@ (80007c8 <bmp280_compensate_T_int32+0x80>)
 800077a:	8809      	ldrh	r1, [r1, #0]
 800077c:	1a52      	subs	r2, r2, r1
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	131b      	asrs	r3, r3, #12
			((int32_t)dig_T3)) >> 14;
 8000784:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <bmp280_compensate_T_int32+0x88>)
 8000786:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) *
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	139b      	asrs	r3, r3, #14
 8000790:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	4413      	add	r3, r2
 8000798:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <bmp280_compensate_T_int32+0x8c>)
 800079a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <bmp280_compensate_T_int32+0x8c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	3380      	adds	r3, #128	@ 0x80
 80007a8:	121b      	asrs	r3, r3, #8
 80007aa:	60fb      	str	r3, [r7, #12]
	//printf("TemperatureCompens: %ld\r\n", T);

	return T/100;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <bmp280_compensate_T_int32+0x90>)
 80007b0:	fb82 1203 	smull	r1, r2, r2, r3
 80007b4:	1152      	asrs	r2, r2, #5
 80007b6:	17db      	asrs	r3, r3, #31
 80007b8:	1ad3      	subs	r3, r2, r3
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	2000009e 	.word	0x2000009e
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	200000b4 	.word	0x200000b4
 80007d8:	51eb851f 	.word	0x51eb851f

080007dc <bmp280_compensate_P_int32>:
uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 80007dc:	b480      	push	{r7}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 80007e4:	4b4c      	ldr	r3, [pc, #304]	@ (8000918 <bmp280_compensate_P_int32+0x13c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	105b      	asrs	r3, r3, #1
 80007ea:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 80007ee:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	109b      	asrs	r3, r3, #2
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	1092      	asrs	r2, r2, #2
 80007f8:	fb02 f303 	mul.w	r3, r2, r3
 80007fc:	12db      	asrs	r3, r3, #11
 80007fe:	4a47      	ldr	r2, [pc, #284]	@ (800091c <bmp280_compensate_P_int32+0x140>)
 8000800:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 800080a:	4b45      	ldr	r3, [pc, #276]	@ (8000920 <bmp280_compensate_P_int32+0x144>)
 800080c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000810:	461a      	mov	r2, r3
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	fb02 f303 	mul.w	r3, r2, r3
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	109a      	asrs	r2, r3, #2
 8000824:	4b3f      	ldr	r3, [pc, #252]	@ (8000924 <bmp280_compensate_P_int32+0x148>)
 8000826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082a:	041b      	lsls	r3, r3, #16
 800082c:	4413      	add	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) * var1)>>1))>>18;
 8000830:	4b3d      	ldr	r3, [pc, #244]	@ (8000928 <bmp280_compensate_P_int32+0x14c>)
 8000832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000836:	4619      	mov	r1, r3
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	109b      	asrs	r3, r3, #2
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	1092      	asrs	r2, r2, #2
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	135b      	asrs	r3, r3, #13
 8000846:	fb01 f303 	mul.w	r3, r1, r3
 800084a:	10da      	asrs	r2, r3, #3
 800084c:	4b37      	ldr	r3, [pc, #220]	@ (800092c <bmp280_compensate_P_int32+0x150>)
 800084e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000852:	4619      	mov	r1, r3
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	fb01 f303 	mul.w	r3, r1, r3
 800085a:	105b      	asrs	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	149b      	asrs	r3, r3, #18
 8000860:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000868:	4a31      	ldr	r2, [pc, #196]	@ (8000930 <bmp280_compensate_P_int32+0x154>)
 800086a:	8812      	ldrh	r2, [r2, #0]
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	13db      	asrs	r3, r3, #15
 8000872:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <bmp280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800087a:	2300      	movs	r3, #0
 800087c:	e045      	b.n	800090a <bmp280_compensate_P_int32+0x12e>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	131b      	asrs	r3, r3, #12
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	4a2a      	ldr	r2, [pc, #168]	@ (8000934 <bmp280_compensate_P_int32+0x158>)
 800088a:	fb02 f303 	mul.w	r3, r2, r3
 800088e:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8000892:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8000896:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db06      	blt.n	80008ac <bmp280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005a      	lsls	r2, r3, #1
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e005      	b.n	80008b8 <bmp280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <bmp280_compensate_P_int32+0x15c>)
 80008ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008be:	4619      	mov	r1, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	08d2      	lsrs	r2, r2, #3
 80008c8:	fb02 f303 	mul.w	r3, r2, r3
 80008cc:	0b5b      	lsrs	r3, r3, #13
 80008ce:	fb01 f303 	mul.w	r3, r1, r3
 80008d2:	131b      	asrs	r3, r3, #12
 80008d4:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	461a      	mov	r2, r3
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <bmp280_compensate_P_int32+0x160>)
 80008de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	135b      	asrs	r3, r3, #13
 80008e8:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <bmp280_compensate_P_int32+0x164>)
 80008f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008f6:	4413      	add	r3, r2
 80008f8:	111a      	asrs	r2, r3, #4
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]
	return p/100;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	4a10      	ldr	r2, [pc, #64]	@ (8000944 <bmp280_compensate_P_int32+0x168>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	095b      	lsrs	r3, r3, #5
}
 800090a:	4618      	mov	r0, r3
 800090c:	371c      	adds	r7, #28
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	200000b4 	.word	0x200000b4
 800091c:	200000ac 	.word	0x200000ac
 8000920:	200000aa 	.word	0x200000aa
 8000924:	200000a8 	.word	0x200000a8
 8000928:	200000a6 	.word	0x200000a6
 800092c:	200000a4 	.word	0x200000a4
 8000930:	200000a2 	.word	0x200000a2
 8000934:	fffff3cb 	.word	0xfffff3cb
 8000938:	200000b2 	.word	0x200000b2
 800093c:	200000b0 	.word	0x200000b0
 8000940:	200000ae 	.word	0x200000ae
 8000944:	51eb851f 	.word	0x51eb851f

08000948 <BMP280_get_trimming>:


void  BMP280_get_trimming(uint8_t data_Calib[size_Calib])
{
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af02      	add	r7, sp, #8
 800094e:	6078      	str	r0, [r7, #4]
	uint8_t registre = 0x88;
 8000950:	2388      	movs	r3, #136	@ 0x88
 8000952:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t* p = data_Calib;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	643b      	str	r3, [r7, #64]	@ 0x40
    int i = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, &registre, 1, HAL_MAX_DELAY) == HAL_OK)
 800095e:	23ee      	movs	r3, #238	@ 0xee
 8000960:	4619      	mov	r1, r3
 8000962:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2301      	movs	r3, #1
 800096e:	4876      	ldr	r0, [pc, #472]	@ (8000b48 <BMP280_get_trimming+0x200>)
 8000970:	f001 fede 	bl	8002730 <HAL_I2C_Master_Transmit>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 80e2 	bne.w	8000b40 <BMP280_get_trimming+0x1f8>
    {
        if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, data_Calib, size_Calib, HAL_MAX_DELAY) == HAL_OK)
 800097c:	23ee      	movs	r3, #238	@ 0xee
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	231a      	movs	r3, #26
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	486f      	ldr	r0, [pc, #444]	@ (8000b48 <BMP280_get_trimming+0x200>)
 800098c:	f001 ffce 	bl	800292c <HAL_I2C_Master_Receive>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	f040 80d4 	bne.w	8000b40 <BMP280_get_trimming+0x1f8>
        {
            printf("Calibration data received\r\n");
 8000998:	486c      	ldr	r0, [pc, #432]	@ (8000b4c <BMP280_get_trimming+0x204>)
 800099a:	f004 fda5 	bl	80054e8 <puts>

            // Create an array of pointers to your calibration data variables
            uint16_t* dig_values[] = { &dig_T1, &dig_T2, &dig_T3, &dig_P1, &dig_P2, &dig_P3,
 800099e:	4b6c      	ldr	r3, [pc, #432]	@ (8000b50 <BMP280_get_trimming+0x208>)
 80009a0:	f107 040c 	add.w	r4, r7, #12
 80009a4:	461d      	mov	r5, r3
 80009a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                p += 2;
            }*/

          //2 eme solution

            dig_T1 = (p[1] << 8) | p[0];
 80009b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009b8:	3301      	adds	r3, #1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21a      	sxth	r2, r3
 80009c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b61      	ldr	r3, [pc, #388]	@ (8000b54 <BMP280_get_trimming+0x20c>)
 80009ce:	801a      	strh	r2, [r3, #0]
            p += 2;
 80009d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009d2:	3302      	adds	r3, #2
 80009d4:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_T2 = (p[1] << 8) | p[0];
 80009d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009d8:	3301      	adds	r3, #1
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b21a      	sxth	r2, r3
 80009e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	4b5b      	ldr	r3, [pc, #364]	@ (8000b58 <BMP280_get_trimming+0x210>)
 80009ec:	801a      	strh	r2, [r3, #0]
            p += 2;
 80009ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009f0:	3302      	adds	r3, #2
 80009f2:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_T3 = (p[1] << 8) | p[0];
 80009f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009f6:	3301      	adds	r3, #1
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	4b54      	ldr	r3, [pc, #336]	@ (8000b5c <BMP280_get_trimming+0x214>)
 8000a0a:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a0e:	3302      	adds	r3, #2
 8000a10:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P1 = (p[1] << 8) | p[0];
 8000a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a14:	3301      	adds	r3, #1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b4d      	ldr	r3, [pc, #308]	@ (8000b60 <BMP280_get_trimming+0x218>)
 8000a2a:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a2e:	3302      	adds	r3, #2
 8000a30:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P2 = (p[1] << 8) | p[0];
 8000a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a34:	3301      	adds	r3, #1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	4313      	orrs	r3, r2
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <BMP280_get_trimming+0x21c>)
 8000a48:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P3 = (p[1] << 8) | p[0];
 8000a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a52:	3301      	adds	r3, #1
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	b21a      	sxth	r2, r3
 8000a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	4b40      	ldr	r3, [pc, #256]	@ (8000b68 <BMP280_get_trimming+0x220>)
 8000a66:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P4 = (p[1] << 8) | p[0];
 8000a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a70:	3301      	adds	r3, #1
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	4b3a      	ldr	r3, [pc, #232]	@ (8000b6c <BMP280_get_trimming+0x224>)
 8000a84:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a88:	3302      	adds	r3, #2
 8000a8a:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P5 = (p[1] << 8) | p[0];
 8000a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a8e:	3301      	adds	r3, #1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <BMP280_get_trimming+0x228>)
 8000aa2:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P6 = (p[1] << 8) | p[0];
 8000aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aac:	3301      	adds	r3, #1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	4313      	orrs	r3, r2
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <BMP280_get_trimming+0x22c>)
 8000ac0:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P7 = (p[1] << 8) | p[0];
 8000ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aca:	3301      	adds	r3, #1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <BMP280_get_trimming+0x230>)
 8000ade:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P8 = (p[1] << 8) | p[0];
 8000ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ae8:	3301      	adds	r3, #1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <BMP280_get_trimming+0x234>)
 8000afc:	801a      	strh	r2, [r3, #0]
            p += 2;
 8000afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b00:	3302      	adds	r3, #2
 8000b02:	643b      	str	r3, [r7, #64]	@ 0x40
            dig_P9 = (p[1] << 8) | p[0];
 8000b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b06:	3301      	adds	r3, #1
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <BMP280_get_trimming+0x238>)
 8000b1a:	801a      	strh	r2, [r3, #0]



            // Display the calibration data
            for (i = 0; i < size_Calib; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b20:	e00b      	b.n	8000b3a <BMP280_get_trimming+0x1f2>
            {
                printf("calib %d = 0x%x\n\r", i, data_Calib[i]);
 8000b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000b2e:	4815      	ldr	r0, [pc, #84]	@ (8000b84 <BMP280_get_trimming+0x23c>)
 8000b30:	f004 fc72 	bl	8005418 <iprintf>
            for (i = 0; i < size_Calib; i++)
 8000b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b36:	3301      	adds	r3, #1
 8000b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b3c:	2b19      	cmp	r3, #25
 8000b3e:	ddf0      	ble.n	8000b22 <BMP280_get_trimming+0x1da>
            }
        }
    }
}
 8000b40:	bf00      	nop
 8000b42:	3748      	adds	r7, #72	@ 0x48
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bdb0      	pop	{r4, r5, r7, pc}
 8000b48:	200000e0 	.word	0x200000e0
 8000b4c:	08006530 	.word	0x08006530
 8000b50:	08006560 	.word	0x08006560
 8000b54:	2000009c 	.word	0x2000009c
 8000b58:	2000009e 	.word	0x2000009e
 8000b5c:	200000a0 	.word	0x200000a0
 8000b60:	200000a2 	.word	0x200000a2
 8000b64:	200000a4 	.word	0x200000a4
 8000b68:	200000a6 	.word	0x200000a6
 8000b6c:	200000a8 	.word	0x200000a8
 8000b70:	200000aa 	.word	0x200000aa
 8000b74:	200000ac 	.word	0x200000ac
 8000b78:	200000ae 	.word	0x200000ae
 8000b7c:	200000b0 	.word	0x200000b0
 8000b80:	200000b2 	.word	0x200000b2
 8000b84:	0800654c 	.word	0x0800654c

08000b88 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000b8e:	4a18      	ldr	r2, [pc, #96]	@ (8000bf0 <MX_CAN1_Init+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000b94:	2206      	movs	r2, #6
 8000b96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000ba6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000baa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000bb2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_CAN1_Init+0x64>)
 8000bda:	f000 ff03 	bl	80019e4 <HAL_CAN_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000be4:	f000 fc36 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	40006400 	.word	0x40006400

08000bf4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_CAN_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <HAL_CAN_MspInit+0x8c>)
 8000c6c:	f001 fa6e 	bl	800214c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40006400 	.word	0x40006400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a25      	ldr	r2, [pc, #148]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000d10:	f001 fbb0 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d1a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <MX_GPIO_Init+0xd8>)
 8000d2c:	f001 fa0e 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d30:	2320      	movs	r3, #32
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000d48:	f001 fa00 	bl	800214c <HAL_GPIO_Init>

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	@ 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020800 	.word	0x40020800

08000d60 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d66:	4a13      	ldr	r2, [pc, #76]	@ (8000db4 <MX_I2C2_Init+0x54>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d6c:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <MX_I2C2_Init+0x58>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_I2C2_Init+0x50>)
 8000d9e:	f001 fb83 	bl	80024a8 <HAL_I2C_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000da8:	f000 fb54 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000e0 	.word	0x200000e0
 8000db4:	40005800 	.word	0x40005800
 8000db8:	000186a0 	.word	0x000186a0

08000dbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a29      	ldr	r2, [pc, #164]	@ (8000e80 <HAL_I2C_MspInit+0xc4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d14b      	bne.n	8000e76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a27      	ldr	r2, [pc, #156]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a20      	ldr	r2, [pc, #128]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4815      	ldr	r0, [pc, #84]	@ (8000e88 <HAL_I2C_MspInit+0xcc>)
 8000e34:	f001 f98a 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <HAL_I2C_MspInit+0xd0>)
 8000e56:	f001 f979 	bl	800214c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40005800 	.word	0x40005800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40020800 	.word	0x40020800

08000e90 <MPU9250_Data>:
	MPU9250_data[0] = 0x1C;     // Adresse du registre ACCEL_CONFIG
	MPU9250_data[1] = 0x08;     // Réglage de la plage à ±4g
	HAL_I2C_Master_Transmit(&hi2c2, 0x68<< 1, data, 2, HAL_MAX_DELAY);
}

void MPU9250_Data(int16_t *x, int16_t *y, int16_t *z) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]

	uint8_t reg_ACCEL_XOUT_H = 0x3B;
 8000e9c:	233b      	movs	r3, #59	@ 0x3b
 8000e9e:	75fb      	strb	r3, [r7, #23]
	uint8_t data_read[6];


	// Envoyer l'adresse du registre de départ
	HAL_I2C_Master_Transmit(&hi2c2, 0x68<< 1, &reg_ACCEL_XOUT_H, 1, HAL_MAX_DELAY);
 8000ea0:	f107 0217 	add.w	r2, r7, #23
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	21d0      	movs	r1, #208	@ 0xd0
 8000eae:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <MPU9250_Data+0x78>)
 8000eb0:	f001 fc3e 	bl	8002730 <HAL_I2C_Master_Transmit>

	// Recevoir les 6 octets de données des axes X, Y, Z
	HAL_I2C_Master_Receive(&hi2c2, 0x68 << 1, data_read, 6, HAL_MAX_DELAY);
 8000eb4:	f107 0210 	add.w	r2, r7, #16
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	21d0      	movs	r1, #208	@ 0xd0
 8000ec2:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <MPU9250_Data+0x78>)
 8000ec4:	f001 fd32 	bl	800292c <HAL_I2C_Master_Receive>

	// Construire les valeurs brutes pour chaque axe
	*x = (int16_t)((data_read[0] << 8) | data_read[1]);
 8000ec8:	7c3b      	ldrb	r3, [r7, #16]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7c7b      	ldrb	r3, [r7, #17]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((data_read[2] << 8) | data_read[3]);
 8000eda:	7cbb      	ldrb	r3, [r7, #18]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	7cfb      	ldrb	r3, [r7, #19]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((data_read[4] << 8) | data_read[5]);
 8000eec:	7d3b      	ldrb	r3, [r7, #20]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	7d7b      	ldrb	r3, [r7, #21]
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	801a      	strh	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000e0 	.word	0x200000e0

08000f0c <Data_Accel>:


void Data_Accel(int16_t x, int16_t y, int16_t z) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
 8000f16:	460b      	mov	r3, r1
 8000f18:	80bb      	strh	r3, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	807b      	strh	r3, [r7, #2]
	printf("\r\n Acceleration X: %d , Y: %d , Z: %d \r\n", x * 4, y * 4, z * 4);  // ±4g
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	0099      	lsls	r1, r3, #2
 8000f24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f28:	009a      	lsls	r2, r3, #2
 8000f2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <Data_Accel+0x34>)
 8000f32:	f004 fa71 	bl	8005418 <iprintf>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08006590 	.word	0x08006590

08000f44 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4a:	f000 fcb5 	bl	80018b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f4e:	f000 f945 	bl	80011dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f52:	f7ff fe97 	bl	8000c84 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f56:	f000 fbd7 	bl	8001708 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8000f5a:	f7ff ff01 	bl	8000d60 <MX_I2C2_Init>
	MX_CAN1_Init();
 8000f5e:	f7ff fe13 	bl	8000b88 <MX_CAN1_Init>
	MX_USART1_UART_Init();
 8000f62:	f000 fba7 	bl	80016b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("TESTtp1 Hedia et Hugo \r\n");
 8000f66:	487b      	ldr	r0, [pc, #492]	@ (8001154 <main+0x210>)
 8000f68:	f004 fabe 	bl	80054e8 <puts>

	uint8_t buf[1];

	buffer[0] = 0xD0;
 8000f6c:	4b7a      	ldr	r3, [pc, #488]	@ (8001158 <main+0x214>)
 8000f6e:	22d0      	movs	r2, #208	@ 0xd0
 8000f70:	701a      	strb	r2, [r3, #0]
	printf("Hello world\r\n");
 8000f72:	487a      	ldr	r0, [pc, #488]	@ (800115c <main+0x218>)
 8000f74:	f004 fab8 	bl	80054e8 <puts>
	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, buffer, 1, HAL_MAX_DELAY) != 0) {
 8000f78:	23ee      	movs	r3, #238	@ 0xee
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	4a74      	ldr	r2, [pc, #464]	@ (8001158 <main+0x214>)
 8000f86:	4876      	ldr	r0, [pc, #472]	@ (8001160 <main+0x21c>)
 8000f88:	f001 fbd2 	bl	8002730 <HAL_I2C_Master_Transmit>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <main+0x54>
		printf("Problem in I2C Transmission\r\n");
 8000f92:	4874      	ldr	r0, [pc, #464]	@ (8001164 <main+0x220>)
 8000f94:	f004 faa8 	bl	80054e8 <puts>
	}

	if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer, 1,HAL_MAX_DELAY) != 0) {
 8000f98:	23ee      	movs	r3, #238	@ 0xee
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8001158 <main+0x214>)
 8000fa6:	486e      	ldr	r0, [pc, #440]	@ (8001160 <main+0x21c>)
 8000fa8:	f001 fcc0 	bl	800292c <HAL_I2C_Master_Receive>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <main+0x74>
		printf("Problem in I2C Reception \r\n");
 8000fb2:	486d      	ldr	r0, [pc, #436]	@ (8001168 <main+0x224>)
 8000fb4:	f004 fa98 	bl	80054e8 <puts>
	}

	printf("Identifiant: 0x%x", buffer[0]);
 8000fb8:	4b67      	ldr	r3, [pc, #412]	@ (8001158 <main+0x214>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	486b      	ldr	r0, [pc, #428]	@ (800116c <main+0x228>)
 8000fc0:	f004 fa2a 	bl	8005418 <iprintf>

	if (buf[0] == 0x58) {
 8000fc4:	7a3b      	ldrb	r3, [r7, #8]
 8000fc6:	2b58      	cmp	r3, #88	@ 0x58
 8000fc8:	d103      	bne.n	8000fd2 <main+0x8e>
		printf("Verification Ok\r\n");
 8000fca:	4869      	ldr	r0, [pc, #420]	@ (8001170 <main+0x22c>)
 8000fcc:	f004 fa8c 	bl	80054e8 <puts>
 8000fd0:	e002      	b.n	8000fd8 <main+0x94>

	} else {
		printf("Verification not Ok!\r\n");
 8000fd2:	4868      	ldr	r0, [pc, #416]	@ (8001174 <main+0x230>)
 8000fd4:	f004 fa88 	bl	80054e8 <puts>

	}


	printf("\r\nConfigure BMP280\r\n");
 8000fd8:	4867      	ldr	r0, [pc, #412]	@ (8001178 <main+0x234>)
 8000fda:	f004 fa85 	bl	80054e8 <puts>
	uint8_t buffer2[3];


	buffer2[0] = 0xF4;
 8000fde:	23f4      	movs	r3, #244	@ 0xf4
 8000fe0:	713b      	strb	r3, [r7, #4]
	buffer2[1] = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000fe2:	2357      	movs	r3, #87	@ 0x57
 8000fe4:	717b      	strb	r3, [r7, #5]
	printf("Configure...\r\n");
 8000fe6:	4865      	ldr	r0, [pc, #404]	@ (800117c <main+0x238>)
 8000fe8:	f004 fa7e 	bl	80054e8 <puts>

	if (HAL_I2C_Master_Transmit(&hi2c2, BMP280_adresse, buffer2, 2, HAL_MAX_DELAY) != 0) {
 8000fec:	23ee      	movs	r3, #238	@ 0xee
 8000fee:	4619      	mov	r1, r3
 8000ff0:	1d3a      	adds	r2, r7, #4
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	4859      	ldr	r0, [pc, #356]	@ (8001160 <main+0x21c>)
 8000ffc:	f001 fb98 	bl	8002730 <HAL_I2C_Master_Transmit>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <main+0xc8>
		printf("Problem with I2C Transmit\r\n");
 8001006:	485e      	ldr	r0, [pc, #376]	@ (8001180 <main+0x23c>)
 8001008:	f004 fa6e 	bl	80054e8 <puts>
	}

	if (HAL_I2C_Master_Receive(&hi2c2, BMP280_adresse, buffer2, 1, HAL_MAX_DELAY) != 0) {
 800100c:	23ee      	movs	r3, #238	@ 0xee
 800100e:	4619      	mov	r1, r3
 8001010:	1d3a      	adds	r2, r7, #4
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	4851      	ldr	r0, [pc, #324]	@ (8001160 <main+0x21c>)
 800101c:	f001 fc86 	bl	800292c <HAL_I2C_Master_Receive>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <main+0xe8>
		printf("Problem with I2C Receive\r\n");
 8001026:	4857      	ldr	r0, [pc, #348]	@ (8001184 <main+0x240>)
 8001028:	f004 fa5e 	bl	80054e8 <puts>
	}


	if (buffer2[0] == buffer2[1]) {
 800102c:	793a      	ldrb	r2, [r7, #4]
 800102e:	797b      	ldrb	r3, [r7, #5]
 8001030:	429a      	cmp	r2, r3
 8001032:	d103      	bne.n	800103c <main+0xf8>
		printf("Verification Ok\r\n");
 8001034:	484e      	ldr	r0, [pc, #312]	@ (8001170 <main+0x22c>)
 8001036:	f004 fa57 	bl	80054e8 <puts>
 800103a:	e002      	b.n	8001042 <main+0xfe>
	} else {
		printf("Verification not Ok!\r\n");
 800103c:	484d      	ldr	r0, [pc, #308]	@ (8001174 <main+0x230>)
 800103e:	f004 fa53 	bl	80054e8 <puts>
		//return 1;
	}

	//printf("etalonage\r\n");
	BMP280_get_trimming(data_Calib);
 8001042:	4851      	ldr	r0, [pc, #324]	@ (8001188 <main+0x244>)
 8001044:	f7ff fc80 	bl	8000948 <BMP280_get_trimming>
	BMP280_Temperateur();
 8001048:	f7ff fab2 	bl	80005b0 <BMP280_Temperateur>
	BMP280_Pression();
 800104c:	f7ff fb16 	bl	800067c <BMP280_Pression>
	//char[50] reponse[]
	//HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response));

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer[rx_index], 1);
 8001050:	4b4e      	ldr	r3, [pc, #312]	@ (800118c <main+0x248>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	4b4d      	ldr	r3, [pc, #308]	@ (8001190 <main+0x24c>)
 800105a:	4413      	add	r3, r2
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	484c      	ldr	r0, [pc, #304]	@ (8001194 <main+0x250>)
 8001062:	f003 f8de 	bl	8004222 <HAL_UART_Receive_IT>

	//HAL_Delay(1000);

	printf("\r\n Affichage de MPU \r\n");
 8001066:	484c      	ldr	r0, [pc, #304]	@ (8001198 <main+0x254>)
 8001068:	f004 fa3e 	bl	80054e8 <puts>
	MPU9250_Data(&x, &y, &z);  // ou MPU9250_Read_Raw_Data pour le MPU9250
 800106c:	4a4b      	ldr	r2, [pc, #300]	@ (800119c <main+0x258>)
 800106e:	494c      	ldr	r1, [pc, #304]	@ (80011a0 <main+0x25c>)
 8001070:	484c      	ldr	r0, [pc, #304]	@ (80011a4 <main+0x260>)
 8001072:	f7ff ff0d 	bl	8000e90 <MPU9250_Data>
	Data_Accel(x, y, z);
 8001076:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <main+0x260>)
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	4a48      	ldr	r2, [pc, #288]	@ (80011a0 <main+0x25c>)
 800107e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001082:	4a46      	ldr	r2, [pc, #280]	@ (800119c <main+0x258>)
 8001084:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff3f 	bl	8000f0c <Data_Accel>


	// Démarrer le module CAN

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800108e:	4846      	ldr	r0, [pc, #280]	@ (80011a8 <main+0x264>)
 8001090:	f000 fda3 	bl	8001bda <HAL_CAN_Start>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <main+0x160>
	{
		printf("erreur CAN\r\n");
 800109a:	4844      	ldr	r0, [pc, #272]	@ (80011ac <main+0x268>)
 800109c:	f004 fa24 	bl	80054e8 <puts>
		//Gestion d'erreur
		Error_Handler();
 80010a0:	f000 f9d8 	bl	8001454 <Error_Handler>
	}

	 printf("activation de CAN\r\n");
 80010a4:	4842      	ldr	r0, [pc, #264]	@ (80011b0 <main+0x26c>)
 80010a6:	f004 fa1f 	bl	80054e8 <puts>

	//Manuel Mode


	TxHeader.StdId = 0x61;          // ID standard du message
 80010aa:	4b42      	ldr	r3, [pc, #264]	@ (80011b4 <main+0x270>)
 80010ac:	2261      	movs	r2, #97	@ 0x61
 80010ae:	601a      	str	r2, [r3, #0]
	//TxHeader.ExtId = 0;              // ID étendu non utilisé ici
	TxHeader.IDE = CAN_ID_STD;       // Trame standard
 80010b0:	4b40      	ldr	r3, [pc, #256]	@ (80011b4 <main+0x270>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;     // Trame de données
 80010b6:	4b3f      	ldr	r3, [pc, #252]	@ (80011b4 <main+0x270>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;                // Taille des données (1 octet dans ce cas)
 80010bc:	4b3d      	ldr	r3, [pc, #244]	@ (80011b4 <main+0x270>)
 80010be:	2202      	movs	r2, #2
 80010c0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80010c2:	4b3c      	ldr	r3, [pc, #240]	@ (80011b4 <main+0x270>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	751a      	strb	r2, [r3, #20]
	  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	  	  HAL_Delay(1000);

		 */
		// calcule d'angle
		  angle = (Tempinit-BMP280_Temperateur())*coefficientK ;
 80010c8:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <main+0x274>)
 80010ca:	681c      	ldr	r4, [r3, #0]
 80010cc:	f7ff fa70 	bl	80005b0 <BMP280_Temperateur>
 80010d0:	4603      	mov	r3, r0
 80010d2:	1ae3      	subs	r3, r4, r3
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b39      	ldr	r3, [pc, #228]	@ (80011bc <main+0x278>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	fb12 f303 	smulbb	r3, r2, r3
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b37      	ldr	r3, [pc, #220]	@ (80011c0 <main+0x27c>)
 80010e4:	701a      	strb	r2, [r3, #0]
	 	  //HAL_Delay(1000);
	       printf("rotation moteur sens1\r\n");

		 */

		Val_temp=BMP280_Temperateur();
 80010e6:	f7ff fa63 	bl	80005b0 <BMP280_Temperateur>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	4b35      	ldr	r3, [pc, #212]	@ (80011c4 <main+0x280>)
 80010f0:	701a      	strb	r2, [r3, #0]

		int vitesse = Val_temp * 255;
 80010f2:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <main+0x280>)
 80010f4:	f993 3000 	ldrsb.w	r3, [r3]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4613      	mov	r3, r2
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
		printf("angle=%i\r\n",vitesse);
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	4830      	ldr	r0, [pc, #192]	@ (80011c8 <main+0x284>)
 8001106:	f004 f987 	bl	8005418 <iprintf>

		//TxData[0] =90;// Commande pour déplacer le moteur de 90°

		TxData[1]=1;
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <main+0x288>)
 800110c:	2201      	movs	r2, #1
 800110e:	705a      	strb	r2, [r3, #1]
		TxData[0]=vitesse;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <main+0x288>)
 8001116:	701a      	strb	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001118:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <main+0x28c>)
 800111a:	4a2c      	ldr	r2, [pc, #176]	@ (80011cc <main+0x288>)
 800111c:	4925      	ldr	r1, [pc, #148]	@ (80011b4 <main+0x270>)
 800111e:	4822      	ldr	r0, [pc, #136]	@ (80011a8 <main+0x264>)
 8001120:	f000 fd9f 	bl	8001c62 <HAL_CAN_AddTxMessage>
		HAL_Delay(1000);
 8001124:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001128:	f000 fc38 	bl	800199c <HAL_Delay>
		printf("rotation moteur sens1\r\n");
 800112c:	4829      	ldr	r0, [pc, #164]	@ (80011d4 <main+0x290>)
 800112e:	f004 f9db 	bl	80054e8 <puts>

		 printf("==============Raspberry ===============\r\n");
 8001132:	4829      	ldr	r0, [pc, #164]	@ (80011d8 <main+0x294>)
 8001134:	f004 f9d8 	bl	80054e8 <puts>
		 HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer[rx_index], 1);
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <main+0x248>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <main+0x24c>)
 8001142:	4413      	add	r3, r2
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	4812      	ldr	r0, [pc, #72]	@ (8001194 <main+0x250>)
 800114a:	f003 f86a 	bl	8004222 <HAL_UART_Receive_IT>
	{
 800114e:	bf00      	nop
 8001150:	e7ba      	b.n	80010c8 <main+0x184>
 8001152:	bf00      	nop
 8001154:	080065bc 	.word	0x080065bc
 8001158:	2000017c 	.word	0x2000017c
 800115c:	080065d4 	.word	0x080065d4
 8001160:	200000e0 	.word	0x200000e0
 8001164:	080065e4 	.word	0x080065e4
 8001168:	08006604 	.word	0x08006604
 800116c:	08006620 	.word	0x08006620
 8001170:	08006634 	.word	0x08006634
 8001174:	08006648 	.word	0x08006648
 8001178:	08006660 	.word	0x08006660
 800117c:	08006674 	.word	0x08006674
 8001180:	08006684 	.word	0x08006684
 8001184:	080066a0 	.word	0x080066a0
 8001188:	20000160 	.word	0x20000160
 800118c:	20000198 	.word	0x20000198
 8001190:	20000184 	.word	0x20000184
 8001194:	200001a0 	.word	0x200001a0
 8001198:	080066bc 	.word	0x080066bc
 800119c:	20000150 	.word	0x20000150
 80011a0:	2000014e 	.word	0x2000014e
 80011a4:	2000014c 	.word	0x2000014c
 80011a8:	200000b8 	.word	0x200000b8
 80011ac:	080066d4 	.word	0x080066d4
 80011b0:	080066e0 	.word	0x080066e0
 80011b4:	20000134 	.word	0x20000134
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004
 80011c0:	2000015c 	.word	0x2000015c
 80011c4:	2000017d 	.word	0x2000017d
 80011c8:	080066f4 	.word	0x080066f4
 80011cc:	20000154 	.word	0x20000154
 80011d0:	20000180 	.word	0x20000180
 80011d4:	08006700 	.word	0x08006700
 80011d8:	08006718 	.word	0x08006718

080011dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	@ 0x50
 80011e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2234      	movs	r2, #52	@ 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fa90 	bl	8005710 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <SystemClock_Config+0xd4>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	4a29      	ldr	r2, [pc, #164]	@ (80012b0 <SystemClock_Config+0xd4>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <SystemClock_Config+0xd4>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <SystemClock_Config+0xd8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001228:	4a22      	ldr	r2, [pc, #136]	@ (80012b4 <SystemClock_Config+0xd8>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <SystemClock_Config+0xd8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001250:	2310      	movs	r3, #16
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001254:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001258:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800125a:	2304      	movs	r3, #4
 800125c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001262:	2302      	movs	r3, #2
 8001264:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fc60 	bl	8003b30 <HAL_RCC_OscConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001276:	f000 f8ed 	bl	8001454 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127a:	230f      	movs	r3, #15
 800127c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127e:	2302      	movs	r3, #2
 8001280:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2102      	movs	r1, #2
 8001296:	4618      	mov	r0, r3
 8001298:	f002 f900 	bl	800349c <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80012a2:	f000 f8d7 	bl	8001454 <Error_Handler>
	}
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	@ 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Vérifier si l'interruption est pour USART2
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001330 <HAL_UART_RxCpltCallback+0x78>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12d      	bne.n	8001326 <HAL_UART_RxCpltCallback+0x6e>
        if (rx_buffer[rx_index] == '\r') { // Commande terminée (fin de ligne)
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_UART_RxCpltCallback+0x80>)
 80012d4:	5c9b      	ldrb	r3, [r3, r2]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b0d      	cmp	r3, #13
 80012da:	d106      	bne.n	80012ea <HAL_UART_RxCpltCallback+0x32>
            //rx_buffer[rx_index] = '\0'; // Ajouter un caractère de fin de chaîne
            handle_command((char*)rx_buffer); // Appeler la fonction pour traiter la commande
 80012dc:	4816      	ldr	r0, [pc, #88]	@ (8001338 <HAL_UART_RxCpltCallback+0x80>)
 80012de:	f000 f82f 	bl	8001340 <handle_command>
            rx_index = 0; // Réinitialiser l'index pour la prochaine commande
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e012      	b.n	8001310 <HAL_UART_RxCpltCallback+0x58>
        } else {
            // Incrémenter l'index et assurer qu'il reste dans les limites du buffer
        	HAL_UART_Transmit(&huart1, (uint8_t*)&rx_buffer[rx_index], 1,HAL_MAX_DELAY);
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_UART_RxCpltCallback+0x80>)
 80012f4:	18d1      	adds	r1, r2, r3
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	2201      	movs	r2, #1
 80012fc:	480f      	ldr	r0, [pc, #60]	@ (800133c <HAL_UART_RxCpltCallback+0x84>)
 80012fe:	f002 ff05 	bl	800410c <HAL_UART_Transmit>
            rx_index = rx_index + 1;
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3301      	adds	r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 800130e:	701a      	strb	r2, [r3, #0]

        }

        // Relancer la réception pour le prochain caractère
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer[rx_index], 1);
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <HAL_UART_RxCpltCallback+0x80>)
 800131a:	4413      	add	r3, r2
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	4806      	ldr	r0, [pc, #24]	@ (800133c <HAL_UART_RxCpltCallback+0x84>)
 8001322:	f002 ff7e 	bl	8004222 <HAL_UART_Receive_IT>

    }
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40011000 	.word	0x40011000
 8001334:	20000198 	.word	0x20000198
 8001338:	20000184 	.word	0x20000184
 800133c:	200001a0 	.word	0x200001a0

08001340 <handle_command>:

void handle_command(char *command) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b090      	sub	sp, #64	@ 0x40
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    char tx_buffer[50];

    if (strncmp(command, "GET_T", 5) == 0) {
 8001348:	2205      	movs	r2, #5
 800134a:	4936      	ldr	r1, [pc, #216]	@ (8001424 <handle_command+0xe4>)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f004 f9e7 	bl	8005720 <strncmp>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d109      	bne.n	800136c <handle_command+0x2c>
        snprintf(tx_buffer, sizeof(tx_buffer), "T=%ld °C r\\n", BMP280_Temperateur());
 8001358:	f7ff f92a 	bl	80005b0 <BMP280_Temperateur>
 800135c:	4603      	mov	r3, r0
 800135e:	f107 000c 	add.w	r0, r7, #12
 8001362:	4a31      	ldr	r2, [pc, #196]	@ (8001428 <handle_command+0xe8>)
 8001364:	2132      	movs	r1, #50	@ 0x32
 8001366:	f004 f8c7 	bl	80054f8 <sniprintf>
 800136a:	e048      	b.n	80013fe <handle_command+0xbe>
    }
    else if (strncmp(command, "GET_P", 5) == 0) {
 800136c:	2205      	movs	r2, #5
 800136e:	492f      	ldr	r1, [pc, #188]	@ (800142c <handle_command+0xec>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f004 f9d5 	bl	8005720 <strncmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <handle_command+0x50>
        snprintf(tx_buffer, sizeof(tx_buffer), "%ld hPa r\\n",BMP280_Pression());
 800137c:	f7ff f97e 	bl	800067c <BMP280_Pression>
 8001380:	4603      	mov	r3, r0
 8001382:	f107 000c 	add.w	r0, r7, #12
 8001386:	4a2a      	ldr	r2, [pc, #168]	@ (8001430 <handle_command+0xf0>)
 8001388:	2132      	movs	r1, #50	@ 0x32
 800138a:	f004 f8b5 	bl	80054f8 <sniprintf>
 800138e:	e036      	b.n	80013fe <handle_command+0xbe>
    }
    else if (strncmp(command, "SET_K=%i", 6) == 0) {
 8001390:	2206      	movs	r2, #6
 8001392:	4928      	ldr	r1, [pc, #160]	@ (8001434 <handle_command+0xf4>)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f004 f9c3 	bl	8005720 <strncmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <handle_command+0x70>
        snprintf(tx_buffer, sizeof(tx_buffer), "SET_K=OK\n");
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4a24      	ldr	r2, [pc, #144]	@ (8001438 <handle_command+0xf8>)
 80013a6:	2132      	movs	r1, #50	@ 0x32
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 f8a5 	bl	80054f8 <sniprintf>
 80013ae:	e026      	b.n	80013fe <handle_command+0xbe>
    }
    else if (strncmp(command, "GET_K", 5) == 0) {
 80013b0:	2205      	movs	r2, #5
 80013b2:	4922      	ldr	r1, [pc, #136]	@ (800143c <handle_command+0xfc>)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f004 f9b3 	bl	8005720 <strncmp>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <handle_command+0x90>
        snprintf(tx_buffer, sizeof(tx_buffer), "K=12.3400\n");
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001440 <handle_command+0x100>)
 80013c6:	2132      	movs	r1, #50	@ 0x32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 f895 	bl	80054f8 <sniprintf>
 80013ce:	e016      	b.n	80013fe <handle_command+0xbe>
    }
    else if (strncmp(command, "GET_A", 5) == 0) {
 80013d0:	2205      	movs	r2, #5
 80013d2:	491c      	ldr	r1, [pc, #112]	@ (8001444 <handle_command+0x104>)
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f004 f9a3 	bl	8005720 <strncmp>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d107      	bne.n	80013f0 <handle_command+0xb0>
        snprintf(tx_buffer, sizeof(tx_buffer), "A=125.7000\n");
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4a18      	ldr	r2, [pc, #96]	@ (8001448 <handle_command+0x108>)
 80013e6:	2132      	movs	r1, #50	@ 0x32
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 f885 	bl	80054f8 <sniprintf>
 80013ee:	e006      	b.n	80013fe <handle_command+0xbe>
    }
    else {
        snprintf(tx_buffer, sizeof(tx_buffer), "Erreur: Commande inconnue\n");
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4a15      	ldr	r2, [pc, #84]	@ (800144c <handle_command+0x10c>)
 80013f6:	2132      	movs	r1, #50	@ 0x32
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 f87d 	bl	80054f8 <sniprintf>
    }

    // Envoyer la réponse via UART
    HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff04 	bl	8000210 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	b29a      	uxth	r2, r3
 800140c:	f107 010c 	add.w	r1, r7, #12
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	480e      	ldr	r0, [pc, #56]	@ (8001450 <handle_command+0x110>)
 8001416:	f002 fe79 	bl	800410c <HAL_UART_Transmit>
}
 800141a:	bf00      	nop
 800141c:	3740      	adds	r7, #64	@ 0x40
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	08006744 	.word	0x08006744
 8001428:	0800674c 	.word	0x0800674c
 800142c:	0800675c 	.word	0x0800675c
 8001430:	08006764 	.word	0x08006764
 8001434:	08006770 	.word	0x08006770
 8001438:	0800677c 	.word	0x0800677c
 800143c:	08006788 	.word	0x08006788
 8001440:	08006790 	.word	0x08006790
 8001444:	0800679c 	.word	0x0800679c
 8001448:	080067a4 	.word	0x080067a4
 800144c:	080067b0 	.word	0x080067b0
 8001450:	200001a0 	.word	0x200001a0

08001454 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149e:	2007      	movs	r0, #7
 80014a0:	f000 fd80 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800

080014b0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
	  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80014b8:	1d39      	adds	r1, r7, #4
 80014ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014be:	2201      	movs	r2, #1
 80014c0:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <__io_putchar+0x20>)
 80014c2:	f002 fe23 	bl	800410c <HAL_UART_Transmit>



  return ch;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200001e8 	.word	0x200001e8

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <NMI_Handler+0x4>

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <MemManage_Handler+0x4>

080014ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152a:	f000 fa17 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <USART1_IRQHandler+0x10>)
 800153a:	f002 fe97 	bl	800426c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001a0 	.word	0x200001a0

08001548 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e00a      	b.n	8001570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800155a:	f3af 8000 	nop.w
 800155e:	4601      	mov	r1, r0
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf0      	blt.n	800155a <_read+0x12>
  }

  return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e009      	b.n	80015a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff87 	bl	80014b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf1      	blt.n	8001594 <_write+0x12>
  }
  return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_close>:

int _close(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e2:	605a      	str	r2, [r3, #4]
  return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_isatty>:

int _isatty(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	@ (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f004 f8cc 	bl	80057f0 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20020000 	.word	0x20020000
 8001684:	00000400 	.word	0x00000400
 8001688:	2000019c 	.word	0x2000019c
 800168c:	20000380 	.word	0x20000380

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <MX_USART1_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ec:	f002 fcbe 	bl	800406c <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f7ff fead 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200001a0 	.word	0x200001a0
 8001704:	40011000 	.word	0x40011000

08001708 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <MX_USART2_UART_Init+0x50>)
 8001710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_USART2_UART_Init+0x4c>)
 8001740:	f002 fc94 	bl	800406c <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800174a:	f7ff fe83 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001e8 	.word	0x200001e8
 8001758:	40004400 	.word	0x40004400

0800175c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a36      	ldr	r2, [pc, #216]	@ (8001854 <HAL_UART_MspInit+0xf8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d135      	bne.n	80017ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a34      	ldr	r2, [pc, #208]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4b2e      	ldr	r3, [pc, #184]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c8:	2307      	movs	r3, #7
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4822      	ldr	r0, [pc, #136]	@ (800185c <HAL_UART_MspInit+0x100>)
 80017d4:	f000 fcba 	bl	800214c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2025      	movs	r0, #37	@ 0x25
 80017de:	f000 fbec 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017e2:	2025      	movs	r0, #37	@ 0x25
 80017e4:	f000 fc05 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017e8:	e030      	b.n	800184c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <HAL_UART_MspInit+0x104>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d12b      	bne.n	800184c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001820:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_UART_MspInit+0xfc>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182c:	230c      	movs	r3, #12
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183c:	2307      	movs	r3, #7
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_UART_MspInit+0x100>)
 8001848:	f000 fc80 	bl	800214c <HAL_GPIO_Init>
}
 800184c:	bf00      	nop
 800184e:	3730      	adds	r7, #48	@ 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40011000 	.word	0x40011000
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000
 8001860:	40004400 	.word	0x40004400

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800189c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001868:	f7ff ff12 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800186e:	490d      	ldr	r1, [pc, #52]	@ (80018a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001884:	4c0a      	ldr	r4, [pc, #40]	@ (80018b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001892:	f003 ffb3 	bl	80057fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001896:	f7ff fb55 	bl	8000f44 <main>
  bx  lr    
 800189a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018a8:	08006828 	.word	0x08006828
  ldr r2, =_sbss
 80018ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018b0:	20000380 	.word	0x20000380

080018b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <HAL_Init+0x40>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <HAL_Init+0x40>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	@ (80018f8 <HAL_Init+0x40>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 fb5f 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fdb8 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fb77 	bl	800200e <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f000 fb3f 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	@ (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000008 	.word	0x20000008
 8001954:	20000010 	.word	0x20000010
 8001958:	2000000c 	.word	0x2000000c

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000010 	.word	0x20000010
 8001980:	20000230 	.word	0x20000230

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	@ (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000230 	.word	0x20000230

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffde 	bl	8001984 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000010 	.word	0x20000010

080019e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0ed      	b.n	8001bd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff f8f6 	bl	8000bf4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff ffb4 	bl	8001984 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a1e:	e012      	b.n	8001a46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a20:	f7ff ffb0 	bl	8001984 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d90b      	bls.n	8001a46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0c5      	b.n	8001bd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0e5      	beq.n	8001a20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0202 	bic.w	r2, r2, #2
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a64:	f7ff ff8e 	bl	8001984 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a6a:	e012      	b.n	8001a92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a6c:	f7ff ff8a 	bl	8001984 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d90b      	bls.n	8001a92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2205      	movs	r2, #5
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e09f      	b.n	8001bd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e5      	bne.n	8001a6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e1b      	ldrb	r3, [r3, #24]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d108      	bne.n	8001aba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e007      	b.n	8001aca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7e5b      	ldrb	r3, [r3, #25]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7e9b      	ldrb	r3, [r3, #26]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d108      	bne.n	8001b0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0220 	orr.w	r2, r2, #32
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e007      	b.n	8001b1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0220 	bic.w	r2, r2, #32
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7edb      	ldrb	r3, [r3, #27]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0210 	bic.w	r2, r2, #16
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0210 	orr.w	r2, r2, #16
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7f1b      	ldrb	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d108      	bne.n	8001b62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0208 	orr.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e007      	b.n	8001b72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0208 	bic.w	r2, r2, #8
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7f5b      	ldrb	r3, [r3, #29]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0204 	orr.w	r2, r2, #4
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e007      	b.n	8001b9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	ea42 0103 	orr.w	r1, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d12e      	bne.n	8001c4c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c06:	f7ff febd 	bl	8001984 <HAL_GetTick>
 8001c0a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c0c:	e012      	b.n	8001c34 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c0e:	f7ff feb9 	bl	8001984 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b0a      	cmp	r3, #10
 8001c1a:	d90b      	bls.n	8001c34 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e012      	b.n	8001c5a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e5      	bne.n	8001c0e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e006      	b.n	8001c5a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b089      	sub	sp, #36	@ 0x24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c76:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c80:	7ffb      	ldrb	r3, [r7, #31]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d003      	beq.n	8001c8e <HAL_CAN_AddTxMessage+0x2c>
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	f040 80ad 	bne.w	8001de8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 8095 	beq.w	8001dd8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	0e1b      	lsrs	r3, r3, #24
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	6809      	ldr	r1, [r1, #0]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	440b      	add	r3, r1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e00f      	b.n	8001d06 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cf0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cfa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3318      	adds	r3, #24
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	440b      	add	r3, r1
 8001d04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3318      	adds	r3, #24
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	440b      	add	r3, r1
 8001d16:	3304      	adds	r3, #4
 8001d18:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	7d1b      	ldrb	r3, [r3, #20]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d111      	bne.n	8001d46 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3318      	adds	r3, #24
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3304      	adds	r3, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	6811      	ldr	r1, [r2, #0]
 8001d36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	440b      	add	r3, r1
 8001d42:	3304      	adds	r3, #4
 8001d44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3307      	adds	r3, #7
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	061a      	lsls	r2, r3, #24
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3306      	adds	r3, #6
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3305      	adds	r3, #5
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	4313      	orrs	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	3204      	adds	r2, #4
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	4610      	mov	r0, r2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	6811      	ldr	r1, [r2, #0]
 8001d6e:	ea43 0200 	orr.w	r2, r3, r0
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3303      	adds	r3, #3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	061a      	lsls	r2, r3, #24
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3301      	adds	r3, #1
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	4610      	mov	r0, r2
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	6811      	ldr	r1, [r2, #0]
 8001da4:	ea43 0200 	orr.w	r2, r3, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001db2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3318      	adds	r3, #24
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	6811      	ldr	r1, [r2, #0]
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3318      	adds	r3, #24
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e00e      	b.n	8001df6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e006      	b.n	8001df6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	@ (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	@ (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	@ (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	@ 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff fca6 	bl	8001984 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d008      	beq.n	8002058 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e052      	b.n	80020fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0216 	bic.w	r2, r2, #22
 8002066:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002076:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d103      	bne.n	8002088 <HAL_DMA_Abort+0x62>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0208 	bic.w	r2, r2, #8
 8002096:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a8:	e013      	b.n	80020d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020aa:	f7ff fc6b 	bl	8001984 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d90c      	bls.n	80020d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e015      	b.n	80020fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e4      	bne.n	80020aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	223f      	movs	r2, #63	@ 0x3f
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d004      	beq.n	8002124 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2280      	movs	r2, #128	@ 0x80
 800211e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e00c      	b.n	800213e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2205      	movs	r2, #5
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e165      	b.n	8002434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8154 	bne.w	800242e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d005      	beq.n	800219e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	2b02      	cmp	r3, #2
 800219c:	d130      	bne.n	8002200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 0201 	and.w	r2, r3, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b03      	cmp	r3, #3
 800220a:	d017      	beq.n	800223c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d123      	bne.n	8002290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80ae 	beq.w	800242e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b5d      	ldr	r3, [pc, #372]	@ (800244c <HAL_GPIO_Init+0x300>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a5c      	ldr	r2, [pc, #368]	@ (800244c <HAL_GPIO_Init+0x300>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b5a      	ldr	r3, [pc, #360]	@ (800244c <HAL_GPIO_Init+0x300>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ee:	4a58      	ldr	r2, [pc, #352]	@ (8002450 <HAL_GPIO_Init+0x304>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4f      	ldr	r2, [pc, #316]	@ (8002454 <HAL_GPIO_Init+0x308>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d025      	beq.n	8002366 <HAL_GPIO_Init+0x21a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4e      	ldr	r2, [pc, #312]	@ (8002458 <HAL_GPIO_Init+0x30c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01f      	beq.n	8002362 <HAL_GPIO_Init+0x216>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4d      	ldr	r2, [pc, #308]	@ (800245c <HAL_GPIO_Init+0x310>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d019      	beq.n	800235e <HAL_GPIO_Init+0x212>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4c      	ldr	r2, [pc, #304]	@ (8002460 <HAL_GPIO_Init+0x314>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_GPIO_Init+0x20e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4b      	ldr	r2, [pc, #300]	@ (8002464 <HAL_GPIO_Init+0x318>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00d      	beq.n	8002356 <HAL_GPIO_Init+0x20a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4a      	ldr	r2, [pc, #296]	@ (8002468 <HAL_GPIO_Init+0x31c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x206>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a49      	ldr	r2, [pc, #292]	@ (800246c <HAL_GPIO_Init+0x320>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_GPIO_Init+0x202>
 800234a:	2306      	movs	r3, #6
 800234c:	e00c      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 800234e:	2307      	movs	r3, #7
 8002350:	e00a      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002352:	2305      	movs	r3, #5
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002356:	2304      	movs	r3, #4
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4935      	ldr	r1, [pc, #212]	@ (8002450 <HAL_GPIO_Init+0x304>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <HAL_GPIO_Init+0x324>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023aa:	4a31      	ldr	r2, [pc, #196]	@ (8002470 <HAL_GPIO_Init+0x324>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <HAL_GPIO_Init+0x324>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d4:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <HAL_GPIO_Init+0x324>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023da:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <HAL_GPIO_Init+0x324>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <HAL_GPIO_Init+0x324>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <HAL_GPIO_Init+0x324>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002428:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <HAL_GPIO_Init+0x324>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f ae96 	bls.w	8002168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	@ 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40013800 	.word	0x40013800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020400 	.word	0x40020400
 800245c:	40020800 	.word	0x40020800
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40021000 	.word	0x40021000
 8002468:	40021400 	.word	0x40021400
 800246c:	40021800 	.word	0x40021800
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e12b      	b.n	8002712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fc74 	bl	8000dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	@ 0x24
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800250a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800250c:	f001 f8b8 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8002510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a81      	ldr	r2, [pc, #516]	@ (800271c <HAL_I2C_Init+0x274>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d807      	bhi.n	800252c <HAL_I2C_Init+0x84>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a80      	ldr	r2, [pc, #512]	@ (8002720 <HAL_I2C_Init+0x278>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e006      	b.n	800253a <HAL_I2C_Init+0x92>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a7d      	ldr	r2, [pc, #500]	@ (8002724 <HAL_I2C_Init+0x27c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bf94      	ite	ls
 8002534:	2301      	movls	r3, #1
 8002536:	2300      	movhi	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0e7      	b.n	8002712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a78      	ldr	r2, [pc, #480]	@ (8002728 <HAL_I2C_Init+0x280>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9b      	lsrs	r3, r3, #18
 800254c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a6a      	ldr	r2, [pc, #424]	@ (800271c <HAL_I2C_Init+0x274>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d802      	bhi.n	800257c <HAL_I2C_Init+0xd4>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	e009      	b.n	8002590 <HAL_I2C_Init+0xe8>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	4a69      	ldr	r2, [pc, #420]	@ (800272c <HAL_I2C_Init+0x284>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	3301      	adds	r3, #1
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	495c      	ldr	r1, [pc, #368]	@ (800271c <HAL_I2C_Init+0x274>)
 80025ac:	428b      	cmp	r3, r1
 80025ae:	d819      	bhi.n	80025e4 <HAL_I2C_Init+0x13c>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e59      	subs	r1, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025c4:	400b      	ands	r3, r1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_I2C_Init+0x138>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e59      	subs	r1, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025de:	e051      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e0:	2304      	movs	r3, #4
 80025e2:	e04f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <HAL_I2C_Init+0x168>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e012      	b.n	8002636 <HAL_I2C_Init+0x18e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	0099      	lsls	r1, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x196>
 800263a:	2301      	movs	r3, #1
 800263c:	e022      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <HAL_I2C_Init+0x1bc>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e58      	subs	r0, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	fbb0 f3f3 	udiv	r3, r0, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	6809      	ldr	r1, [r1, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6911      	ldr	r1, [r2, #16]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	000186a0 	.word	0x000186a0
 8002720:	001e847f 	.word	0x001e847f
 8002724:	003d08ff 	.word	0x003d08ff
 8002728:	431bde83 	.word	0x431bde83
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
 8002740:	4613      	mov	r3, r2
 8002742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff f91e 	bl	8001984 <HAL_GetTick>
 8002748:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b20      	cmp	r3, #32
 8002754:	f040 80e0 	bne.w	8002918 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2319      	movs	r3, #25
 800275e:	2201      	movs	r2, #1
 8002760:	4970      	ldr	r1, [pc, #448]	@ (8002924 <HAL_I2C_Master_Transmit+0x1f4>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fc64 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	e0d3      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_I2C_Master_Transmit+0x50>
 800277c:	2302      	movs	r3, #2
 800277e:	e0cc      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d007      	beq.n	80027a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2221      	movs	r2, #33	@ 0x21
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2210      	movs	r2, #16
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	893a      	ldrh	r2, [r7, #8]
 80027d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a50      	ldr	r2, [pc, #320]	@ (8002928 <HAL_I2C_Master_Transmit+0x1f8>)
 80027e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e8:	8979      	ldrh	r1, [r7, #10]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 face 	bl	8002d90 <I2C_MasterRequestWrite>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e08d      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002814:	e066      	b.n	80028e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fd22 	bl	8003264 <I2C_WaitOnTXEFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	2b04      	cmp	r3, #4
 800282c:	d107      	bne.n	800283e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06b      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d11b      	bne.n	80028b8 <HAL_I2C_Master_Transmit+0x188>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	6a39      	ldr	r1, [r7, #32]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fd19 	bl	80032f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d107      	bne.n	80028e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e01a      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d194      	bne.n	8002816 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	00100002 	.word	0x00100002
 8002928:	ffff0000 	.word	0xffff0000

0800292c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	@ 0x30
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	461a      	mov	r2, r3
 8002938:	460b      	mov	r3, r1
 800293a:	817b      	strh	r3, [r7, #10]
 800293c:	4613      	mov	r3, r2
 800293e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff f820 	bl	8001984 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	f040 8217 	bne.w	8002d82 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2319      	movs	r3, #25
 800295a:	2201      	movs	r2, #1
 800295c:	497c      	ldr	r1, [pc, #496]	@ (8002b50 <HAL_I2C_Master_Receive+0x224>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fb66 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	e20a      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_I2C_Master_Receive+0x50>
 8002978:	2302      	movs	r3, #2
 800297a:	e203      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d007      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2222      	movs	r2, #34	@ 0x22
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2210      	movs	r2, #16
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	893a      	ldrh	r2, [r7, #8]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002b54 <HAL_I2C_Master_Receive+0x228>)
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa52 	bl	8002e94 <I2C_MasterRequestRead>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c4      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d113      	bne.n	8002a2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	623b      	str	r3, [r7, #32]
 8002a16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e198      	b.n	8002d5c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d11b      	bne.n	8002a6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e178      	b.n	8002d5c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11b      	bne.n	8002aaa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	e158      	b.n	8002d5c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ad0:	e144      	b.n	8002d5c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	f200 80f1 	bhi.w	8002cbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d123      	bne.n	8002b2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fc4b 	bl	8003384 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e145      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b2a:	e117      	b.n	8002d5c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d14e      	bne.n	8002bd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4906      	ldr	r1, [pc, #24]	@ (8002b58 <HAL_I2C_Master_Receive+0x22c>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa76 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e11a      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
 8002b4e:	bf00      	nop
 8002b50:	00100002 	.word	0x00100002
 8002b54:	ffff0000 	.word	0xffff0000
 8002b58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bd0:	e0c4      	b.n	8002d5c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd8:	2200      	movs	r2, #0
 8002bda:	496c      	ldr	r1, [pc, #432]	@ (8002d8c <HAL_I2C_Master_Receive+0x460>)
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fa27 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0cb      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	2200      	movs	r2, #0
 8002c36:	4955      	ldr	r1, [pc, #340]	@ (8002d8c <HAL_I2C_Master_Receive+0x460>)
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f9f9 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e09d      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cbc:	e04e      	b.n	8002d5c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fb5e 	bl	8003384 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e058      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d124      	bne.n	8002d5c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d107      	bne.n	8002d2a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d28:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f aeb6 	bne.w	8002ad2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e000      	b.n	8002d84 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
  }
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3728      	adds	r7, #40	@ 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	00010004 	.word	0x00010004

08002d90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d006      	beq.n	8002dba <I2C_MasterRequestWrite+0x2a>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d003      	beq.n	8002dba <I2C_MasterRequestWrite+0x2a>
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002db8:	d108      	bne.n	8002dcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e00b      	b.n	8002de4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	2b12      	cmp	r3, #18
 8002dd2:	d107      	bne.n	8002de4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002de2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f91d 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e0a:	d103      	bne.n	8002e14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e035      	b.n	8002e84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e20:	d108      	bne.n	8002e34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e30:	611a      	str	r2, [r3, #16]
 8002e32:	e01b      	b.n	8002e6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e34:	897b      	ldrh	r3, [r7, #10]
 8002e36:	11db      	asrs	r3, r3, #7
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 0306 	and.w	r3, r3, #6
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f063 030f 	orn	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	490e      	ldr	r1, [pc, #56]	@ (8002e8c <I2C_MasterRequestWrite+0xfc>)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f966 	bl	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e010      	b.n	8002e84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4907      	ldr	r1, [pc, #28]	@ (8002e90 <I2C_MasterRequestWrite+0x100>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f956 	bl	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	00010008 	.word	0x00010008
 8002e90:	00010002 	.word	0x00010002

08002e94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d006      	beq.n	8002ece <I2C_MasterRequestRead+0x3a>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d003      	beq.n	8002ece <I2C_MasterRequestRead+0x3a>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ecc:	d108      	bne.n	8002ee0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e00b      	b.n	8002ef8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	2b11      	cmp	r3, #17
 8002ee6:	d107      	bne.n	8002ef8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f893 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1e:	d103      	bne.n	8002f28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e079      	b.n	8003020 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f34:	d108      	bne.n	8002f48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]
 8002f46:	e05f      	b.n	8003008 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f48:	897b      	ldrh	r3, [r7, #10]
 8002f4a:	11db      	asrs	r3, r3, #7
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0306 	and.w	r3, r3, #6
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f063 030f 	orn	r3, r3, #15
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4930      	ldr	r1, [pc, #192]	@ (8003028 <I2C_MasterRequestRead+0x194>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f8dc 	bl	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e054      	b.n	8003020 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f76:	897b      	ldrh	r3, [r7, #10]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4929      	ldr	r1, [pc, #164]	@ (800302c <I2C_MasterRequestRead+0x198>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8cc 	bl	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e044      	b.n	8003020 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f831 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00d      	beq.n	8002ff0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe2:	d103      	bne.n	8002fec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e017      	b.n	8003020 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ff0:	897b      	ldrh	r3, [r7, #10]
 8002ff2:	11db      	asrs	r3, r3, #7
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0306 	and.w	r3, r3, #6
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f063 030e 	orn	r3, r3, #14
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4907      	ldr	r1, [pc, #28]	@ (800302c <I2C_MasterRequestRead+0x198>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f888 	bl	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	00010008 	.word	0x00010008
 800302c:	00010002 	.word	0x00010002

08003030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	e048      	b.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d044      	beq.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fc9b 	bl	8001984 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d139      	bne.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	0c1b      	lsrs	r3, r3, #16
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10d      	bne.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x56>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	e00c      	b.n	80030a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	43da      	mvns	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d116      	bne.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e023      	b.n	800311c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10d      	bne.n	80030fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	e00c      	b.n	8003114 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	429a      	cmp	r2, r3
 8003118:	d093      	beq.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003132:	e071      	b.n	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003142:	d123      	bne.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003152:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800315c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e067      	b.n	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d041      	beq.n	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003194:	f7fe fbf6 	bl	8001984 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d302      	bcc.n	80031aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d136      	bne.n	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10c      	bne.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4013      	ands	r3, r2
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e00b      	b.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e021      	b.n	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10c      	bne.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	43da      	mvns	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e00b      	b.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f af6d 	bne.w	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003270:	e034      	b.n	80032dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f8e3 	bl	800343e <I2C_IsAcknowledgeFailed>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e034      	b.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d028      	beq.n	80032dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7fe fb7b 	bl	8001984 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11d      	bne.n	80032dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b80      	cmp	r3, #128	@ 0x80
 80032ac:	d016      	beq.n	80032dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b80      	cmp	r3, #128	@ 0x80
 80032e8:	d1c3      	bne.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003300:	e034      	b.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f89b 	bl	800343e <I2C_IsAcknowledgeFailed>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e034      	b.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d028      	beq.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe fb33 	bl	8001984 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11d      	bne.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d016      	beq.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e007      	b.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b04      	cmp	r3, #4
 8003378:	d1c3      	bne.n	8003302 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003390:	e049      	b.n	8003426 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d119      	bne.n	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0210 	mvn.w	r2, #16
 80033a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e030      	b.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7fe fad6 	bl	8001984 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11d      	bne.n	8003426 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f4:	2b40      	cmp	r3, #64	@ 0x40
 80033f6:	d016      	beq.n	8003426 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e007      	b.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	d1ae      	bne.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003454:	d11b      	bne.n	800348e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800345e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0cc      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b68      	ldr	r3, [pc, #416]	@ (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b65      	ldr	r3, [pc, #404]	@ (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	@ (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a58      	ldr	r2, [pc, #352]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a52      	ldr	r2, [pc, #328]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3f      	ldr	r3, [pc, #252]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3b      	ldr	r3, [pc, #236]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e067      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b37      	ldr	r3, [pc, #220]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fe f9fa 	bl	8001984 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe f9f6 	bl	8001984 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b25      	ldr	r3, [pc, #148]	@ (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b22      	ldr	r3, [pc, #136]	@ (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	@ (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f855 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490a      	ldr	r1, [pc, #40]	@ (800365c <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe f95a 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023c00 	.word	0x40023c00
 8003658:	40023800 	.word	0x40023800
 800365c:	080067cc 	.word	0x080067cc
 8003660:	20000008 	.word	0x20000008
 8003664:	2000000c 	.word	0x2000000c

08003668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000008 	.word	0x20000008

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003684:	f7ff fff0 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	@ (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	080067dc 	.word	0x080067dc

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036ac:	f7ff ffdc 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0b5b      	lsrs	r3, r3, #13
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	@ (80036cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080067dc 	.word	0x080067dc

080036d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d4:	b0ae      	sub	sp, #184	@ 0xb8
 80036d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f6:	4bcb      	ldr	r3, [pc, #812]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	f200 8206 	bhi.w	8003b10 <HAL_RCC_GetSysClockFreq+0x440>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003741 	.word	0x08003741
 8003710:	08003b11 	.word	0x08003b11
 8003714:	08003b11 	.word	0x08003b11
 8003718:	08003b11 	.word	0x08003b11
 800371c:	08003749 	.word	0x08003749
 8003720:	08003b11 	.word	0x08003b11
 8003724:	08003b11 	.word	0x08003b11
 8003728:	08003b11 	.word	0x08003b11
 800372c:	08003751 	.word	0x08003751
 8003730:	08003b11 	.word	0x08003b11
 8003734:	08003b11 	.word	0x08003b11
 8003738:	08003b11 	.word	0x08003b11
 800373c:	08003941 	.word	0x08003941
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4bb9      	ldr	r3, [pc, #740]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x358>)
 8003742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003746:	e1e7      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4bb8      	ldr	r3, [pc, #736]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x35c>)
 800374a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800374e:	e1e3      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003750:	4bb4      	ldr	r3, [pc, #720]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800375c:	4bb1      	ldr	r3, [pc, #708]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d071      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003768:	4bae      	ldr	r3, [pc, #696]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003774:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800377c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003784:	2300      	movs	r3, #0
 8003786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800378a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80037c0:	4649      	mov	r1, r9
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4641      	mov	r1, r8
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4641      	mov	r1, r8
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4641      	mov	r1, r8
 80037d0:	1a51      	subs	r1, r2, r1
 80037d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037d4:	4649      	mov	r1, r9
 80037d6:	eb63 0301 	sbc.w	r3, r3, r1
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80037e8:	4649      	mov	r1, r9
 80037ea:	00cb      	lsls	r3, r1, #3
 80037ec:	4641      	mov	r1, r8
 80037ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f2:	4641      	mov	r1, r8
 80037f4:	00ca      	lsls	r2, r1, #3
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	4622      	mov	r2, r4
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
 8003802:	462b      	mov	r3, r5
 8003804:	460a      	mov	r2, r1
 8003806:	eb42 0303 	adc.w	r3, r2, r3
 800380a:	637b      	str	r3, [r7, #52]	@ 0x34
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003818:	4629      	mov	r1, r5
 800381a:	024b      	lsls	r3, r1, #9
 800381c:	4621      	mov	r1, r4
 800381e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003822:	4621      	mov	r1, r4
 8003824:	024a      	lsls	r2, r1, #9
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003834:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003838:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800383c:	f7fc fd40 	bl	80002c0 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800384a:	e067      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384c:	4b75      	ldr	r3, [pc, #468]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003858:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800385c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003866:	2300      	movs	r3, #0
 8003868:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800386a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4621      	mov	r1, r4
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800388c:	4629      	mov	r1, r5
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80038a0:	4649      	mov	r1, r9
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	4641      	mov	r1, r8
 80038a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038aa:	4641      	mov	r1, r8
 80038ac:	018a      	lsls	r2, r1, #6
 80038ae:	4641      	mov	r1, r8
 80038b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80038b4:	4649      	mov	r1, r9
 80038b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ce:	4692      	mov	sl, r2
 80038d0:	469b      	mov	fp, r3
 80038d2:	4623      	mov	r3, r4
 80038d4:	eb1a 0303 	adds.w	r3, sl, r3
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	462b      	mov	r3, r5
 80038dc:	eb4b 0303 	adc.w	r3, fp, r3
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038ee:	4629      	mov	r1, r5
 80038f0:	028b      	lsls	r3, r1, #10
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f8:	4621      	mov	r1, r4
 80038fa:	028a      	lsls	r2, r1, #10
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003904:	2200      	movs	r2, #0
 8003906:	673b      	str	r3, [r7, #112]	@ 0x70
 8003908:	677a      	str	r2, [r7, #116]	@ 0x74
 800390a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800390e:	f7fc fcd7 	bl	80002c0 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4613      	mov	r3, r2
 8003918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800391c:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	3301      	adds	r3, #1
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800392e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800393e:	e0eb      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003940:	4b38      	ldr	r3, [pc, #224]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800394c:	4b35      	ldr	r3, [pc, #212]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d06b      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003958:	4b32      	ldr	r3, [pc, #200]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x354>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	099b      	lsrs	r3, r3, #6
 800395e:	2200      	movs	r2, #0
 8003960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	663b      	str	r3, [r7, #96]	@ 0x60
 800396c:	2300      	movs	r3, #0
 800396e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003970:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003974:	4622      	mov	r2, r4
 8003976:	462b      	mov	r3, r5
 8003978:	f04f 0000 	mov.w	r0, #0
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	0159      	lsls	r1, r3, #5
 8003982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003986:	0150      	lsls	r0, r2, #5
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4621      	mov	r1, r4
 800398e:	1a51      	subs	r1, r2, r1
 8003990:	61b9      	str	r1, [r7, #24]
 8003992:	4629      	mov	r1, r5
 8003994:	eb63 0301 	sbc.w	r3, r3, r1
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039a6:	4659      	mov	r1, fp
 80039a8:	018b      	lsls	r3, r1, #6
 80039aa:	4651      	mov	r1, sl
 80039ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039b0:	4651      	mov	r1, sl
 80039b2:	018a      	lsls	r2, r1, #6
 80039b4:	4651      	mov	r1, sl
 80039b6:	ebb2 0801 	subs.w	r8, r2, r1
 80039ba:	4659      	mov	r1, fp
 80039bc:	eb63 0901 	sbc.w	r9, r3, r1
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d4:	4690      	mov	r8, r2
 80039d6:	4699      	mov	r9, r3
 80039d8:	4623      	mov	r3, r4
 80039da:	eb18 0303 	adds.w	r3, r8, r3
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	462b      	mov	r3, r5
 80039e2:	eb49 0303 	adc.w	r3, r9, r3
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039f4:	4629      	mov	r1, r5
 80039f6:	024b      	lsls	r3, r1, #9
 80039f8:	4621      	mov	r1, r4
 80039fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039fe:	4621      	mov	r1, r4
 8003a00:	024a      	lsls	r2, r1, #9
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a14:	f7fc fc54 	bl	80002c0 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a22:	e065      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x420>
 8003a24:	40023800 	.word	0x40023800
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a30:	4b3d      	ldr	r3, [pc, #244]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	099b      	lsrs	r3, r3, #6
 8003a36:	2200      	movs	r2, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a40:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a42:	2300      	movs	r3, #0
 8003a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003a4a:	4642      	mov	r2, r8
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	0159      	lsls	r1, r3, #5
 8003a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5c:	0150      	lsls	r0, r2, #5
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4641      	mov	r1, r8
 8003a64:	1a51      	subs	r1, r2, r1
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	4649      	mov	r1, r9
 8003a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	018b      	lsls	r3, r1, #6
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a86:	4651      	mov	r1, sl
 8003a88:	018a      	lsls	r2, r1, #6
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	1a54      	subs	r4, r2, r1
 8003a8e:	4659      	mov	r1, fp
 8003a90:	eb63 0501 	sbc.w	r5, r3, r1
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	00eb      	lsls	r3, r5, #3
 8003a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa2:	00e2      	lsls	r2, r4, #3
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	4643      	mov	r3, r8
 8003aaa:	18e3      	adds	r3, r4, r3
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	464b      	mov	r3, r9
 8003ab0:	eb45 0303 	adc.w	r3, r5, r3
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	028b      	lsls	r3, r1, #10
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003acc:	4621      	mov	r1, r4
 8003ace:	028a      	lsls	r2, r1, #10
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ad8:	2200      	movs	r2, #0
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003adc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ade:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ae2:	f7fc fbed 	bl	80002c0 <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4613      	mov	r3, r2
 8003aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003af0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0f1b      	lsrs	r3, r3, #28
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b0e:	e003      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b10:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	37b8      	adds	r7, #184	@ 0xb8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400

08003b30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e28d      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8083 	beq.w	8003c56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b50:	4b94      	ldr	r3, [pc, #592]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d019      	beq.n	8003b90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b5c:	4b91      	ldr	r3, [pc, #580]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b68:	4b8e      	ldr	r3, [pc, #568]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b74:	d00c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b8b      	ldr	r3, [pc, #556]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d112      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b82:	4b88      	ldr	r3, [pc, #544]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	4b84      	ldr	r3, [pc, #528]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05b      	beq.n	8003c54 <HAL_RCC_OscConfig+0x124>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d157      	bne.n	8003c54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e25a      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x90>
 8003bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e01d      	b.n	8003bfc <HAL_RCC_OscConfig+0xcc>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0xb4>
 8003bca:	4b76      	ldr	r3, [pc, #472]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a75      	ldr	r2, [pc, #468]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a72      	ldr	r2, [pc, #456]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0xcc>
 8003be4:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd febe 	bl	8001984 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd feba 	bl	8001984 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	@ 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e21f      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0xdc>
 8003c2a:	e014      	b.n	8003c56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd feaa 	bl	8001984 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd fea6 	bl	8001984 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	@ 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e20b      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	4b57      	ldr	r3, [pc, #348]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x104>
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d06f      	beq.n	8003d42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c62:	4b50      	ldr	r3, [pc, #320]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d017      	beq.n	8003c9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d105      	bne.n	8003c86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c86:	4b47      	ldr	r3, [pc, #284]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d11c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c92:	4b44      	ldr	r3, [pc, #272]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d116      	bne.n	8003ccc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	4b41      	ldr	r3, [pc, #260]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x186>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e1d3      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4937      	ldr	r1, [pc, #220]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	e03a      	b.n	8003d42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd4:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <HAL_RCC_OscConfig+0x278>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7fd fe53 	bl	8001984 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce2:	f7fd fe4f 	bl	8001984 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1b4      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d00:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4925      	ldr	r1, [pc, #148]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]
 8003d14:	e015      	b.n	8003d42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d16:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <HAL_RCC_OscConfig+0x278>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fd fe32 	bl	8001984 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d24:	f7fd fe2e 	bl	8001984 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e193      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d036      	beq.n	8003dbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d56:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <HAL_RCC_OscConfig+0x27c>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fe12 	bl	8001984 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fd fe0e 	bl	8001984 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e173      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x234>
 8003d82:	e01b      	b.n	8003dbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d84:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <HAL_RCC_OscConfig+0x27c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fd fdfb 	bl	8001984 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d90:	e00e      	b.n	8003db0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d92:	f7fd fdf7 	bl	8001984 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d907      	bls.n	8003db0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e15c      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
 8003da4:	40023800 	.word	0x40023800
 8003da8:	42470000 	.word	0x42470000
 8003dac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	4b8a      	ldr	r3, [pc, #552]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ea      	bne.n	8003d92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8097 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dce:	4b83      	ldr	r3, [pc, #524]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	4b7f      	ldr	r3, [pc, #508]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dea:	4b7c      	ldr	r3, [pc, #496]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfa:	4b79      	ldr	r3, [pc, #484]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d118      	bne.n	8003e38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e06:	4b76      	ldr	r3, [pc, #472]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a75      	ldr	r2, [pc, #468]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b0>)
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e12:	f7fd fdb7 	bl	8001984 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1a:	f7fd fdb3 	bl	8001984 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e118      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x31e>
 8003e40:	4b66      	ldr	r3, [pc, #408]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a65      	ldr	r2, [pc, #404]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4c:	e01c      	b.n	8003e88 <HAL_RCC_OscConfig+0x358>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x340>
 8003e56:	4b61      	ldr	r3, [pc, #388]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a60      	ldr	r2, [pc, #384]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e5c:	f043 0304 	orr.w	r3, r3, #4
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e62:	4b5e      	ldr	r3, [pc, #376]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	4a5d      	ldr	r2, [pc, #372]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCC_OscConfig+0x358>
 8003e70:	4b5a      	ldr	r3, [pc, #360]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e74:	4a59      	ldr	r2, [pc, #356]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7c:	4b57      	ldr	r3, [pc, #348]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e80:	4a56      	ldr	r2, [pc, #344]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd fd78 	bl	8001984 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fd fd74 	bl	8001984 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0d7      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	4b4b      	ldr	r3, [pc, #300]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ee      	beq.n	8003e98 <HAL_RCC_OscConfig+0x368>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fd fd62 	bl	8001984 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd fd5e 	bl	8001984 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0c1      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eda:	4b40      	ldr	r3, [pc, #256]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ee      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eec:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80ad 	beq.w	800405c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f02:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d060      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d145      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b33      	ldr	r3, [pc, #204]	@ (8003fe4 <HAL_RCC_OscConfig+0x4b4>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fd fd32 	bl	8001984 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd fd2e 	bl	8001984 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e093      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	4b29      	ldr	r3, [pc, #164]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	019b      	lsls	r3, r3, #6
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	491b      	ldr	r1, [pc, #108]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f74:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <HAL_RCC_OscConfig+0x4b4>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fd fd03 	bl	8001984 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd fcff 	bl	8001984 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e064      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x452>
 8003fa0:	e05c      	b.n	800405c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa2:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <HAL_RCC_OscConfig+0x4b4>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fcec 	bl	8001984 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fce8 	bl	8001984 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04d      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x480>
 8003fce:	e045      	b.n	800405c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e040      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8004068 <HAL_RCC_OscConfig+0x538>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d030      	beq.n	8004058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d129      	bne.n	8004058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d122      	bne.n	8004058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800401e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004020:	4293      	cmp	r3, r2
 8004022:	d119      	bne.n	8004058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d10f      	bne.n	8004058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800

0800406c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e042      	b.n	8004104 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fb62 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fdbd 	bl	8004c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	@ 0x28
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b20      	cmp	r3, #32
 800412a:	d175      	bne.n	8004218 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_UART_Transmit+0x2c>
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e06e      	b.n	800421a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2221      	movs	r2, #33	@ 0x21
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800414a:	f7fd fc1b 	bl	8001984 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004164:	d108      	bne.n	8004178 <HAL_UART_Transmit+0x6c>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e003      	b.n	8004180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004180:	e02e      	b.n	80041e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	@ 0x80
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fb1f 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e03a      	b.n	800421a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	3302      	adds	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e007      	b.n	80041d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1cb      	bne.n	8004182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2140      	movs	r1, #64	@ 0x40
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 faeb 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e006      	b.n	800421a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	4613      	mov	r3, r2
 800422e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b20      	cmp	r3, #32
 800423a:	d112      	bne.n	8004262 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_UART_Receive_IT+0x26>
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e00b      	b.n	8004264 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	461a      	mov	r2, r3
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fb12 	bl	8004882 <UART_Start_Receive_IT>
 800425e:	4603      	mov	r3, r0
 8004260:	e000      	b.n	8004264 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b0ba      	sub	sp, #232	@ 0xe8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_UART_IRQHandler+0x66>
 80042be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fbf2 	bl	8004ab4 <UART_Receive_IT>
      return;
 80042d0:	e25b      	b.n	800478a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80de 	beq.w	8004498 <HAL_UART_IRQHandler+0x22c>
 80042dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80d1 	beq.w	8004498 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_UART_IRQHandler+0xae>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_UART_IRQHandler+0xd2>
 8004326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	f043 0202 	orr.w	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_UART_IRQHandler+0xf6>
 800434a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d011      	beq.n	8004392 <HAL_UART_IRQHandler+0x126>
 800436e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800437a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f043 0208 	orr.w	r2, r3, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 81f2 	beq.w	8004780 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_UART_IRQHandler+0x14e>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fb7d 	bl	8004ab4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <HAL_UART_IRQHandler+0x17a>
 80043de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d04f      	beq.n	8004486 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa85 	bl	80048f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f6:	2b40      	cmp	r3, #64	@ 0x40
 80043f8:	d141      	bne.n	800447e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004410:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004418:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3314      	adds	r3, #20
 8004422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004426:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800442a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800443e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1d9      	bne.n	80043fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d013      	beq.n	8004476 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	4a7e      	ldr	r2, [pc, #504]	@ (800464c <HAL_UART_IRQHandler+0x3e0>)
 8004454:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fe53 	bl	8002106 <HAL_DMA_Abort_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004474:	e00e      	b.n	8004494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f994 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e00a      	b.n	8004494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f990 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e006      	b.n	8004494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f98c 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004492:	e175      	b.n	8004780 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	bf00      	nop
    return;
 8004496:	e173      	b.n	8004780 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	f040 814f 	bne.w	8004740 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8148 	beq.w	8004740 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8141 	beq.w	8004740 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044de:	2b40      	cmp	r3, #64	@ 0x40
 80044e0:	f040 80b6 	bne.w	8004650 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8145 	beq.w	8004784 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004502:	429a      	cmp	r2, r3
 8004504:	f080 813e 	bcs.w	8004784 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800450e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451a:	f000 8088 	beq.w	800462e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800453c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800454a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800454e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004556:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1d9      	bne.n	800451e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800457a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800458e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004592:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004596:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e1      	bne.n	800456a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3314      	adds	r3, #20
 80045ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e3      	bne.n	80045a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045fe:	f023 0310 	bic.w	r3, r3, #16
 8004602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004610:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004612:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004616:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800461e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e3      	bne.n	80045ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004628:	4618      	mov	r0, r3
 800462a:	f7fd fcfc 	bl	8002026 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800463c:	b29b      	uxth	r3, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	b29b      	uxth	r3, r3
 8004642:	4619      	mov	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8b7 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800464a:	e09b      	b.n	8004784 <HAL_UART_IRQHandler+0x518>
 800464c:	080049bd 	.word	0x080049bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004658:	b29b      	uxth	r3, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 808e 	beq.w	8004788 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800466c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8089 	beq.w	8004788 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800468c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800469a:	647a      	str	r2, [r7, #68]	@ 0x44
 800469c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e3      	bne.n	8004676 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3314      	adds	r3, #20
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	623b      	str	r3, [r7, #32]
   return(result);
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3314      	adds	r3, #20
 80046ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80046d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e3      	bne.n	80046ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	60fb      	str	r3, [r7, #12]
   return(result);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0310 	bic.w	r3, r3, #16
 800470a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004718:	61fa      	str	r2, [r7, #28]
 800471a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	617b      	str	r3, [r7, #20]
   return(result);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e3      	bne.n	80046f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004732:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f83d 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800473e:	e023      	b.n	8004788 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <HAL_UART_IRQHandler+0x4f4>
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f943 	bl	80049e4 <UART_Transmit_IT>
    return;
 800475e:	e014      	b.n	800478a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00e      	beq.n	800478a <HAL_UART_IRQHandler+0x51e>
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f983 	bl	8004a84 <UART_EndTransmit_IT>
    return;
 800477e:	e004      	b.n	800478a <HAL_UART_IRQHandler+0x51e>
    return;
 8004780:	bf00      	nop
 8004782:	e002      	b.n	800478a <HAL_UART_IRQHandler+0x51e>
      return;
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <HAL_UART_IRQHandler+0x51e>
      return;
 8004788:	bf00      	nop
  }
}
 800478a:	37e8      	adds	r7, #232	@ 0xe8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e0:	e03b      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d037      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fd f8cb 	bl	8001984 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <UART_WaitOnFlagUntilTimeout+0x30>
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e03a      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d023      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b80      	cmp	r3, #128	@ 0x80
 8004816:	d020      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b40      	cmp	r3, #64	@ 0x40
 800481c:	d01d      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b08      	cmp	r3, #8
 800482a:	d116      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f857 	bl	80048f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2208      	movs	r2, #8
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e00f      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	429a      	cmp	r2, r3
 8004876:	d0b4      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	4613      	mov	r3, r2
 800488e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2222      	movs	r2, #34	@ 0x22
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0220 	orr.w	r2, r2, #32
 80048e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b095      	sub	sp, #84	@ 0x54
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800491e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800492c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	61fb      	str	r3, [r7, #28]
   return(result);
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e5      	bne.n	8004932 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	2b01      	cmp	r3, #1
 800496c:	d119      	bne.n	80049a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	60bb      	str	r3, [r7, #8]
   return(result);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 0310 	bic.w	r3, r3, #16
 8004984:	647b      	str	r3, [r7, #68]	@ 0x44
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800498e:	61ba      	str	r2, [r7, #24]
 8004990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6979      	ldr	r1, [r7, #20]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	613b      	str	r3, [r7, #16]
   return(result);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049b0:	bf00      	nop
 80049b2:	3754      	adds	r7, #84	@ 0x54
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fee4 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b21      	cmp	r3, #33	@ 0x21
 80049f6:	d13e      	bne.n	8004a76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a00:	d114      	bne.n	8004a2c <UART_Transmit_IT+0x48>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d110      	bne.n	8004a2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	1c9a      	adds	r2, r3, #2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	621a      	str	r2, [r3, #32]
 8004a2a:	e008      	b.n	8004a3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	1c59      	adds	r1, r3, #1
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6211      	str	r1, [r2, #32]
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e000      	b.n	8004a78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
  }
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff fe73 	bl	8004790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	@ 0x30
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b22      	cmp	r3, #34	@ 0x22
 8004ac6:	f040 80ae 	bne.w	8004c26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad2:	d117      	bne.n	8004b04 <UART_Receive_IT+0x50>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d113      	bne.n	8004b04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b02:	e026      	b.n	8004b52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b16:	d007      	beq.n	8004b28 <UART_Receive_IT+0x74>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <UART_Receive_IT+0x82>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e008      	b.n	8004b48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d15d      	bne.n	8004c22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0220 	bic.w	r2, r2, #32
 8004b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d135      	bne.n	8004c18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f023 0310 	bic.w	r3, r3, #16
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd2:	623a      	str	r2, [r7, #32]
 8004bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	69f9      	ldr	r1, [r7, #28]
 8004bd8:	6a3a      	ldr	r2, [r7, #32]
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e5      	bne.n	8004bb2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d10a      	bne.n	8004c0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fdd1 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
 8004c16:	e002      	b.n	8004c1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fc fb4d 	bl	80012b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e002      	b.n	8004c28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e000      	b.n	8004c28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c26:	2302      	movs	r3, #2
  }
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3730      	adds	r7, #48	@ 0x30
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c34:	b0c0      	sub	sp, #256	@ 0x100
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	68d9      	ldr	r1, [r3, #12]
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	ea40 0301 	orr.w	r3, r0, r1
 8004c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c88:	f021 010c 	bic.w	r1, r1, #12
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c96:	430b      	orrs	r3, r1
 8004c98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004caa:	6999      	ldr	r1, [r3, #24]
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	ea40 0301 	orr.w	r3, r0, r1
 8004cb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b8f      	ldr	r3, [pc, #572]	@ (8004efc <UART_SetConfig+0x2cc>)
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d005      	beq.n	8004cd0 <UART_SetConfig+0xa0>
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b8d      	ldr	r3, [pc, #564]	@ (8004f00 <UART_SetConfig+0x2d0>)
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d104      	bne.n	8004cda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd0:	f7fe fcea 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8004cd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cd8:	e003      	b.n	8004ce2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cda:	f7fe fcd1 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8004cde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cec:	f040 810c 	bne.w	8004f08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	1891      	adds	r1, r2, r2
 8004d08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d0a:	415b      	adcs	r3, r3
 8004d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d12:	4621      	mov	r1, r4
 8004d14:	eb12 0801 	adds.w	r8, r2, r1
 8004d18:	4629      	mov	r1, r5
 8004d1a:	eb43 0901 	adc.w	r9, r3, r1
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d32:	4690      	mov	r8, r2
 8004d34:	4699      	mov	r9, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	eb18 0303 	adds.w	r3, r8, r3
 8004d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d40:	462b      	mov	r3, r5
 8004d42:	eb49 0303 	adc.w	r3, r9, r3
 8004d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d5e:	460b      	mov	r3, r1
 8004d60:	18db      	adds	r3, r3, r3
 8004d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d64:	4613      	mov	r3, r2
 8004d66:	eb42 0303 	adc.w	r3, r2, r3
 8004d6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d74:	f7fb faa4 	bl	80002c0 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4b61      	ldr	r3, [pc, #388]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	011c      	lsls	r4, r3, #4
 8004d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004da0:	415b      	adcs	r3, r3
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004da8:	4641      	mov	r1, r8
 8004daa:	eb12 0a01 	adds.w	sl, r2, r1
 8004dae:	4649      	mov	r1, r9
 8004db0:	eb43 0b01 	adc.w	fp, r3, r1
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc8:	4692      	mov	sl, r2
 8004dca:	469b      	mov	fp, r3
 8004dcc:	4643      	mov	r3, r8
 8004dce:	eb1a 0303 	adds.w	r3, sl, r3
 8004dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004df0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004df4:	460b      	mov	r3, r1
 8004df6:	18db      	adds	r3, r3, r3
 8004df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	eb42 0303 	adc.w	r3, r2, r3
 8004e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e0a:	f7fb fa59 	bl	80002c0 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	4b3b      	ldr	r3, [pc, #236]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004e16:	fba3 2301 	umull	r2, r3, r3, r1
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2264      	movs	r2, #100	@ 0x64
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	1acb      	subs	r3, r1, r3
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e2a:	4b36      	ldr	r3, [pc, #216]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e38:	441c      	add	r4, r3
 8004e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	1891      	adds	r1, r2, r2
 8004e52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e54:	415b      	adcs	r3, r3
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	1851      	adds	r1, r2, r1
 8004e60:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e62:	4649      	mov	r1, r9
 8004e64:	414b      	adcs	r3, r1
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e74:	4659      	mov	r1, fp
 8004e76:	00cb      	lsls	r3, r1, #3
 8004e78:	4651      	mov	r1, sl
 8004e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7e:	4651      	mov	r1, sl
 8004e80:	00ca      	lsls	r2, r1, #3
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	4642      	mov	r2, r8
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e90:	464b      	mov	r3, r9
 8004e92:	460a      	mov	r2, r1
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ea8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004eac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ec2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ec6:	f7fb f9fb 	bl	80002c0 <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	2164      	movs	r1, #100	@ 0x64
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	3332      	adds	r3, #50	@ 0x32
 8004ee2:	4a08      	ldr	r2, [pc, #32]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	f003 0207 	and.w	r2, r3, #7
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4422      	add	r2, r4
 8004ef6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ef8:	e106      	b.n	8005108 <UART_SetConfig+0x4d8>
 8004efa:	bf00      	nop
 8004efc:	40011000 	.word	0x40011000
 8004f00:	40011400 	.word	0x40011400
 8004f04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	1891      	adds	r1, r2, r2
 8004f20:	6239      	str	r1, [r7, #32]
 8004f22:	415b      	adcs	r3, r3
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	1854      	adds	r4, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb43 0501 	adc.w	r5, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	00eb      	lsls	r3, r5, #3
 8004f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f42:	00e2      	lsls	r2, r4, #3
 8004f44:	4614      	mov	r4, r2
 8004f46:	461d      	mov	r5, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	18e3      	adds	r3, r4, r3
 8004f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f50:	464b      	mov	r3, r9
 8004f52:	eb45 0303 	adc.w	r3, r5, r3
 8004f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f76:	4629      	mov	r1, r5
 8004f78:	008b      	lsls	r3, r1, #2
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f80:	4621      	mov	r1, r4
 8004f82:	008a      	lsls	r2, r1, #2
 8004f84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f88:	f7fb f99a 	bl	80002c0 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4b60      	ldr	r3, [pc, #384]	@ (8005114 <UART_SetConfig+0x4e4>)
 8004f92:	fba3 2302 	umull	r2, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	011c      	lsls	r4, r3, #4
 8004f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	1891      	adds	r1, r2, r2
 8004fb2:	61b9      	str	r1, [r7, #24]
 8004fb4:	415b      	adcs	r3, r3
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	1851      	adds	r1, r2, r1
 8004fc0:	6139      	str	r1, [r7, #16]
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	414b      	adcs	r3, r1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	00cb      	lsls	r3, r1, #3
 8004fd8:	4651      	mov	r1, sl
 8004fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fde:	4651      	mov	r1, sl
 8004fe0:	00ca      	lsls	r2, r1, #3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4642      	mov	r2, r8
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005006:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005014:	4649      	mov	r1, r9
 8005016:	008b      	lsls	r3, r1, #2
 8005018:	4641      	mov	r1, r8
 800501a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501e:	4641      	mov	r1, r8
 8005020:	008a      	lsls	r2, r1, #2
 8005022:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005026:	f7fb f94b 	bl	80002c0 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4611      	mov	r1, r2
 8005030:	4b38      	ldr	r3, [pc, #224]	@ (8005114 <UART_SetConfig+0x4e4>)
 8005032:	fba3 2301 	umull	r2, r3, r3, r1
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2264      	movs	r2, #100	@ 0x64
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	1acb      	subs	r3, r1, r3
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	3332      	adds	r3, #50	@ 0x32
 8005044:	4a33      	ldr	r2, [pc, #204]	@ (8005114 <UART_SetConfig+0x4e4>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005050:	441c      	add	r4, r3
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	673b      	str	r3, [r7, #112]	@ 0x70
 800505a:	677a      	str	r2, [r7, #116]	@ 0x74
 800505c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	1891      	adds	r1, r2, r2
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	415b      	adcs	r3, r3
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005070:	4641      	mov	r1, r8
 8005072:	1851      	adds	r1, r2, r1
 8005074:	6039      	str	r1, [r7, #0]
 8005076:	4649      	mov	r1, r9
 8005078:	414b      	adcs	r3, r1
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005088:	4659      	mov	r1, fp
 800508a:	00cb      	lsls	r3, r1, #3
 800508c:	4651      	mov	r1, sl
 800508e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005092:	4651      	mov	r1, sl
 8005094:	00ca      	lsls	r2, r1, #3
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	4603      	mov	r3, r0
 800509c:	4642      	mov	r2, r8
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050a2:	464b      	mov	r3, r9
 80050a4:	460a      	mov	r2, r1
 80050a6:	eb42 0303 	adc.w	r3, r2, r3
 80050aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050c4:	4649      	mov	r1, r9
 80050c6:	008b      	lsls	r3, r1, #2
 80050c8:	4641      	mov	r1, r8
 80050ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ce:	4641      	mov	r1, r8
 80050d0:	008a      	lsls	r2, r1, #2
 80050d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050d6:	f7fb f8f3 	bl	80002c0 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <UART_SetConfig+0x4e4>)
 80050e0:	fba3 1302 	umull	r1, r3, r3, r2
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2164      	movs	r1, #100	@ 0x64
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	3332      	adds	r3, #50	@ 0x32
 80050f2:	4a08      	ldr	r2, [pc, #32]	@ (8005114 <UART_SetConfig+0x4e4>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 020f 	and.w	r2, r3, #15
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4422      	add	r2, r4
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800510e:	46bd      	mov	sp, r7
 8005110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005114:	51eb851f 	.word	0x51eb851f

08005118 <malloc>:
 8005118:	4b02      	ldr	r3, [pc, #8]	@ (8005124 <malloc+0xc>)
 800511a:	4601      	mov	r1, r0
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f000 b82d 	b.w	800517c <_malloc_r>
 8005122:	bf00      	nop
 8005124:	20000020 	.word	0x20000020

08005128 <free>:
 8005128:	4b02      	ldr	r3, [pc, #8]	@ (8005134 <free+0xc>)
 800512a:	4601      	mov	r1, r0
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	f000 bb8d 	b.w	800584c <_free_r>
 8005132:	bf00      	nop
 8005134:	20000020 	.word	0x20000020

08005138 <sbrk_aligned>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4e0f      	ldr	r6, [pc, #60]	@ (8005178 <sbrk_aligned+0x40>)
 800513c:	460c      	mov	r4, r1
 800513e:	6831      	ldr	r1, [r6, #0]
 8005140:	4605      	mov	r5, r0
 8005142:	b911      	cbnz	r1, 800514a <sbrk_aligned+0x12>
 8005144:	f000 fb32 	bl	80057ac <_sbrk_r>
 8005148:	6030      	str	r0, [r6, #0]
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 fb2d 	bl	80057ac <_sbrk_r>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	d103      	bne.n	800515e <sbrk_aligned+0x26>
 8005156:	f04f 34ff 	mov.w	r4, #4294967295
 800515a:	4620      	mov	r0, r4
 800515c:	bd70      	pop	{r4, r5, r6, pc}
 800515e:	1cc4      	adds	r4, r0, #3
 8005160:	f024 0403 	bic.w	r4, r4, #3
 8005164:	42a0      	cmp	r0, r4
 8005166:	d0f8      	beq.n	800515a <sbrk_aligned+0x22>
 8005168:	1a21      	subs	r1, r4, r0
 800516a:	4628      	mov	r0, r5
 800516c:	f000 fb1e 	bl	80057ac <_sbrk_r>
 8005170:	3001      	adds	r0, #1
 8005172:	d1f2      	bne.n	800515a <sbrk_aligned+0x22>
 8005174:	e7ef      	b.n	8005156 <sbrk_aligned+0x1e>
 8005176:	bf00      	nop
 8005178:	20000234 	.word	0x20000234

0800517c <_malloc_r>:
 800517c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005180:	1ccd      	adds	r5, r1, #3
 8005182:	f025 0503 	bic.w	r5, r5, #3
 8005186:	3508      	adds	r5, #8
 8005188:	2d0c      	cmp	r5, #12
 800518a:	bf38      	it	cc
 800518c:	250c      	movcc	r5, #12
 800518e:	2d00      	cmp	r5, #0
 8005190:	4606      	mov	r6, r0
 8005192:	db01      	blt.n	8005198 <_malloc_r+0x1c>
 8005194:	42a9      	cmp	r1, r5
 8005196:	d904      	bls.n	80051a2 <_malloc_r+0x26>
 8005198:	230c      	movs	r3, #12
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	2000      	movs	r0, #0
 800519e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005278 <_malloc_r+0xfc>
 80051a6:	f000 f869 	bl	800527c <__malloc_lock>
 80051aa:	f8d8 3000 	ldr.w	r3, [r8]
 80051ae:	461c      	mov	r4, r3
 80051b0:	bb44      	cbnz	r4, 8005204 <_malloc_r+0x88>
 80051b2:	4629      	mov	r1, r5
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff ffbf 	bl	8005138 <sbrk_aligned>
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	4604      	mov	r4, r0
 80051be:	d158      	bne.n	8005272 <_malloc_r+0xf6>
 80051c0:	f8d8 4000 	ldr.w	r4, [r8]
 80051c4:	4627      	mov	r7, r4
 80051c6:	2f00      	cmp	r7, #0
 80051c8:	d143      	bne.n	8005252 <_malloc_r+0xd6>
 80051ca:	2c00      	cmp	r4, #0
 80051cc:	d04b      	beq.n	8005266 <_malloc_r+0xea>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	4639      	mov	r1, r7
 80051d2:	4630      	mov	r0, r6
 80051d4:	eb04 0903 	add.w	r9, r4, r3
 80051d8:	f000 fae8 	bl	80057ac <_sbrk_r>
 80051dc:	4581      	cmp	r9, r0
 80051de:	d142      	bne.n	8005266 <_malloc_r+0xea>
 80051e0:	6821      	ldr	r1, [r4, #0]
 80051e2:	1a6d      	subs	r5, r5, r1
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7ff ffa6 	bl	8005138 <sbrk_aligned>
 80051ec:	3001      	adds	r0, #1
 80051ee:	d03a      	beq.n	8005266 <_malloc_r+0xea>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	442b      	add	r3, r5
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	f8d8 3000 	ldr.w	r3, [r8]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	bb62      	cbnz	r2, 8005258 <_malloc_r+0xdc>
 80051fe:	f8c8 7000 	str.w	r7, [r8]
 8005202:	e00f      	b.n	8005224 <_malloc_r+0xa8>
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	1b52      	subs	r2, r2, r5
 8005208:	d420      	bmi.n	800524c <_malloc_r+0xd0>
 800520a:	2a0b      	cmp	r2, #11
 800520c:	d917      	bls.n	800523e <_malloc_r+0xc2>
 800520e:	1961      	adds	r1, r4, r5
 8005210:	42a3      	cmp	r3, r4
 8005212:	6025      	str	r5, [r4, #0]
 8005214:	bf18      	it	ne
 8005216:	6059      	strne	r1, [r3, #4]
 8005218:	6863      	ldr	r3, [r4, #4]
 800521a:	bf08      	it	eq
 800521c:	f8c8 1000 	streq.w	r1, [r8]
 8005220:	5162      	str	r2, [r4, r5]
 8005222:	604b      	str	r3, [r1, #4]
 8005224:	4630      	mov	r0, r6
 8005226:	f000 f82f 	bl	8005288 <__malloc_unlock>
 800522a:	f104 000b 	add.w	r0, r4, #11
 800522e:	1d23      	adds	r3, r4, #4
 8005230:	f020 0007 	bic.w	r0, r0, #7
 8005234:	1ac2      	subs	r2, r0, r3
 8005236:	bf1c      	itt	ne
 8005238:	1a1b      	subne	r3, r3, r0
 800523a:	50a3      	strne	r3, [r4, r2]
 800523c:	e7af      	b.n	800519e <_malloc_r+0x22>
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	42a3      	cmp	r3, r4
 8005242:	bf0c      	ite	eq
 8005244:	f8c8 2000 	streq.w	r2, [r8]
 8005248:	605a      	strne	r2, [r3, #4]
 800524a:	e7eb      	b.n	8005224 <_malloc_r+0xa8>
 800524c:	4623      	mov	r3, r4
 800524e:	6864      	ldr	r4, [r4, #4]
 8005250:	e7ae      	b.n	80051b0 <_malloc_r+0x34>
 8005252:	463c      	mov	r4, r7
 8005254:	687f      	ldr	r7, [r7, #4]
 8005256:	e7b6      	b.n	80051c6 <_malloc_r+0x4a>
 8005258:	461a      	mov	r2, r3
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	42a3      	cmp	r3, r4
 800525e:	d1fb      	bne.n	8005258 <_malloc_r+0xdc>
 8005260:	2300      	movs	r3, #0
 8005262:	6053      	str	r3, [r2, #4]
 8005264:	e7de      	b.n	8005224 <_malloc_r+0xa8>
 8005266:	230c      	movs	r3, #12
 8005268:	6033      	str	r3, [r6, #0]
 800526a:	4630      	mov	r0, r6
 800526c:	f000 f80c 	bl	8005288 <__malloc_unlock>
 8005270:	e794      	b.n	800519c <_malloc_r+0x20>
 8005272:	6005      	str	r5, [r0, #0]
 8005274:	e7d6      	b.n	8005224 <_malloc_r+0xa8>
 8005276:	bf00      	nop
 8005278:	20000238 	.word	0x20000238

0800527c <__malloc_lock>:
 800527c:	4801      	ldr	r0, [pc, #4]	@ (8005284 <__malloc_lock+0x8>)
 800527e:	f000 bae2 	b.w	8005846 <__retarget_lock_acquire_recursive>
 8005282:	bf00      	nop
 8005284:	2000037c 	.word	0x2000037c

08005288 <__malloc_unlock>:
 8005288:	4801      	ldr	r0, [pc, #4]	@ (8005290 <__malloc_unlock+0x8>)
 800528a:	f000 badd 	b.w	8005848 <__retarget_lock_release_recursive>
 800528e:	bf00      	nop
 8005290:	2000037c 	.word	0x2000037c

08005294 <std>:
 8005294:	2300      	movs	r3, #0
 8005296:	b510      	push	{r4, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	e9c0 3300 	strd	r3, r3, [r0]
 800529e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052a2:	6083      	str	r3, [r0, #8]
 80052a4:	8181      	strh	r1, [r0, #12]
 80052a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052a8:	81c2      	strh	r2, [r0, #14]
 80052aa:	6183      	str	r3, [r0, #24]
 80052ac:	4619      	mov	r1, r3
 80052ae:	2208      	movs	r2, #8
 80052b0:	305c      	adds	r0, #92	@ 0x5c
 80052b2:	f000 fa2d 	bl	8005710 <memset>
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <std+0x58>)
 80052b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <std+0x5c>)
 80052bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <std+0x60>)
 80052c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <std+0x64>)
 80052c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <std+0x68>)
 80052c8:	6224      	str	r4, [r4, #32]
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d006      	beq.n	80052dc <std+0x48>
 80052ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052d2:	4294      	cmp	r4, r2
 80052d4:	d002      	beq.n	80052dc <std+0x48>
 80052d6:	33d0      	adds	r3, #208	@ 0xd0
 80052d8:	429c      	cmp	r4, r3
 80052da:	d105      	bne.n	80052e8 <std+0x54>
 80052dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f000 baae 	b.w	8005844 <__retarget_lock_init_recursive>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	08005561 	.word	0x08005561
 80052f0:	08005583 	.word	0x08005583
 80052f4:	080055bb 	.word	0x080055bb
 80052f8:	080055df 	.word	0x080055df
 80052fc:	2000023c 	.word	0x2000023c

08005300 <stdio_exit_handler>:
 8005300:	4a02      	ldr	r2, [pc, #8]	@ (800530c <stdio_exit_handler+0xc>)
 8005302:	4903      	ldr	r1, [pc, #12]	@ (8005310 <stdio_exit_handler+0x10>)
 8005304:	4803      	ldr	r0, [pc, #12]	@ (8005314 <stdio_exit_handler+0x14>)
 8005306:	f000 b869 	b.w	80053dc <_fwalk_sglue>
 800530a:	bf00      	nop
 800530c:	20000014 	.word	0x20000014
 8005310:	08006239 	.word	0x08006239
 8005314:	20000024 	.word	0x20000024

08005318 <cleanup_stdio>:
 8005318:	6841      	ldr	r1, [r0, #4]
 800531a:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <cleanup_stdio+0x34>)
 800531c:	4299      	cmp	r1, r3
 800531e:	b510      	push	{r4, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	d001      	beq.n	8005328 <cleanup_stdio+0x10>
 8005324:	f000 ff88 	bl	8006238 <_fflush_r>
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <cleanup_stdio+0x38>)
 800532c:	4299      	cmp	r1, r3
 800532e:	d002      	beq.n	8005336 <cleanup_stdio+0x1e>
 8005330:	4620      	mov	r0, r4
 8005332:	f000 ff81 	bl	8006238 <_fflush_r>
 8005336:	68e1      	ldr	r1, [r4, #12]
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <cleanup_stdio+0x3c>)
 800533a:	4299      	cmp	r1, r3
 800533c:	d004      	beq.n	8005348 <cleanup_stdio+0x30>
 800533e:	4620      	mov	r0, r4
 8005340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005344:	f000 bf78 	b.w	8006238 <_fflush_r>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	2000023c 	.word	0x2000023c
 8005350:	200002a4 	.word	0x200002a4
 8005354:	2000030c 	.word	0x2000030c

08005358 <global_stdio_init.part.0>:
 8005358:	b510      	push	{r4, lr}
 800535a:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <global_stdio_init.part.0+0x30>)
 800535c:	4c0b      	ldr	r4, [pc, #44]	@ (800538c <global_stdio_init.part.0+0x34>)
 800535e:	4a0c      	ldr	r2, [pc, #48]	@ (8005390 <global_stdio_init.part.0+0x38>)
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	4620      	mov	r0, r4
 8005364:	2200      	movs	r2, #0
 8005366:	2104      	movs	r1, #4
 8005368:	f7ff ff94 	bl	8005294 <std>
 800536c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005370:	2201      	movs	r2, #1
 8005372:	2109      	movs	r1, #9
 8005374:	f7ff ff8e 	bl	8005294 <std>
 8005378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800537c:	2202      	movs	r2, #2
 800537e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005382:	2112      	movs	r1, #18
 8005384:	f7ff bf86 	b.w	8005294 <std>
 8005388:	20000374 	.word	0x20000374
 800538c:	2000023c 	.word	0x2000023c
 8005390:	08005301 	.word	0x08005301

08005394 <__sfp_lock_acquire>:
 8005394:	4801      	ldr	r0, [pc, #4]	@ (800539c <__sfp_lock_acquire+0x8>)
 8005396:	f000 ba56 	b.w	8005846 <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	2000037d 	.word	0x2000037d

080053a0 <__sfp_lock_release>:
 80053a0:	4801      	ldr	r0, [pc, #4]	@ (80053a8 <__sfp_lock_release+0x8>)
 80053a2:	f000 ba51 	b.w	8005848 <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	2000037d 	.word	0x2000037d

080053ac <__sinit>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	f7ff fff0 	bl	8005394 <__sfp_lock_acquire>
 80053b4:	6a23      	ldr	r3, [r4, #32]
 80053b6:	b11b      	cbz	r3, 80053c0 <__sinit+0x14>
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f7ff bff0 	b.w	80053a0 <__sfp_lock_release>
 80053c0:	4b04      	ldr	r3, [pc, #16]	@ (80053d4 <__sinit+0x28>)
 80053c2:	6223      	str	r3, [r4, #32]
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <__sinit+0x2c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f5      	bne.n	80053b8 <__sinit+0xc>
 80053cc:	f7ff ffc4 	bl	8005358 <global_stdio_init.part.0>
 80053d0:	e7f2      	b.n	80053b8 <__sinit+0xc>
 80053d2:	bf00      	nop
 80053d4:	08005319 	.word	0x08005319
 80053d8:	20000374 	.word	0x20000374

080053dc <_fwalk_sglue>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4607      	mov	r7, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	4614      	mov	r4, r2
 80053e6:	2600      	movs	r6, #0
 80053e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ec:	f1b9 0901 	subs.w	r9, r9, #1
 80053f0:	d505      	bpl.n	80053fe <_fwalk_sglue+0x22>
 80053f2:	6824      	ldr	r4, [r4, #0]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d1f7      	bne.n	80053e8 <_fwalk_sglue+0xc>
 80053f8:	4630      	mov	r0, r6
 80053fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d907      	bls.n	8005414 <_fwalk_sglue+0x38>
 8005404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005408:	3301      	adds	r3, #1
 800540a:	d003      	beq.n	8005414 <_fwalk_sglue+0x38>
 800540c:	4629      	mov	r1, r5
 800540e:	4638      	mov	r0, r7
 8005410:	47c0      	blx	r8
 8005412:	4306      	orrs	r6, r0
 8005414:	3568      	adds	r5, #104	@ 0x68
 8005416:	e7e9      	b.n	80053ec <_fwalk_sglue+0x10>

08005418 <iprintf>:
 8005418:	b40f      	push	{r0, r1, r2, r3}
 800541a:	b507      	push	{r0, r1, r2, lr}
 800541c:	4906      	ldr	r1, [pc, #24]	@ (8005438 <iprintf+0x20>)
 800541e:	ab04      	add	r3, sp, #16
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	f853 2b04 	ldr.w	r2, [r3], #4
 8005426:	6881      	ldr	r1, [r0, #8]
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	f000 fbdb 	bl	8005be4 <_vfiprintf_r>
 800542e:	b003      	add	sp, #12
 8005430:	f85d eb04 	ldr.w	lr, [sp], #4
 8005434:	b004      	add	sp, #16
 8005436:	4770      	bx	lr
 8005438:	20000020 	.word	0x20000020

0800543c <_puts_r>:
 800543c:	6a03      	ldr	r3, [r0, #32]
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	6884      	ldr	r4, [r0, #8]
 8005442:	4605      	mov	r5, r0
 8005444:	460e      	mov	r6, r1
 8005446:	b90b      	cbnz	r3, 800544c <_puts_r+0x10>
 8005448:	f7ff ffb0 	bl	80053ac <__sinit>
 800544c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800544e:	07db      	lsls	r3, r3, #31
 8005450:	d405      	bmi.n	800545e <_puts_r+0x22>
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	0598      	lsls	r0, r3, #22
 8005456:	d402      	bmi.n	800545e <_puts_r+0x22>
 8005458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800545a:	f000 f9f4 	bl	8005846 <__retarget_lock_acquire_recursive>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	0719      	lsls	r1, r3, #28
 8005462:	d502      	bpl.n	800546a <_puts_r+0x2e>
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d135      	bne.n	80054d6 <_puts_r+0x9a>
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 f8f9 	bl	8005664 <__swsetup_r>
 8005472:	b380      	cbz	r0, 80054d6 <_puts_r+0x9a>
 8005474:	f04f 35ff 	mov.w	r5, #4294967295
 8005478:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800547a:	07da      	lsls	r2, r3, #31
 800547c:	d405      	bmi.n	800548a <_puts_r+0x4e>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	059b      	lsls	r3, r3, #22
 8005482:	d402      	bmi.n	800548a <_puts_r+0x4e>
 8005484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005486:	f000 f9df 	bl	8005848 <__retarget_lock_release_recursive>
 800548a:	4628      	mov	r0, r5
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	2b00      	cmp	r3, #0
 8005490:	da04      	bge.n	800549c <_puts_r+0x60>
 8005492:	69a2      	ldr	r2, [r4, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	dc17      	bgt.n	80054c8 <_puts_r+0x8c>
 8005498:	290a      	cmp	r1, #10
 800549a:	d015      	beq.n	80054c8 <_puts_r+0x8c>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	6022      	str	r2, [r4, #0]
 80054a2:	7019      	strb	r1, [r3, #0]
 80054a4:	68a3      	ldr	r3, [r4, #8]
 80054a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60a3      	str	r3, [r4, #8]
 80054ae:	2900      	cmp	r1, #0
 80054b0:	d1ed      	bne.n	800548e <_puts_r+0x52>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da11      	bge.n	80054da <_puts_r+0x9e>
 80054b6:	4622      	mov	r2, r4
 80054b8:	210a      	movs	r1, #10
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f893 	bl	80055e6 <__swbuf_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0d7      	beq.n	8005474 <_puts_r+0x38>
 80054c4:	250a      	movs	r5, #10
 80054c6:	e7d7      	b.n	8005478 <_puts_r+0x3c>
 80054c8:	4622      	mov	r2, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f88b 	bl	80055e6 <__swbuf_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d1e7      	bne.n	80054a4 <_puts_r+0x68>
 80054d4:	e7ce      	b.n	8005474 <_puts_r+0x38>
 80054d6:	3e01      	subs	r6, #1
 80054d8:	e7e4      	b.n	80054a4 <_puts_r+0x68>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	220a      	movs	r2, #10
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e7ee      	b.n	80054c4 <_puts_r+0x88>
	...

080054e8 <puts>:
 80054e8:	4b02      	ldr	r3, [pc, #8]	@ (80054f4 <puts+0xc>)
 80054ea:	4601      	mov	r1, r0
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f7ff bfa5 	b.w	800543c <_puts_r>
 80054f2:	bf00      	nop
 80054f4:	20000020 	.word	0x20000020

080054f8 <sniprintf>:
 80054f8:	b40c      	push	{r2, r3}
 80054fa:	b530      	push	{r4, r5, lr}
 80054fc:	4b17      	ldr	r3, [pc, #92]	@ (800555c <sniprintf+0x64>)
 80054fe:	1e0c      	subs	r4, r1, #0
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	b09d      	sub	sp, #116	@ 0x74
 8005504:	da08      	bge.n	8005518 <sniprintf+0x20>
 8005506:	238b      	movs	r3, #139	@ 0x8b
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	b01d      	add	sp, #116	@ 0x74
 8005510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005514:	b002      	add	sp, #8
 8005516:	4770      	bx	lr
 8005518:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800551c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005520:	bf14      	ite	ne
 8005522:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005526:	4623      	moveq	r3, r4
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005530:	9002      	str	r0, [sp, #8]
 8005532:	9006      	str	r0, [sp, #24]
 8005534:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005538:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800553a:	ab21      	add	r3, sp, #132	@ 0x84
 800553c:	a902      	add	r1, sp, #8
 800553e:	4628      	mov	r0, r5
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	f000 fa29 	bl	8005998 <_svfiprintf_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	bfbc      	itt	lt
 800554a:	238b      	movlt	r3, #139	@ 0x8b
 800554c:	602b      	strlt	r3, [r5, #0]
 800554e:	2c00      	cmp	r4, #0
 8005550:	d0dd      	beq.n	800550e <sniprintf+0x16>
 8005552:	9b02      	ldr	r3, [sp, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e7d9      	b.n	800550e <sniprintf+0x16>
 800555a:	bf00      	nop
 800555c:	20000020 	.word	0x20000020

08005560 <__sread>:
 8005560:	b510      	push	{r4, lr}
 8005562:	460c      	mov	r4, r1
 8005564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005568:	f000 f90e 	bl	8005788 <_read_r>
 800556c:	2800      	cmp	r0, #0
 800556e:	bfab      	itete	ge
 8005570:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005572:	89a3      	ldrhlt	r3, [r4, #12]
 8005574:	181b      	addge	r3, r3, r0
 8005576:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800557a:	bfac      	ite	ge
 800557c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800557e:	81a3      	strhlt	r3, [r4, #12]
 8005580:	bd10      	pop	{r4, pc}

08005582 <__swrite>:
 8005582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005586:	461f      	mov	r7, r3
 8005588:	898b      	ldrh	r3, [r1, #12]
 800558a:	05db      	lsls	r3, r3, #23
 800558c:	4605      	mov	r5, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4616      	mov	r6, r2
 8005592:	d505      	bpl.n	80055a0 <__swrite+0x1e>
 8005594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005598:	2302      	movs	r3, #2
 800559a:	2200      	movs	r2, #0
 800559c:	f000 f8e2 	bl	8005764 <_lseek_r>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	4632      	mov	r2, r6
 80055ae:	463b      	mov	r3, r7
 80055b0:	4628      	mov	r0, r5
 80055b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055b6:	f000 b909 	b.w	80057cc <_write_r>

080055ba <__sseek>:
 80055ba:	b510      	push	{r4, lr}
 80055bc:	460c      	mov	r4, r1
 80055be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c2:	f000 f8cf 	bl	8005764 <_lseek_r>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	bf15      	itete	ne
 80055cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055d6:	81a3      	strheq	r3, [r4, #12]
 80055d8:	bf18      	it	ne
 80055da:	81a3      	strhne	r3, [r4, #12]
 80055dc:	bd10      	pop	{r4, pc}

080055de <__sclose>:
 80055de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e2:	f000 b8af 	b.w	8005744 <_close_r>

080055e6 <__swbuf_r>:
 80055e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e8:	460e      	mov	r6, r1
 80055ea:	4614      	mov	r4, r2
 80055ec:	4605      	mov	r5, r0
 80055ee:	b118      	cbz	r0, 80055f8 <__swbuf_r+0x12>
 80055f0:	6a03      	ldr	r3, [r0, #32]
 80055f2:	b90b      	cbnz	r3, 80055f8 <__swbuf_r+0x12>
 80055f4:	f7ff feda 	bl	80053ac <__sinit>
 80055f8:	69a3      	ldr	r3, [r4, #24]
 80055fa:	60a3      	str	r3, [r4, #8]
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	071a      	lsls	r2, r3, #28
 8005600:	d501      	bpl.n	8005606 <__swbuf_r+0x20>
 8005602:	6923      	ldr	r3, [r4, #16]
 8005604:	b943      	cbnz	r3, 8005618 <__swbuf_r+0x32>
 8005606:	4621      	mov	r1, r4
 8005608:	4628      	mov	r0, r5
 800560a:	f000 f82b 	bl	8005664 <__swsetup_r>
 800560e:	b118      	cbz	r0, 8005618 <__swbuf_r+0x32>
 8005610:	f04f 37ff 	mov.w	r7, #4294967295
 8005614:	4638      	mov	r0, r7
 8005616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	6922      	ldr	r2, [r4, #16]
 800561c:	1a98      	subs	r0, r3, r2
 800561e:	6963      	ldr	r3, [r4, #20]
 8005620:	b2f6      	uxtb	r6, r6
 8005622:	4283      	cmp	r3, r0
 8005624:	4637      	mov	r7, r6
 8005626:	dc05      	bgt.n	8005634 <__swbuf_r+0x4e>
 8005628:	4621      	mov	r1, r4
 800562a:	4628      	mov	r0, r5
 800562c:	f000 fe04 	bl	8006238 <_fflush_r>
 8005630:	2800      	cmp	r0, #0
 8005632:	d1ed      	bne.n	8005610 <__swbuf_r+0x2a>
 8005634:	68a3      	ldr	r3, [r4, #8]
 8005636:	3b01      	subs	r3, #1
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	701e      	strb	r6, [r3, #0]
 8005642:	6962      	ldr	r2, [r4, #20]
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	429a      	cmp	r2, r3
 8005648:	d004      	beq.n	8005654 <__swbuf_r+0x6e>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	07db      	lsls	r3, r3, #31
 800564e:	d5e1      	bpl.n	8005614 <__swbuf_r+0x2e>
 8005650:	2e0a      	cmp	r6, #10
 8005652:	d1df      	bne.n	8005614 <__swbuf_r+0x2e>
 8005654:	4621      	mov	r1, r4
 8005656:	4628      	mov	r0, r5
 8005658:	f000 fdee 	bl	8006238 <_fflush_r>
 800565c:	2800      	cmp	r0, #0
 800565e:	d0d9      	beq.n	8005614 <__swbuf_r+0x2e>
 8005660:	e7d6      	b.n	8005610 <__swbuf_r+0x2a>
	...

08005664 <__swsetup_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4b29      	ldr	r3, [pc, #164]	@ (800570c <__swsetup_r+0xa8>)
 8005668:	4605      	mov	r5, r0
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	460c      	mov	r4, r1
 800566e:	b118      	cbz	r0, 8005678 <__swsetup_r+0x14>
 8005670:	6a03      	ldr	r3, [r0, #32]
 8005672:	b90b      	cbnz	r3, 8005678 <__swsetup_r+0x14>
 8005674:	f7ff fe9a 	bl	80053ac <__sinit>
 8005678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567c:	0719      	lsls	r1, r3, #28
 800567e:	d422      	bmi.n	80056c6 <__swsetup_r+0x62>
 8005680:	06da      	lsls	r2, r3, #27
 8005682:	d407      	bmi.n	8005694 <__swsetup_r+0x30>
 8005684:	2209      	movs	r2, #9
 8005686:	602a      	str	r2, [r5, #0]
 8005688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	e033      	b.n	80056fc <__swsetup_r+0x98>
 8005694:	0758      	lsls	r0, r3, #29
 8005696:	d512      	bpl.n	80056be <__swsetup_r+0x5a>
 8005698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800569a:	b141      	cbz	r1, 80056ae <__swsetup_r+0x4a>
 800569c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d002      	beq.n	80056aa <__swsetup_r+0x46>
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 f8d1 	bl	800584c <_free_r>
 80056aa:	2300      	movs	r3, #0
 80056ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	2300      	movs	r3, #0
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	f043 0308 	orr.w	r3, r3, #8
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	b94b      	cbnz	r3, 80056de <__swsetup_r+0x7a>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d4:	d003      	beq.n	80056de <__swsetup_r+0x7a>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 fdfb 	bl	80062d4 <__smakebuf_r>
 80056de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e2:	f013 0201 	ands.w	r2, r3, #1
 80056e6:	d00a      	beq.n	80056fe <__swsetup_r+0x9a>
 80056e8:	2200      	movs	r2, #0
 80056ea:	60a2      	str	r2, [r4, #8]
 80056ec:	6962      	ldr	r2, [r4, #20]
 80056ee:	4252      	negs	r2, r2
 80056f0:	61a2      	str	r2, [r4, #24]
 80056f2:	6922      	ldr	r2, [r4, #16]
 80056f4:	b942      	cbnz	r2, 8005708 <__swsetup_r+0xa4>
 80056f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056fa:	d1c5      	bne.n	8005688 <__swsetup_r+0x24>
 80056fc:	bd38      	pop	{r3, r4, r5, pc}
 80056fe:	0799      	lsls	r1, r3, #30
 8005700:	bf58      	it	pl
 8005702:	6962      	ldrpl	r2, [r4, #20]
 8005704:	60a2      	str	r2, [r4, #8]
 8005706:	e7f4      	b.n	80056f2 <__swsetup_r+0x8e>
 8005708:	2000      	movs	r0, #0
 800570a:	e7f7      	b.n	80056fc <__swsetup_r+0x98>
 800570c:	20000020 	.word	0x20000020

08005710 <memset>:
 8005710:	4402      	add	r2, r0
 8005712:	4603      	mov	r3, r0
 8005714:	4293      	cmp	r3, r2
 8005716:	d100      	bne.n	800571a <memset+0xa>
 8005718:	4770      	bx	lr
 800571a:	f803 1b01 	strb.w	r1, [r3], #1
 800571e:	e7f9      	b.n	8005714 <memset+0x4>

08005720 <strncmp>:
 8005720:	b510      	push	{r4, lr}
 8005722:	b16a      	cbz	r2, 8005740 <strncmp+0x20>
 8005724:	3901      	subs	r1, #1
 8005726:	1884      	adds	r4, r0, r2
 8005728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800572c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005730:	429a      	cmp	r2, r3
 8005732:	d103      	bne.n	800573c <strncmp+0x1c>
 8005734:	42a0      	cmp	r0, r4
 8005736:	d001      	beq.n	800573c <strncmp+0x1c>
 8005738:	2a00      	cmp	r2, #0
 800573a:	d1f5      	bne.n	8005728 <strncmp+0x8>
 800573c:	1ad0      	subs	r0, r2, r3
 800573e:	bd10      	pop	{r4, pc}
 8005740:	4610      	mov	r0, r2
 8005742:	e7fc      	b.n	800573e <strncmp+0x1e>

08005744 <_close_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d06      	ldr	r5, [pc, #24]	@ (8005760 <_close_r+0x1c>)
 8005748:	2300      	movs	r3, #0
 800574a:	4604      	mov	r4, r0
 800574c:	4608      	mov	r0, r1
 800574e:	602b      	str	r3, [r5, #0]
 8005750:	f7fb ff33 	bl	80015ba <_close>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d102      	bne.n	800575e <_close_r+0x1a>
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	b103      	cbz	r3, 800575e <_close_r+0x1a>
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	bd38      	pop	{r3, r4, r5, pc}
 8005760:	20000378 	.word	0x20000378

08005764 <_lseek_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4d07      	ldr	r5, [pc, #28]	@ (8005784 <_lseek_r+0x20>)
 8005768:	4604      	mov	r4, r0
 800576a:	4608      	mov	r0, r1
 800576c:	4611      	mov	r1, r2
 800576e:	2200      	movs	r2, #0
 8005770:	602a      	str	r2, [r5, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	f7fb ff48 	bl	8001608 <_lseek>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_lseek_r+0x1e>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_lseek_r+0x1e>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	20000378 	.word	0x20000378

08005788 <_read_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4d07      	ldr	r5, [pc, #28]	@ (80057a8 <_read_r+0x20>)
 800578c:	4604      	mov	r4, r0
 800578e:	4608      	mov	r0, r1
 8005790:	4611      	mov	r1, r2
 8005792:	2200      	movs	r2, #0
 8005794:	602a      	str	r2, [r5, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	f7fb fed6 	bl	8001548 <_read>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_read_r+0x1e>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_read_r+0x1e>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000378 	.word	0x20000378

080057ac <_sbrk_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d06      	ldr	r5, [pc, #24]	@ (80057c8 <_sbrk_r+0x1c>)
 80057b0:	2300      	movs	r3, #0
 80057b2:	4604      	mov	r4, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	f7fb ff34 	bl	8001624 <_sbrk>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_sbrk_r+0x1a>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_sbrk_r+0x1a>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	20000378 	.word	0x20000378

080057cc <_write_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4d07      	ldr	r5, [pc, #28]	@ (80057ec <_write_r+0x20>)
 80057d0:	4604      	mov	r4, r0
 80057d2:	4608      	mov	r0, r1
 80057d4:	4611      	mov	r1, r2
 80057d6:	2200      	movs	r2, #0
 80057d8:	602a      	str	r2, [r5, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	f7fb fed1 	bl	8001582 <_write>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_write_r+0x1e>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_write_r+0x1e>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20000378 	.word	0x20000378

080057f0 <__errno>:
 80057f0:	4b01      	ldr	r3, [pc, #4]	@ (80057f8 <__errno+0x8>)
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000020 	.word	0x20000020

080057fc <__libc_init_array>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005834 <__libc_init_array+0x38>)
 8005800:	4c0d      	ldr	r4, [pc, #52]	@ (8005838 <__libc_init_array+0x3c>)
 8005802:	1b64      	subs	r4, r4, r5
 8005804:	10a4      	asrs	r4, r4, #2
 8005806:	2600      	movs	r6, #0
 8005808:	42a6      	cmp	r6, r4
 800580a:	d109      	bne.n	8005820 <__libc_init_array+0x24>
 800580c:	4d0b      	ldr	r5, [pc, #44]	@ (800583c <__libc_init_array+0x40>)
 800580e:	4c0c      	ldr	r4, [pc, #48]	@ (8005840 <__libc_init_array+0x44>)
 8005810:	f000 fe1c 	bl	800644c <_init>
 8005814:	1b64      	subs	r4, r4, r5
 8005816:	10a4      	asrs	r4, r4, #2
 8005818:	2600      	movs	r6, #0
 800581a:	42a6      	cmp	r6, r4
 800581c:	d105      	bne.n	800582a <__libc_init_array+0x2e>
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	f855 3b04 	ldr.w	r3, [r5], #4
 8005824:	4798      	blx	r3
 8005826:	3601      	adds	r6, #1
 8005828:	e7ee      	b.n	8005808 <__libc_init_array+0xc>
 800582a:	f855 3b04 	ldr.w	r3, [r5], #4
 800582e:	4798      	blx	r3
 8005830:	3601      	adds	r6, #1
 8005832:	e7f2      	b.n	800581a <__libc_init_array+0x1e>
 8005834:	08006820 	.word	0x08006820
 8005838:	08006820 	.word	0x08006820
 800583c:	08006820 	.word	0x08006820
 8005840:	08006824 	.word	0x08006824

08005844 <__retarget_lock_init_recursive>:
 8005844:	4770      	bx	lr

08005846 <__retarget_lock_acquire_recursive>:
 8005846:	4770      	bx	lr

08005848 <__retarget_lock_release_recursive>:
 8005848:	4770      	bx	lr
	...

0800584c <_free_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4605      	mov	r5, r0
 8005850:	2900      	cmp	r1, #0
 8005852:	d041      	beq.n	80058d8 <_free_r+0x8c>
 8005854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005858:	1f0c      	subs	r4, r1, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	bfb8      	it	lt
 800585e:	18e4      	addlt	r4, r4, r3
 8005860:	f7ff fd0c 	bl	800527c <__malloc_lock>
 8005864:	4a1d      	ldr	r2, [pc, #116]	@ (80058dc <_free_r+0x90>)
 8005866:	6813      	ldr	r3, [r2, #0]
 8005868:	b933      	cbnz	r3, 8005878 <_free_r+0x2c>
 800586a:	6063      	str	r3, [r4, #4]
 800586c:	6014      	str	r4, [r2, #0]
 800586e:	4628      	mov	r0, r5
 8005870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005874:	f7ff bd08 	b.w	8005288 <__malloc_unlock>
 8005878:	42a3      	cmp	r3, r4
 800587a:	d908      	bls.n	800588e <_free_r+0x42>
 800587c:	6820      	ldr	r0, [r4, #0]
 800587e:	1821      	adds	r1, r4, r0
 8005880:	428b      	cmp	r3, r1
 8005882:	bf01      	itttt	eq
 8005884:	6819      	ldreq	r1, [r3, #0]
 8005886:	685b      	ldreq	r3, [r3, #4]
 8005888:	1809      	addeq	r1, r1, r0
 800588a:	6021      	streq	r1, [r4, #0]
 800588c:	e7ed      	b.n	800586a <_free_r+0x1e>
 800588e:	461a      	mov	r2, r3
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	b10b      	cbz	r3, 8005898 <_free_r+0x4c>
 8005894:	42a3      	cmp	r3, r4
 8005896:	d9fa      	bls.n	800588e <_free_r+0x42>
 8005898:	6811      	ldr	r1, [r2, #0]
 800589a:	1850      	adds	r0, r2, r1
 800589c:	42a0      	cmp	r0, r4
 800589e:	d10b      	bne.n	80058b8 <_free_r+0x6c>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	4401      	add	r1, r0
 80058a4:	1850      	adds	r0, r2, r1
 80058a6:	4283      	cmp	r3, r0
 80058a8:	6011      	str	r1, [r2, #0]
 80058aa:	d1e0      	bne.n	800586e <_free_r+0x22>
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	6053      	str	r3, [r2, #4]
 80058b2:	4408      	add	r0, r1
 80058b4:	6010      	str	r0, [r2, #0]
 80058b6:	e7da      	b.n	800586e <_free_r+0x22>
 80058b8:	d902      	bls.n	80058c0 <_free_r+0x74>
 80058ba:	230c      	movs	r3, #12
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	e7d6      	b.n	800586e <_free_r+0x22>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	1821      	adds	r1, r4, r0
 80058c4:	428b      	cmp	r3, r1
 80058c6:	bf04      	itt	eq
 80058c8:	6819      	ldreq	r1, [r3, #0]
 80058ca:	685b      	ldreq	r3, [r3, #4]
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	bf04      	itt	eq
 80058d0:	1809      	addeq	r1, r1, r0
 80058d2:	6021      	streq	r1, [r4, #0]
 80058d4:	6054      	str	r4, [r2, #4]
 80058d6:	e7ca      	b.n	800586e <_free_r+0x22>
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	bf00      	nop
 80058dc:	20000238 	.word	0x20000238

080058e0 <__ssputs_r>:
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	688e      	ldr	r6, [r1, #8]
 80058e6:	461f      	mov	r7, r3
 80058e8:	42be      	cmp	r6, r7
 80058ea:	680b      	ldr	r3, [r1, #0]
 80058ec:	4682      	mov	sl, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	4690      	mov	r8, r2
 80058f2:	d82d      	bhi.n	8005950 <__ssputs_r+0x70>
 80058f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058fc:	d026      	beq.n	800594c <__ssputs_r+0x6c>
 80058fe:	6965      	ldr	r5, [r4, #20]
 8005900:	6909      	ldr	r1, [r1, #16]
 8005902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005906:	eba3 0901 	sub.w	r9, r3, r1
 800590a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800590e:	1c7b      	adds	r3, r7, #1
 8005910:	444b      	add	r3, r9
 8005912:	106d      	asrs	r5, r5, #1
 8005914:	429d      	cmp	r5, r3
 8005916:	bf38      	it	cc
 8005918:	461d      	movcc	r5, r3
 800591a:	0553      	lsls	r3, r2, #21
 800591c:	d527      	bpl.n	800596e <__ssputs_r+0x8e>
 800591e:	4629      	mov	r1, r5
 8005920:	f7ff fc2c 	bl	800517c <_malloc_r>
 8005924:	4606      	mov	r6, r0
 8005926:	b360      	cbz	r0, 8005982 <__ssputs_r+0xa2>
 8005928:	6921      	ldr	r1, [r4, #16]
 800592a:	464a      	mov	r2, r9
 800592c:	f000 fd4a 	bl	80063c4 <memcpy>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	6126      	str	r6, [r4, #16]
 800593e:	6165      	str	r5, [r4, #20]
 8005940:	444e      	add	r6, r9
 8005942:	eba5 0509 	sub.w	r5, r5, r9
 8005946:	6026      	str	r6, [r4, #0]
 8005948:	60a5      	str	r5, [r4, #8]
 800594a:	463e      	mov	r6, r7
 800594c:	42be      	cmp	r6, r7
 800594e:	d900      	bls.n	8005952 <__ssputs_r+0x72>
 8005950:	463e      	mov	r6, r7
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	4632      	mov	r2, r6
 8005956:	4641      	mov	r1, r8
 8005958:	f000 fcf8 	bl	800634c <memmove>
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	1b9b      	subs	r3, r3, r6
 8005960:	60a3      	str	r3, [r4, #8]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	4433      	add	r3, r6
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	2000      	movs	r0, #0
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	462a      	mov	r2, r5
 8005970:	f000 fd36 	bl	80063e0 <_realloc_r>
 8005974:	4606      	mov	r6, r0
 8005976:	2800      	cmp	r0, #0
 8005978:	d1e0      	bne.n	800593c <__ssputs_r+0x5c>
 800597a:	6921      	ldr	r1, [r4, #16]
 800597c:	4650      	mov	r0, sl
 800597e:	f7ff ff65 	bl	800584c <_free_r>
 8005982:	230c      	movs	r3, #12
 8005984:	f8ca 3000 	str.w	r3, [sl]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e7e9      	b.n	800596a <__ssputs_r+0x8a>
	...

08005998 <_svfiprintf_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	4698      	mov	r8, r3
 800599e:	898b      	ldrh	r3, [r1, #12]
 80059a0:	061b      	lsls	r3, r3, #24
 80059a2:	b09d      	sub	sp, #116	@ 0x74
 80059a4:	4607      	mov	r7, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	d510      	bpl.n	80059ce <_svfiprintf_r+0x36>
 80059ac:	690b      	ldr	r3, [r1, #16]
 80059ae:	b973      	cbnz	r3, 80059ce <_svfiprintf_r+0x36>
 80059b0:	2140      	movs	r1, #64	@ 0x40
 80059b2:	f7ff fbe3 	bl	800517c <_malloc_r>
 80059b6:	6028      	str	r0, [r5, #0]
 80059b8:	6128      	str	r0, [r5, #16]
 80059ba:	b930      	cbnz	r0, 80059ca <_svfiprintf_r+0x32>
 80059bc:	230c      	movs	r3, #12
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	b01d      	add	sp, #116	@ 0x74
 80059c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ca:	2340      	movs	r3, #64	@ 0x40
 80059cc:	616b      	str	r3, [r5, #20]
 80059ce:	2300      	movs	r3, #0
 80059d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d2:	2320      	movs	r3, #32
 80059d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80059dc:	2330      	movs	r3, #48	@ 0x30
 80059de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b7c <_svfiprintf_r+0x1e4>
 80059e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059e6:	f04f 0901 	mov.w	r9, #1
 80059ea:	4623      	mov	r3, r4
 80059ec:	469a      	mov	sl, r3
 80059ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f2:	b10a      	cbz	r2, 80059f8 <_svfiprintf_r+0x60>
 80059f4:	2a25      	cmp	r2, #37	@ 0x25
 80059f6:	d1f9      	bne.n	80059ec <_svfiprintf_r+0x54>
 80059f8:	ebba 0b04 	subs.w	fp, sl, r4
 80059fc:	d00b      	beq.n	8005a16 <_svfiprintf_r+0x7e>
 80059fe:	465b      	mov	r3, fp
 8005a00:	4622      	mov	r2, r4
 8005a02:	4629      	mov	r1, r5
 8005a04:	4638      	mov	r0, r7
 8005a06:	f7ff ff6b 	bl	80058e0 <__ssputs_r>
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f000 80a7 	beq.w	8005b5e <_svfiprintf_r+0x1c6>
 8005a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a12:	445a      	add	r2, fp
 8005a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a16:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 809f 	beq.w	8005b5e <_svfiprintf_r+0x1c6>
 8005a20:	2300      	movs	r3, #0
 8005a22:	f04f 32ff 	mov.w	r2, #4294967295
 8005a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2a:	f10a 0a01 	add.w	sl, sl, #1
 8005a2e:	9304      	str	r3, [sp, #16]
 8005a30:	9307      	str	r3, [sp, #28]
 8005a32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a36:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a38:	4654      	mov	r4, sl
 8005a3a:	2205      	movs	r2, #5
 8005a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a40:	484e      	ldr	r0, [pc, #312]	@ (8005b7c <_svfiprintf_r+0x1e4>)
 8005a42:	f7fa fbed 	bl	8000220 <memchr>
 8005a46:	9a04      	ldr	r2, [sp, #16]
 8005a48:	b9d8      	cbnz	r0, 8005a82 <_svfiprintf_r+0xea>
 8005a4a:	06d0      	lsls	r0, r2, #27
 8005a4c:	bf44      	itt	mi
 8005a4e:	2320      	movmi	r3, #32
 8005a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a54:	0711      	lsls	r1, r2, #28
 8005a56:	bf44      	itt	mi
 8005a58:	232b      	movmi	r3, #43	@ 0x2b
 8005a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a64:	d015      	beq.n	8005a92 <_svfiprintf_r+0xfa>
 8005a66:	9a07      	ldr	r2, [sp, #28]
 8005a68:	4654      	mov	r4, sl
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f04f 0c0a 	mov.w	ip, #10
 8005a70:	4621      	mov	r1, r4
 8005a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a76:	3b30      	subs	r3, #48	@ 0x30
 8005a78:	2b09      	cmp	r3, #9
 8005a7a:	d94b      	bls.n	8005b14 <_svfiprintf_r+0x17c>
 8005a7c:	b1b0      	cbz	r0, 8005aac <_svfiprintf_r+0x114>
 8005a7e:	9207      	str	r2, [sp, #28]
 8005a80:	e014      	b.n	8005aac <_svfiprintf_r+0x114>
 8005a82:	eba0 0308 	sub.w	r3, r0, r8
 8005a86:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	46a2      	mov	sl, r4
 8005a90:	e7d2      	b.n	8005a38 <_svfiprintf_r+0xa0>
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	1d19      	adds	r1, r3, #4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	9103      	str	r1, [sp, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bfbb      	ittet	lt
 8005a9e:	425b      	neglt	r3, r3
 8005aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa4:	9307      	strge	r3, [sp, #28]
 8005aa6:	9307      	strlt	r3, [sp, #28]
 8005aa8:	bfb8      	it	lt
 8005aaa:	9204      	strlt	r2, [sp, #16]
 8005aac:	7823      	ldrb	r3, [r4, #0]
 8005aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ab0:	d10a      	bne.n	8005ac8 <_svfiprintf_r+0x130>
 8005ab2:	7863      	ldrb	r3, [r4, #1]
 8005ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab6:	d132      	bne.n	8005b1e <_svfiprintf_r+0x186>
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	1d1a      	adds	r2, r3, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	9203      	str	r2, [sp, #12]
 8005ac0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ac4:	3402      	adds	r4, #2
 8005ac6:	9305      	str	r3, [sp, #20]
 8005ac8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b8c <_svfiprintf_r+0x1f4>
 8005acc:	7821      	ldrb	r1, [r4, #0]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	4650      	mov	r0, sl
 8005ad2:	f7fa fba5 	bl	8000220 <memchr>
 8005ad6:	b138      	cbz	r0, 8005ae8 <_svfiprintf_r+0x150>
 8005ad8:	9b04      	ldr	r3, [sp, #16]
 8005ada:	eba0 000a 	sub.w	r0, r0, sl
 8005ade:	2240      	movs	r2, #64	@ 0x40
 8005ae0:	4082      	lsls	r2, r0
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	3401      	adds	r4, #1
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aec:	4824      	ldr	r0, [pc, #144]	@ (8005b80 <_svfiprintf_r+0x1e8>)
 8005aee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005af2:	2206      	movs	r2, #6
 8005af4:	f7fa fb94 	bl	8000220 <memchr>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d036      	beq.n	8005b6a <_svfiprintf_r+0x1d2>
 8005afc:	4b21      	ldr	r3, [pc, #132]	@ (8005b84 <_svfiprintf_r+0x1ec>)
 8005afe:	bb1b      	cbnz	r3, 8005b48 <_svfiprintf_r+0x1b0>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	3307      	adds	r3, #7
 8005b04:	f023 0307 	bic.w	r3, r3, #7
 8005b08:	3308      	adds	r3, #8
 8005b0a:	9303      	str	r3, [sp, #12]
 8005b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0e:	4433      	add	r3, r6
 8005b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b12:	e76a      	b.n	80059ea <_svfiprintf_r+0x52>
 8005b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b18:	460c      	mov	r4, r1
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	e7a8      	b.n	8005a70 <_svfiprintf_r+0xd8>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	3401      	adds	r4, #1
 8005b22:	9305      	str	r3, [sp, #20]
 8005b24:	4619      	mov	r1, r3
 8005b26:	f04f 0c0a 	mov.w	ip, #10
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b30:	3a30      	subs	r2, #48	@ 0x30
 8005b32:	2a09      	cmp	r2, #9
 8005b34:	d903      	bls.n	8005b3e <_svfiprintf_r+0x1a6>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0c6      	beq.n	8005ac8 <_svfiprintf_r+0x130>
 8005b3a:	9105      	str	r1, [sp, #20]
 8005b3c:	e7c4      	b.n	8005ac8 <_svfiprintf_r+0x130>
 8005b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b42:	4604      	mov	r4, r0
 8005b44:	2301      	movs	r3, #1
 8005b46:	e7f0      	b.n	8005b2a <_svfiprintf_r+0x192>
 8005b48:	ab03      	add	r3, sp, #12
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b88 <_svfiprintf_r+0x1f0>)
 8005b50:	a904      	add	r1, sp, #16
 8005b52:	4638      	mov	r0, r7
 8005b54:	f3af 8000 	nop.w
 8005b58:	1c42      	adds	r2, r0, #1
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	d1d6      	bne.n	8005b0c <_svfiprintf_r+0x174>
 8005b5e:	89ab      	ldrh	r3, [r5, #12]
 8005b60:	065b      	lsls	r3, r3, #25
 8005b62:	f53f af2d 	bmi.w	80059c0 <_svfiprintf_r+0x28>
 8005b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b68:	e72c      	b.n	80059c4 <_svfiprintf_r+0x2c>
 8005b6a:	ab03      	add	r3, sp, #12
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	462a      	mov	r2, r5
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <_svfiprintf_r+0x1f0>)
 8005b72:	a904      	add	r1, sp, #16
 8005b74:	4638      	mov	r0, r7
 8005b76:	f000 f9bb 	bl	8005ef0 <_printf_i>
 8005b7a:	e7ed      	b.n	8005b58 <_svfiprintf_r+0x1c0>
 8005b7c:	080067e4 	.word	0x080067e4
 8005b80:	080067ee 	.word	0x080067ee
 8005b84:	00000000 	.word	0x00000000
 8005b88:	080058e1 	.word	0x080058e1
 8005b8c:	080067ea 	.word	0x080067ea

08005b90 <__sfputc_r>:
 8005b90:	6893      	ldr	r3, [r2, #8]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	b410      	push	{r4}
 8005b98:	6093      	str	r3, [r2, #8]
 8005b9a:	da08      	bge.n	8005bae <__sfputc_r+0x1e>
 8005b9c:	6994      	ldr	r4, [r2, #24]
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	db01      	blt.n	8005ba6 <__sfputc_r+0x16>
 8005ba2:	290a      	cmp	r1, #10
 8005ba4:	d103      	bne.n	8005bae <__sfputc_r+0x1e>
 8005ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005baa:	f7ff bd1c 	b.w	80055e6 <__swbuf_r>
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	1c58      	adds	r0, r3, #1
 8005bb2:	6010      	str	r0, [r2, #0]
 8005bb4:	7019      	strb	r1, [r3, #0]
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <__sfputs_r>:
 8005bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	460f      	mov	r7, r1
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	18d5      	adds	r5, r2, r3
 8005bc8:	42ac      	cmp	r4, r5
 8005bca:	d101      	bne.n	8005bd0 <__sfputs_r+0x12>
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e007      	b.n	8005be0 <__sfputs_r+0x22>
 8005bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd4:	463a      	mov	r2, r7
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7ff ffda 	bl	8005b90 <__sfputc_r>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d1f3      	bne.n	8005bc8 <__sfputs_r+0xa>
 8005be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005be4 <_vfiprintf_r>:
 8005be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be8:	460d      	mov	r5, r1
 8005bea:	b09d      	sub	sp, #116	@ 0x74
 8005bec:	4614      	mov	r4, r2
 8005bee:	4698      	mov	r8, r3
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	b118      	cbz	r0, 8005bfc <_vfiprintf_r+0x18>
 8005bf4:	6a03      	ldr	r3, [r0, #32]
 8005bf6:	b90b      	cbnz	r3, 8005bfc <_vfiprintf_r+0x18>
 8005bf8:	f7ff fbd8 	bl	80053ac <__sinit>
 8005bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bfe:	07d9      	lsls	r1, r3, #31
 8005c00:	d405      	bmi.n	8005c0e <_vfiprintf_r+0x2a>
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	059a      	lsls	r2, r3, #22
 8005c06:	d402      	bmi.n	8005c0e <_vfiprintf_r+0x2a>
 8005c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c0a:	f7ff fe1c 	bl	8005846 <__retarget_lock_acquire_recursive>
 8005c0e:	89ab      	ldrh	r3, [r5, #12]
 8005c10:	071b      	lsls	r3, r3, #28
 8005c12:	d501      	bpl.n	8005c18 <_vfiprintf_r+0x34>
 8005c14:	692b      	ldr	r3, [r5, #16]
 8005c16:	b99b      	cbnz	r3, 8005c40 <_vfiprintf_r+0x5c>
 8005c18:	4629      	mov	r1, r5
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f7ff fd22 	bl	8005664 <__swsetup_r>
 8005c20:	b170      	cbz	r0, 8005c40 <_vfiprintf_r+0x5c>
 8005c22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c24:	07dc      	lsls	r4, r3, #31
 8005c26:	d504      	bpl.n	8005c32 <_vfiprintf_r+0x4e>
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	b01d      	add	sp, #116	@ 0x74
 8005c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c32:	89ab      	ldrh	r3, [r5, #12]
 8005c34:	0598      	lsls	r0, r3, #22
 8005c36:	d4f7      	bmi.n	8005c28 <_vfiprintf_r+0x44>
 8005c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c3a:	f7ff fe05 	bl	8005848 <__retarget_lock_release_recursive>
 8005c3e:	e7f3      	b.n	8005c28 <_vfiprintf_r+0x44>
 8005c40:	2300      	movs	r3, #0
 8005c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c44:	2320      	movs	r3, #32
 8005c46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c4e:	2330      	movs	r3, #48	@ 0x30
 8005c50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e00 <_vfiprintf_r+0x21c>
 8005c54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c58:	f04f 0901 	mov.w	r9, #1
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	469a      	mov	sl, r3
 8005c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c64:	b10a      	cbz	r2, 8005c6a <_vfiprintf_r+0x86>
 8005c66:	2a25      	cmp	r2, #37	@ 0x25
 8005c68:	d1f9      	bne.n	8005c5e <_vfiprintf_r+0x7a>
 8005c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c6e:	d00b      	beq.n	8005c88 <_vfiprintf_r+0xa4>
 8005c70:	465b      	mov	r3, fp
 8005c72:	4622      	mov	r2, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	4630      	mov	r0, r6
 8005c78:	f7ff ffa1 	bl	8005bbe <__sfputs_r>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f000 80a7 	beq.w	8005dd0 <_vfiprintf_r+0x1ec>
 8005c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c84:	445a      	add	r2, fp
 8005c86:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c88:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 809f 	beq.w	8005dd0 <_vfiprintf_r+0x1ec>
 8005c92:	2300      	movs	r3, #0
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c9c:	f10a 0a01 	add.w	sl, sl, #1
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	9307      	str	r3, [sp, #28]
 8005ca4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ca8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005caa:	4654      	mov	r4, sl
 8005cac:	2205      	movs	r2, #5
 8005cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb2:	4853      	ldr	r0, [pc, #332]	@ (8005e00 <_vfiprintf_r+0x21c>)
 8005cb4:	f7fa fab4 	bl	8000220 <memchr>
 8005cb8:	9a04      	ldr	r2, [sp, #16]
 8005cba:	b9d8      	cbnz	r0, 8005cf4 <_vfiprintf_r+0x110>
 8005cbc:	06d1      	lsls	r1, r2, #27
 8005cbe:	bf44      	itt	mi
 8005cc0:	2320      	movmi	r3, #32
 8005cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cc6:	0713      	lsls	r3, r2, #28
 8005cc8:	bf44      	itt	mi
 8005cca:	232b      	movmi	r3, #43	@ 0x2b
 8005ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cd6:	d015      	beq.n	8005d04 <_vfiprintf_r+0x120>
 8005cd8:	9a07      	ldr	r2, [sp, #28]
 8005cda:	4654      	mov	r4, sl
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f04f 0c0a 	mov.w	ip, #10
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ce8:	3b30      	subs	r3, #48	@ 0x30
 8005cea:	2b09      	cmp	r3, #9
 8005cec:	d94b      	bls.n	8005d86 <_vfiprintf_r+0x1a2>
 8005cee:	b1b0      	cbz	r0, 8005d1e <_vfiprintf_r+0x13a>
 8005cf0:	9207      	str	r2, [sp, #28]
 8005cf2:	e014      	b.n	8005d1e <_vfiprintf_r+0x13a>
 8005cf4:	eba0 0308 	sub.w	r3, r0, r8
 8005cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	46a2      	mov	sl, r4
 8005d02:	e7d2      	b.n	8005caa <_vfiprintf_r+0xc6>
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	1d19      	adds	r1, r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	9103      	str	r1, [sp, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bfbb      	ittet	lt
 8005d10:	425b      	neglt	r3, r3
 8005d12:	f042 0202 	orrlt.w	r2, r2, #2
 8005d16:	9307      	strge	r3, [sp, #28]
 8005d18:	9307      	strlt	r3, [sp, #28]
 8005d1a:	bfb8      	it	lt
 8005d1c:	9204      	strlt	r2, [sp, #16]
 8005d1e:	7823      	ldrb	r3, [r4, #0]
 8005d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d22:	d10a      	bne.n	8005d3a <_vfiprintf_r+0x156>
 8005d24:	7863      	ldrb	r3, [r4, #1]
 8005d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d28:	d132      	bne.n	8005d90 <_vfiprintf_r+0x1ac>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	1d1a      	adds	r2, r3, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	9203      	str	r2, [sp, #12]
 8005d32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d36:	3402      	adds	r4, #2
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e10 <_vfiprintf_r+0x22c>
 8005d3e:	7821      	ldrb	r1, [r4, #0]
 8005d40:	2203      	movs	r2, #3
 8005d42:	4650      	mov	r0, sl
 8005d44:	f7fa fa6c 	bl	8000220 <memchr>
 8005d48:	b138      	cbz	r0, 8005d5a <_vfiprintf_r+0x176>
 8005d4a:	9b04      	ldr	r3, [sp, #16]
 8005d4c:	eba0 000a 	sub.w	r0, r0, sl
 8005d50:	2240      	movs	r2, #64	@ 0x40
 8005d52:	4082      	lsls	r2, r0
 8005d54:	4313      	orrs	r3, r2
 8005d56:	3401      	adds	r4, #1
 8005d58:	9304      	str	r3, [sp, #16]
 8005d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5e:	4829      	ldr	r0, [pc, #164]	@ (8005e04 <_vfiprintf_r+0x220>)
 8005d60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d64:	2206      	movs	r2, #6
 8005d66:	f7fa fa5b 	bl	8000220 <memchr>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d03f      	beq.n	8005dee <_vfiprintf_r+0x20a>
 8005d6e:	4b26      	ldr	r3, [pc, #152]	@ (8005e08 <_vfiprintf_r+0x224>)
 8005d70:	bb1b      	cbnz	r3, 8005dba <_vfiprintf_r+0x1d6>
 8005d72:	9b03      	ldr	r3, [sp, #12]
 8005d74:	3307      	adds	r3, #7
 8005d76:	f023 0307 	bic.w	r3, r3, #7
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d80:	443b      	add	r3, r7
 8005d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d84:	e76a      	b.n	8005c5c <_vfiprintf_r+0x78>
 8005d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	e7a8      	b.n	8005ce2 <_vfiprintf_r+0xfe>
 8005d90:	2300      	movs	r3, #0
 8005d92:	3401      	adds	r4, #1
 8005d94:	9305      	str	r3, [sp, #20]
 8005d96:	4619      	mov	r1, r3
 8005d98:	f04f 0c0a 	mov.w	ip, #10
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005da2:	3a30      	subs	r2, #48	@ 0x30
 8005da4:	2a09      	cmp	r2, #9
 8005da6:	d903      	bls.n	8005db0 <_vfiprintf_r+0x1cc>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0c6      	beq.n	8005d3a <_vfiprintf_r+0x156>
 8005dac:	9105      	str	r1, [sp, #20]
 8005dae:	e7c4      	b.n	8005d3a <_vfiprintf_r+0x156>
 8005db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005db4:	4604      	mov	r4, r0
 8005db6:	2301      	movs	r3, #1
 8005db8:	e7f0      	b.n	8005d9c <_vfiprintf_r+0x1b8>
 8005dba:	ab03      	add	r3, sp, #12
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	462a      	mov	r2, r5
 8005dc0:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <_vfiprintf_r+0x228>)
 8005dc2:	a904      	add	r1, sp, #16
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	f3af 8000 	nop.w
 8005dca:	4607      	mov	r7, r0
 8005dcc:	1c78      	adds	r0, r7, #1
 8005dce:	d1d6      	bne.n	8005d7e <_vfiprintf_r+0x19a>
 8005dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dd2:	07d9      	lsls	r1, r3, #31
 8005dd4:	d405      	bmi.n	8005de2 <_vfiprintf_r+0x1fe>
 8005dd6:	89ab      	ldrh	r3, [r5, #12]
 8005dd8:	059a      	lsls	r2, r3, #22
 8005dda:	d402      	bmi.n	8005de2 <_vfiprintf_r+0x1fe>
 8005ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dde:	f7ff fd33 	bl	8005848 <__retarget_lock_release_recursive>
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	065b      	lsls	r3, r3, #25
 8005de6:	f53f af1f 	bmi.w	8005c28 <_vfiprintf_r+0x44>
 8005dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dec:	e71e      	b.n	8005c2c <_vfiprintf_r+0x48>
 8005dee:	ab03      	add	r3, sp, #12
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	462a      	mov	r2, r5
 8005df4:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <_vfiprintf_r+0x228>)
 8005df6:	a904      	add	r1, sp, #16
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f879 	bl	8005ef0 <_printf_i>
 8005dfe:	e7e4      	b.n	8005dca <_vfiprintf_r+0x1e6>
 8005e00:	080067e4 	.word	0x080067e4
 8005e04:	080067ee 	.word	0x080067ee
 8005e08:	00000000 	.word	0x00000000
 8005e0c:	08005bbf 	.word	0x08005bbf
 8005e10:	080067ea 	.word	0x080067ea

08005e14 <_printf_common>:
 8005e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	4616      	mov	r6, r2
 8005e1a:	4698      	mov	r8, r3
 8005e1c:	688a      	ldr	r2, [r1, #8]
 8005e1e:	690b      	ldr	r3, [r1, #16]
 8005e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	bfb8      	it	lt
 8005e28:	4613      	movlt	r3, r2
 8005e2a:	6033      	str	r3, [r6, #0]
 8005e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e30:	4607      	mov	r7, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	b10a      	cbz	r2, 8005e3a <_printf_common+0x26>
 8005e36:	3301      	adds	r3, #1
 8005e38:	6033      	str	r3, [r6, #0]
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	0699      	lsls	r1, r3, #26
 8005e3e:	bf42      	ittt	mi
 8005e40:	6833      	ldrmi	r3, [r6, #0]
 8005e42:	3302      	addmi	r3, #2
 8005e44:	6033      	strmi	r3, [r6, #0]
 8005e46:	6825      	ldr	r5, [r4, #0]
 8005e48:	f015 0506 	ands.w	r5, r5, #6
 8005e4c:	d106      	bne.n	8005e5c <_printf_common+0x48>
 8005e4e:	f104 0a19 	add.w	sl, r4, #25
 8005e52:	68e3      	ldr	r3, [r4, #12]
 8005e54:	6832      	ldr	r2, [r6, #0]
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	42ab      	cmp	r3, r5
 8005e5a:	dc26      	bgt.n	8005eaa <_printf_common+0x96>
 8005e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e60:	6822      	ldr	r2, [r4, #0]
 8005e62:	3b00      	subs	r3, #0
 8005e64:	bf18      	it	ne
 8005e66:	2301      	movne	r3, #1
 8005e68:	0692      	lsls	r2, r2, #26
 8005e6a:	d42b      	bmi.n	8005ec4 <_printf_common+0xb0>
 8005e6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e70:	4641      	mov	r1, r8
 8005e72:	4638      	mov	r0, r7
 8005e74:	47c8      	blx	r9
 8005e76:	3001      	adds	r0, #1
 8005e78:	d01e      	beq.n	8005eb8 <_printf_common+0xa4>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	6922      	ldr	r2, [r4, #16]
 8005e7e:	f003 0306 	and.w	r3, r3, #6
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	bf02      	ittt	eq
 8005e86:	68e5      	ldreq	r5, [r4, #12]
 8005e88:	6833      	ldreq	r3, [r6, #0]
 8005e8a:	1aed      	subeq	r5, r5, r3
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	bf0c      	ite	eq
 8005e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e94:	2500      	movne	r5, #0
 8005e96:	4293      	cmp	r3, r2
 8005e98:	bfc4      	itt	gt
 8005e9a:	1a9b      	subgt	r3, r3, r2
 8005e9c:	18ed      	addgt	r5, r5, r3
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	341a      	adds	r4, #26
 8005ea2:	42b5      	cmp	r5, r6
 8005ea4:	d11a      	bne.n	8005edc <_printf_common+0xc8>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e008      	b.n	8005ebc <_printf_common+0xa8>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4652      	mov	r2, sl
 8005eae:	4641      	mov	r1, r8
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	47c8      	blx	r9
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d103      	bne.n	8005ec0 <_printf_common+0xac>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	e7c6      	b.n	8005e52 <_printf_common+0x3e>
 8005ec4:	18e1      	adds	r1, r4, r3
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	2030      	movs	r0, #48	@ 0x30
 8005eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ece:	4422      	add	r2, r4
 8005ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ed8:	3302      	adds	r3, #2
 8005eda:	e7c7      	b.n	8005e6c <_printf_common+0x58>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4622      	mov	r2, r4
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	47c8      	blx	r9
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0e6      	beq.n	8005eb8 <_printf_common+0xa4>
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7d9      	b.n	8005ea2 <_printf_common+0x8e>
	...

08005ef0 <_printf_i>:
 8005ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	7e0f      	ldrb	r7, [r1, #24]
 8005ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ef8:	2f78      	cmp	r7, #120	@ 0x78
 8005efa:	4691      	mov	r9, r2
 8005efc:	4680      	mov	r8, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	469a      	mov	sl, r3
 8005f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f06:	d807      	bhi.n	8005f18 <_printf_i+0x28>
 8005f08:	2f62      	cmp	r7, #98	@ 0x62
 8005f0a:	d80a      	bhi.n	8005f22 <_printf_i+0x32>
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	f000 80d2 	beq.w	80060b6 <_printf_i+0x1c6>
 8005f12:	2f58      	cmp	r7, #88	@ 0x58
 8005f14:	f000 80b9 	beq.w	800608a <_printf_i+0x19a>
 8005f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f20:	e03a      	b.n	8005f98 <_printf_i+0xa8>
 8005f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f26:	2b15      	cmp	r3, #21
 8005f28:	d8f6      	bhi.n	8005f18 <_printf_i+0x28>
 8005f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8005f30 <_printf_i+0x40>)
 8005f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f30:	08005f89 	.word	0x08005f89
 8005f34:	08005f9d 	.word	0x08005f9d
 8005f38:	08005f19 	.word	0x08005f19
 8005f3c:	08005f19 	.word	0x08005f19
 8005f40:	08005f19 	.word	0x08005f19
 8005f44:	08005f19 	.word	0x08005f19
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005f19 	.word	0x08005f19
 8005f50:	08005f19 	.word	0x08005f19
 8005f54:	08005f19 	.word	0x08005f19
 8005f58:	08005f19 	.word	0x08005f19
 8005f5c:	0800609d 	.word	0x0800609d
 8005f60:	08005fc7 	.word	0x08005fc7
 8005f64:	08006057 	.word	0x08006057
 8005f68:	08005f19 	.word	0x08005f19
 8005f6c:	08005f19 	.word	0x08005f19
 8005f70:	080060bf 	.word	0x080060bf
 8005f74:	08005f19 	.word	0x08005f19
 8005f78:	08005fc7 	.word	0x08005fc7
 8005f7c:	08005f19 	.word	0x08005f19
 8005f80:	08005f19 	.word	0x08005f19
 8005f84:	0800605f 	.word	0x0800605f
 8005f88:	6833      	ldr	r3, [r6, #0]
 8005f8a:	1d1a      	adds	r2, r3, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6032      	str	r2, [r6, #0]
 8005f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e09d      	b.n	80060d8 <_printf_i+0x1e8>
 8005f9c:	6833      	ldr	r3, [r6, #0]
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	1d19      	adds	r1, r3, #4
 8005fa2:	6031      	str	r1, [r6, #0]
 8005fa4:	0606      	lsls	r6, r0, #24
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0xbc>
 8005fa8:	681d      	ldr	r5, [r3, #0]
 8005faa:	e003      	b.n	8005fb4 <_printf_i+0xc4>
 8005fac:	0645      	lsls	r5, r0, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0xb8>
 8005fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	da03      	bge.n	8005fc0 <_printf_i+0xd0>
 8005fb8:	232d      	movs	r3, #45	@ 0x2d
 8005fba:	426d      	negs	r5, r5
 8005fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fc0:	4859      	ldr	r0, [pc, #356]	@ (8006128 <_printf_i+0x238>)
 8005fc2:	230a      	movs	r3, #10
 8005fc4:	e011      	b.n	8005fea <_printf_i+0xfa>
 8005fc6:	6821      	ldr	r1, [r4, #0]
 8005fc8:	6833      	ldr	r3, [r6, #0]
 8005fca:	0608      	lsls	r0, r1, #24
 8005fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fd0:	d402      	bmi.n	8005fd8 <_printf_i+0xe8>
 8005fd2:	0649      	lsls	r1, r1, #25
 8005fd4:	bf48      	it	mi
 8005fd6:	b2ad      	uxthmi	r5, r5
 8005fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fda:	4853      	ldr	r0, [pc, #332]	@ (8006128 <_printf_i+0x238>)
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	bf14      	ite	ne
 8005fe0:	230a      	movne	r3, #10
 8005fe2:	2308      	moveq	r3, #8
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fea:	6866      	ldr	r6, [r4, #4]
 8005fec:	60a6      	str	r6, [r4, #8]
 8005fee:	2e00      	cmp	r6, #0
 8005ff0:	bfa2      	ittt	ge
 8005ff2:	6821      	ldrge	r1, [r4, #0]
 8005ff4:	f021 0104 	bicge.w	r1, r1, #4
 8005ff8:	6021      	strge	r1, [r4, #0]
 8005ffa:	b90d      	cbnz	r5, 8006000 <_printf_i+0x110>
 8005ffc:	2e00      	cmp	r6, #0
 8005ffe:	d04b      	beq.n	8006098 <_printf_i+0x1a8>
 8006000:	4616      	mov	r6, r2
 8006002:	fbb5 f1f3 	udiv	r1, r5, r3
 8006006:	fb03 5711 	mls	r7, r3, r1, r5
 800600a:	5dc7      	ldrb	r7, [r0, r7]
 800600c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006010:	462f      	mov	r7, r5
 8006012:	42bb      	cmp	r3, r7
 8006014:	460d      	mov	r5, r1
 8006016:	d9f4      	bls.n	8006002 <_printf_i+0x112>
 8006018:	2b08      	cmp	r3, #8
 800601a:	d10b      	bne.n	8006034 <_printf_i+0x144>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	07df      	lsls	r7, r3, #31
 8006020:	d508      	bpl.n	8006034 <_printf_i+0x144>
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	6861      	ldr	r1, [r4, #4]
 8006026:	4299      	cmp	r1, r3
 8006028:	bfde      	ittt	le
 800602a:	2330      	movle	r3, #48	@ 0x30
 800602c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006030:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006034:	1b92      	subs	r2, r2, r6
 8006036:	6122      	str	r2, [r4, #16]
 8006038:	f8cd a000 	str.w	sl, [sp]
 800603c:	464b      	mov	r3, r9
 800603e:	aa03      	add	r2, sp, #12
 8006040:	4621      	mov	r1, r4
 8006042:	4640      	mov	r0, r8
 8006044:	f7ff fee6 	bl	8005e14 <_printf_common>
 8006048:	3001      	adds	r0, #1
 800604a:	d14a      	bne.n	80060e2 <_printf_i+0x1f2>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	b004      	add	sp, #16
 8006052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	4833      	ldr	r0, [pc, #204]	@ (800612c <_printf_i+0x23c>)
 8006060:	2778      	movs	r7, #120	@ 0x78
 8006062:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	6831      	ldr	r1, [r6, #0]
 800606a:	061f      	lsls	r7, r3, #24
 800606c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006070:	d402      	bmi.n	8006078 <_printf_i+0x188>
 8006072:	065f      	lsls	r7, r3, #25
 8006074:	bf48      	it	mi
 8006076:	b2ad      	uxthmi	r5, r5
 8006078:	6031      	str	r1, [r6, #0]
 800607a:	07d9      	lsls	r1, r3, #31
 800607c:	bf44      	itt	mi
 800607e:	f043 0320 	orrmi.w	r3, r3, #32
 8006082:	6023      	strmi	r3, [r4, #0]
 8006084:	b11d      	cbz	r5, 800608e <_printf_i+0x19e>
 8006086:	2310      	movs	r3, #16
 8006088:	e7ac      	b.n	8005fe4 <_printf_i+0xf4>
 800608a:	4827      	ldr	r0, [pc, #156]	@ (8006128 <_printf_i+0x238>)
 800608c:	e7e9      	b.n	8006062 <_printf_i+0x172>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	f023 0320 	bic.w	r3, r3, #32
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	e7f6      	b.n	8006086 <_printf_i+0x196>
 8006098:	4616      	mov	r6, r2
 800609a:	e7bd      	b.n	8006018 <_printf_i+0x128>
 800609c:	6833      	ldr	r3, [r6, #0]
 800609e:	6825      	ldr	r5, [r4, #0]
 80060a0:	6961      	ldr	r1, [r4, #20]
 80060a2:	1d18      	adds	r0, r3, #4
 80060a4:	6030      	str	r0, [r6, #0]
 80060a6:	062e      	lsls	r6, r5, #24
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0x1c0>
 80060ac:	6019      	str	r1, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <_printf_i+0x1c6>
 80060b0:	0668      	lsls	r0, r5, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0x1bc>
 80060b4:	8019      	strh	r1, [r3, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	4616      	mov	r6, r2
 80060bc:	e7bc      	b.n	8006038 <_printf_i+0x148>
 80060be:	6833      	ldr	r3, [r6, #0]
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	6032      	str	r2, [r6, #0]
 80060c4:	681e      	ldr	r6, [r3, #0]
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	2100      	movs	r1, #0
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7fa f8a8 	bl	8000220 <memchr>
 80060d0:	b108      	cbz	r0, 80060d6 <_printf_i+0x1e6>
 80060d2:	1b80      	subs	r0, r0, r6
 80060d4:	6060      	str	r0, [r4, #4]
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	2300      	movs	r3, #0
 80060dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e0:	e7aa      	b.n	8006038 <_printf_i+0x148>
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	4632      	mov	r2, r6
 80060e6:	4649      	mov	r1, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	47d0      	blx	sl
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0ad      	beq.n	800604c <_printf_i+0x15c>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	079b      	lsls	r3, r3, #30
 80060f4:	d413      	bmi.n	800611e <_printf_i+0x22e>
 80060f6:	68e0      	ldr	r0, [r4, #12]
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	4298      	cmp	r0, r3
 80060fc:	bfb8      	it	lt
 80060fe:	4618      	movlt	r0, r3
 8006100:	e7a6      	b.n	8006050 <_printf_i+0x160>
 8006102:	2301      	movs	r3, #1
 8006104:	4632      	mov	r2, r6
 8006106:	4649      	mov	r1, r9
 8006108:	4640      	mov	r0, r8
 800610a:	47d0      	blx	sl
 800610c:	3001      	adds	r0, #1
 800610e:	d09d      	beq.n	800604c <_printf_i+0x15c>
 8006110:	3501      	adds	r5, #1
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	9903      	ldr	r1, [sp, #12]
 8006116:	1a5b      	subs	r3, r3, r1
 8006118:	42ab      	cmp	r3, r5
 800611a:	dcf2      	bgt.n	8006102 <_printf_i+0x212>
 800611c:	e7eb      	b.n	80060f6 <_printf_i+0x206>
 800611e:	2500      	movs	r5, #0
 8006120:	f104 0619 	add.w	r6, r4, #25
 8006124:	e7f5      	b.n	8006112 <_printf_i+0x222>
 8006126:	bf00      	nop
 8006128:	080067f5 	.word	0x080067f5
 800612c:	08006806 	.word	0x08006806

08006130 <__sflush_r>:
 8006130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	0716      	lsls	r6, r2, #28
 800613a:	4605      	mov	r5, r0
 800613c:	460c      	mov	r4, r1
 800613e:	d454      	bmi.n	80061ea <__sflush_r+0xba>
 8006140:	684b      	ldr	r3, [r1, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	dc02      	bgt.n	800614c <__sflush_r+0x1c>
 8006146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	dd48      	ble.n	80061de <__sflush_r+0xae>
 800614c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800614e:	2e00      	cmp	r6, #0
 8006150:	d045      	beq.n	80061de <__sflush_r+0xae>
 8006152:	2300      	movs	r3, #0
 8006154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006158:	682f      	ldr	r7, [r5, #0]
 800615a:	6a21      	ldr	r1, [r4, #32]
 800615c:	602b      	str	r3, [r5, #0]
 800615e:	d030      	beq.n	80061c2 <__sflush_r+0x92>
 8006160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	0759      	lsls	r1, r3, #29
 8006166:	d505      	bpl.n	8006174 <__sflush_r+0x44>
 8006168:	6863      	ldr	r3, [r4, #4]
 800616a:	1ad2      	subs	r2, r2, r3
 800616c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800616e:	b10b      	cbz	r3, 8006174 <__sflush_r+0x44>
 8006170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	2300      	movs	r3, #0
 8006176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006178:	6a21      	ldr	r1, [r4, #32]
 800617a:	4628      	mov	r0, r5
 800617c:	47b0      	blx	r6
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	d106      	bne.n	8006192 <__sflush_r+0x62>
 8006184:	6829      	ldr	r1, [r5, #0]
 8006186:	291d      	cmp	r1, #29
 8006188:	d82b      	bhi.n	80061e2 <__sflush_r+0xb2>
 800618a:	4a2a      	ldr	r2, [pc, #168]	@ (8006234 <__sflush_r+0x104>)
 800618c:	410a      	asrs	r2, r1
 800618e:	07d6      	lsls	r6, r2, #31
 8006190:	d427      	bmi.n	80061e2 <__sflush_r+0xb2>
 8006192:	2200      	movs	r2, #0
 8006194:	6062      	str	r2, [r4, #4]
 8006196:	04d9      	lsls	r1, r3, #19
 8006198:	6922      	ldr	r2, [r4, #16]
 800619a:	6022      	str	r2, [r4, #0]
 800619c:	d504      	bpl.n	80061a8 <__sflush_r+0x78>
 800619e:	1c42      	adds	r2, r0, #1
 80061a0:	d101      	bne.n	80061a6 <__sflush_r+0x76>
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	b903      	cbnz	r3, 80061a8 <__sflush_r+0x78>
 80061a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80061a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061aa:	602f      	str	r7, [r5, #0]
 80061ac:	b1b9      	cbz	r1, 80061de <__sflush_r+0xae>
 80061ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061b2:	4299      	cmp	r1, r3
 80061b4:	d002      	beq.n	80061bc <__sflush_r+0x8c>
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7ff fb48 	bl	800584c <_free_r>
 80061bc:	2300      	movs	r3, #0
 80061be:	6363      	str	r3, [r4, #52]	@ 0x34
 80061c0:	e00d      	b.n	80061de <__sflush_r+0xae>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b0      	blx	r6
 80061c8:	4602      	mov	r2, r0
 80061ca:	1c50      	adds	r0, r2, #1
 80061cc:	d1c9      	bne.n	8006162 <__sflush_r+0x32>
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0c6      	beq.n	8006162 <__sflush_r+0x32>
 80061d4:	2b1d      	cmp	r3, #29
 80061d6:	d001      	beq.n	80061dc <__sflush_r+0xac>
 80061d8:	2b16      	cmp	r3, #22
 80061da:	d11e      	bne.n	800621a <__sflush_r+0xea>
 80061dc:	602f      	str	r7, [r5, #0]
 80061de:	2000      	movs	r0, #0
 80061e0:	e022      	b.n	8006228 <__sflush_r+0xf8>
 80061e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061e6:	b21b      	sxth	r3, r3
 80061e8:	e01b      	b.n	8006222 <__sflush_r+0xf2>
 80061ea:	690f      	ldr	r7, [r1, #16]
 80061ec:	2f00      	cmp	r7, #0
 80061ee:	d0f6      	beq.n	80061de <__sflush_r+0xae>
 80061f0:	0793      	lsls	r3, r2, #30
 80061f2:	680e      	ldr	r6, [r1, #0]
 80061f4:	bf08      	it	eq
 80061f6:	694b      	ldreq	r3, [r1, #20]
 80061f8:	600f      	str	r7, [r1, #0]
 80061fa:	bf18      	it	ne
 80061fc:	2300      	movne	r3, #0
 80061fe:	eba6 0807 	sub.w	r8, r6, r7
 8006202:	608b      	str	r3, [r1, #8]
 8006204:	f1b8 0f00 	cmp.w	r8, #0
 8006208:	dde9      	ble.n	80061de <__sflush_r+0xae>
 800620a:	6a21      	ldr	r1, [r4, #32]
 800620c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800620e:	4643      	mov	r3, r8
 8006210:	463a      	mov	r2, r7
 8006212:	4628      	mov	r0, r5
 8006214:	47b0      	blx	r6
 8006216:	2800      	cmp	r0, #0
 8006218:	dc08      	bgt.n	800622c <__sflush_r+0xfc>
 800621a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800621e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	4407      	add	r7, r0
 800622e:	eba8 0800 	sub.w	r8, r8, r0
 8006232:	e7e7      	b.n	8006204 <__sflush_r+0xd4>
 8006234:	dfbffffe 	.word	0xdfbffffe

08006238 <_fflush_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	690b      	ldr	r3, [r1, #16]
 800623c:	4605      	mov	r5, r0
 800623e:	460c      	mov	r4, r1
 8006240:	b913      	cbnz	r3, 8006248 <_fflush_r+0x10>
 8006242:	2500      	movs	r5, #0
 8006244:	4628      	mov	r0, r5
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	b118      	cbz	r0, 8006252 <_fflush_r+0x1a>
 800624a:	6a03      	ldr	r3, [r0, #32]
 800624c:	b90b      	cbnz	r3, 8006252 <_fflush_r+0x1a>
 800624e:	f7ff f8ad 	bl	80053ac <__sinit>
 8006252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f3      	beq.n	8006242 <_fflush_r+0xa>
 800625a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800625c:	07d0      	lsls	r0, r2, #31
 800625e:	d404      	bmi.n	800626a <_fflush_r+0x32>
 8006260:	0599      	lsls	r1, r3, #22
 8006262:	d402      	bmi.n	800626a <_fflush_r+0x32>
 8006264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006266:	f7ff faee 	bl	8005846 <__retarget_lock_acquire_recursive>
 800626a:	4628      	mov	r0, r5
 800626c:	4621      	mov	r1, r4
 800626e:	f7ff ff5f 	bl	8006130 <__sflush_r>
 8006272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006274:	07da      	lsls	r2, r3, #31
 8006276:	4605      	mov	r5, r0
 8006278:	d4e4      	bmi.n	8006244 <_fflush_r+0xc>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	059b      	lsls	r3, r3, #22
 800627e:	d4e1      	bmi.n	8006244 <_fflush_r+0xc>
 8006280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006282:	f7ff fae1 	bl	8005848 <__retarget_lock_release_recursive>
 8006286:	e7dd      	b.n	8006244 <_fflush_r+0xc>

08006288 <__swhatbuf_r>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	460c      	mov	r4, r1
 800628c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006290:	2900      	cmp	r1, #0
 8006292:	b096      	sub	sp, #88	@ 0x58
 8006294:	4615      	mov	r5, r2
 8006296:	461e      	mov	r6, r3
 8006298:	da0d      	bge.n	80062b6 <__swhatbuf_r+0x2e>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062a0:	f04f 0100 	mov.w	r1, #0
 80062a4:	bf14      	ite	ne
 80062a6:	2340      	movne	r3, #64	@ 0x40
 80062a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062ac:	2000      	movs	r0, #0
 80062ae:	6031      	str	r1, [r6, #0]
 80062b0:	602b      	str	r3, [r5, #0]
 80062b2:	b016      	add	sp, #88	@ 0x58
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	466a      	mov	r2, sp
 80062b8:	f000 f862 	bl	8006380 <_fstat_r>
 80062bc:	2800      	cmp	r0, #0
 80062be:	dbec      	blt.n	800629a <__swhatbuf_r+0x12>
 80062c0:	9901      	ldr	r1, [sp, #4]
 80062c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062ca:	4259      	negs	r1, r3
 80062cc:	4159      	adcs	r1, r3
 80062ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062d2:	e7eb      	b.n	80062ac <__swhatbuf_r+0x24>

080062d4 <__smakebuf_r>:
 80062d4:	898b      	ldrh	r3, [r1, #12]
 80062d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062d8:	079d      	lsls	r5, r3, #30
 80062da:	4606      	mov	r6, r0
 80062dc:	460c      	mov	r4, r1
 80062de:	d507      	bpl.n	80062f0 <__smakebuf_r+0x1c>
 80062e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	2301      	movs	r3, #1
 80062ea:	6163      	str	r3, [r4, #20]
 80062ec:	b003      	add	sp, #12
 80062ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f0:	ab01      	add	r3, sp, #4
 80062f2:	466a      	mov	r2, sp
 80062f4:	f7ff ffc8 	bl	8006288 <__swhatbuf_r>
 80062f8:	9f00      	ldr	r7, [sp, #0]
 80062fa:	4605      	mov	r5, r0
 80062fc:	4639      	mov	r1, r7
 80062fe:	4630      	mov	r0, r6
 8006300:	f7fe ff3c 	bl	800517c <_malloc_r>
 8006304:	b948      	cbnz	r0, 800631a <__smakebuf_r+0x46>
 8006306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630a:	059a      	lsls	r2, r3, #22
 800630c:	d4ee      	bmi.n	80062ec <__smakebuf_r+0x18>
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	f043 0302 	orr.w	r3, r3, #2
 8006316:	81a3      	strh	r3, [r4, #12]
 8006318:	e7e2      	b.n	80062e0 <__smakebuf_r+0xc>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	6020      	str	r0, [r4, #0]
 800631e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	9b01      	ldr	r3, [sp, #4]
 8006326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800632a:	b15b      	cbz	r3, 8006344 <__smakebuf_r+0x70>
 800632c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f837 	bl	80063a4 <_isatty_r>
 8006336:	b128      	cbz	r0, 8006344 <__smakebuf_r+0x70>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	431d      	orrs	r5, r3
 8006348:	81a5      	strh	r5, [r4, #12]
 800634a:	e7cf      	b.n	80062ec <__smakebuf_r+0x18>

0800634c <memmove>:
 800634c:	4288      	cmp	r0, r1
 800634e:	b510      	push	{r4, lr}
 8006350:	eb01 0402 	add.w	r4, r1, r2
 8006354:	d902      	bls.n	800635c <memmove+0x10>
 8006356:	4284      	cmp	r4, r0
 8006358:	4623      	mov	r3, r4
 800635a:	d807      	bhi.n	800636c <memmove+0x20>
 800635c:	1e43      	subs	r3, r0, #1
 800635e:	42a1      	cmp	r1, r4
 8006360:	d008      	beq.n	8006374 <memmove+0x28>
 8006362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800636a:	e7f8      	b.n	800635e <memmove+0x12>
 800636c:	4402      	add	r2, r0
 800636e:	4601      	mov	r1, r0
 8006370:	428a      	cmp	r2, r1
 8006372:	d100      	bne.n	8006376 <memmove+0x2a>
 8006374:	bd10      	pop	{r4, pc}
 8006376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800637a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800637e:	e7f7      	b.n	8006370 <memmove+0x24>

08006380 <_fstat_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	@ (80063a0 <_fstat_r+0x20>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	f7fb f920 	bl	80015d2 <_fstat>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d102      	bne.n	800639c <_fstat_r+0x1c>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	b103      	cbz	r3, 800639c <_fstat_r+0x1c>
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	bf00      	nop
 80063a0:	20000378 	.word	0x20000378

080063a4 <_isatty_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	@ (80063c0 <_isatty_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fb f91f 	bl	80015f2 <_isatty>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_isatty_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_isatty_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	20000378 	.word	0x20000378

080063c4 <memcpy>:
 80063c4:	440a      	add	r2, r1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063cc:	d100      	bne.n	80063d0 <memcpy+0xc>
 80063ce:	4770      	bx	lr
 80063d0:	b510      	push	{r4, lr}
 80063d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063da:	4291      	cmp	r1, r2
 80063dc:	d1f9      	bne.n	80063d2 <memcpy+0xe>
 80063de:	bd10      	pop	{r4, pc}

080063e0 <_realloc_r>:
 80063e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e4:	4680      	mov	r8, r0
 80063e6:	4615      	mov	r5, r2
 80063e8:	460c      	mov	r4, r1
 80063ea:	b921      	cbnz	r1, 80063f6 <_realloc_r+0x16>
 80063ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f0:	4611      	mov	r1, r2
 80063f2:	f7fe bec3 	b.w	800517c <_malloc_r>
 80063f6:	b92a      	cbnz	r2, 8006404 <_realloc_r+0x24>
 80063f8:	f7ff fa28 	bl	800584c <_free_r>
 80063fc:	2400      	movs	r4, #0
 80063fe:	4620      	mov	r0, r4
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006404:	f000 f81a 	bl	800643c <_malloc_usable_size_r>
 8006408:	4285      	cmp	r5, r0
 800640a:	4606      	mov	r6, r0
 800640c:	d802      	bhi.n	8006414 <_realloc_r+0x34>
 800640e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006412:	d8f4      	bhi.n	80063fe <_realloc_r+0x1e>
 8006414:	4629      	mov	r1, r5
 8006416:	4640      	mov	r0, r8
 8006418:	f7fe feb0 	bl	800517c <_malloc_r>
 800641c:	4607      	mov	r7, r0
 800641e:	2800      	cmp	r0, #0
 8006420:	d0ec      	beq.n	80063fc <_realloc_r+0x1c>
 8006422:	42b5      	cmp	r5, r6
 8006424:	462a      	mov	r2, r5
 8006426:	4621      	mov	r1, r4
 8006428:	bf28      	it	cs
 800642a:	4632      	movcs	r2, r6
 800642c:	f7ff ffca 	bl	80063c4 <memcpy>
 8006430:	4621      	mov	r1, r4
 8006432:	4640      	mov	r0, r8
 8006434:	f7ff fa0a 	bl	800584c <_free_r>
 8006438:	463c      	mov	r4, r7
 800643a:	e7e0      	b.n	80063fe <_realloc_r+0x1e>

0800643c <_malloc_usable_size_r>:
 800643c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006440:	1f18      	subs	r0, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfbc      	itt	lt
 8006446:	580b      	ldrlt	r3, [r1, r0]
 8006448:	18c0      	addlt	r0, r0, r3
 800644a:	4770      	bx	lr

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
